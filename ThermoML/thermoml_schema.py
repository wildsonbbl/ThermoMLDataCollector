# ./thermoml_schema.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:54a913a9b9f35e60a7baabfb3d5af61fdca723fc
# Generated 2023-03-31 15:57:15.696807 by PyXB version 1.2.6 using Python 3.11.0.final.0
# Namespace http://www.iupac.org/namespaces/ThermoML

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:da1fcda6-cff5-11ed-8731-00155d64de2c')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.iupac.org/namespaces/ThermoML', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 69, 4)
    _Documentation = None
STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.book = STD_ANON._CF_enumeration.addEnumeration(unicode_value='book', tag='book')
STD_ANON.journal = STD_ANON._CF_enumeration.addEnumeration(unicode_value='journal', tag='journal')
STD_ANON.report = STD_ANON._CF_enumeration.addEnumeration(unicode_value='report', tag='report')
STD_ANON.patent = STD_ANON._CF_enumeration.addEnumeration(unicode_value='patent', tag='patent')
STD_ANON.thesis = STD_ANON._CF_enumeration.addEnumeration(unicode_value='thesis', tag='thesis')
STD_ANON.conferenceProceedings = STD_ANON._CF_enumeration.addEnumeration(unicode_value='conferenceProceedings', tag='conferenceProceedings')
STD_ANON.archivedDocument = STD_ANON._CF_enumeration.addEnumeration(unicode_value='archivedDocument', tag='archivedDocument')
STD_ANON.personalCorrespondence = STD_ANON._CF_enumeration.addEnumeration(unicode_value='personalCorrespondence', tag='personalCorrespondence')
STD_ANON.publishedTranslation = STD_ANON._CF_enumeration.addEnumeration(unicode_value='publishedTranslation', tag='publishedTranslation')
STD_ANON.unspecified = STD_ANON._CF_enumeration.addEnumeration(unicode_value='unspecified', tag='unspecified')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)
_module_typeBindings.STD_ANON = STD_ANON

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 88, 4)
    _Documentation = None
STD_ANON_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_.Original = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='Original', tag='Original')
STD_ANON_.ChemicalAbstracts = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='ChemicalAbstracts', tag='ChemicalAbstracts')
STD_ANON_.Other = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)
_module_typeBindings.STD_ANON_ = STD_ANON_

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 136, 4)
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.Chinese = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Chinese', tag='Chinese')
STD_ANON_2.English = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='English', tag='English')
STD_ANON_2.French = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='French', tag='French')
STD_ANON_2.German = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='German', tag='German')
STD_ANON_2.Japanese = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Japanese', tag='Japanese')
STD_ANON_2.Polish = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Polish', tag='Polish')
STD_ANON_2.Russian = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Russian', tag='Russian')
STD_ANON_2.Other_language = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Other language', tag='Other_language')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)
_module_typeBindings.STD_ANON_2 = STD_ANON_2

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 410, 5)
    _Documentation = None
STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.equilibrium = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='equilibrium', tag='equilibrium')
STD_ANON_3.single_species = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='single species', tag='single_species')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)
_module_typeBindings.STD_ANON_3 = STD_ANON_3

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 552, 9)
    _Documentation = None
STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4.Buffer = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='Buffer', tag='Buffer')
STD_ANON_4.Solvent = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='Solvent', tag='Solvent')
STD_ANON_4.Inert = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='Inert', tag='Inert')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)
_module_typeBindings.STD_ANON_4 = STD_ANON_4

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 595, 17)
    _Documentation = None
STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5.Critical_temperature_K = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Critical temperature, K', tag='Critical_temperature_K')
STD_ANON_5.Critical_pressure_kPa = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Critical pressure, kPa', tag='Critical_pressure_kPa')
STD_ANON_5.Critical_density_kgm3 = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Critical density, kg/m3', tag='Critical_density_kgm3')
STD_ANON_5.Critical_molar_volume_m3mol = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Critical molar volume, m3/mol', tag='Critical_molar_volume_m3mol')
STD_ANON_5.Critical_specific_volume_m3kg = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Critical specific volume, m3/kg', tag='Critical_specific_volume_m3kg')
STD_ANON_5.Critical_compressibility_factor = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Critical compressibility factor', tag='Critical_compressibility_factor')
STD_ANON_5.Lower_consolute_temperature_K = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Lower consolute temperature, K', tag='Lower_consolute_temperature_K')
STD_ANON_5.Upper_consolute_temperature_K = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Upper consolute temperature, K', tag='Upper_consolute_temperature_K')
STD_ANON_5.Lower_consolute_pressure_kPa = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Lower consolute pressure, kPa', tag='Lower_consolute_pressure_kPa')
STD_ANON_5.Upper_consolute_pressure_kPa = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Upper consolute pressure, kPa', tag='Upper_consolute_pressure_kPa')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)
_module_typeBindings.STD_ANON_5 = STD_ANON_5

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 612, 18)
    _Documentation = None
STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6.Visual_observation_in_an_unstirred_cell = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='Visual observation in an unstirred cell', tag='Visual_observation_in_an_unstirred_cell')
STD_ANON_6.Visual_observation_in_a_stirred_cell = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='Visual observation in a stirred cell', tag='Visual_observation_in_a_stirred_cell')
STD_ANON_6.DSCDTA = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='DSC/DTA', tag='DSCDTA')
STD_ANON_6.Derived_from_PVT_data = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='Derived from PVT data', tag='Derived_from_PVT_data')
STD_ANON_6.Extrapolated_vapor_pressure = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='Extrapolated vapor pressure', tag='Extrapolated_vapor_pressure')
STD_ANON_6.Rectilinear_diameter = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='Rectilinear diameter', tag='Rectilinear_diameter')
STD_ANON_6.Relative_permittivity_measurements = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='Relative permittivity measurements', tag='Relative_permittivity_measurements')
STD_ANON_6.Refractive_index_measurements = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='Refractive index measurements', tag='Refractive_index_measurements')
STD_ANON_6.Direct_measurement = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='Direct measurement', tag='Direct_measurement')
STD_ANON_6.Other = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)
_module_typeBindings.STD_ANON_6 = STD_ANON_6

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 638, 17)
    _Documentation = None
STD_ANON_7._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_7, enum_prefix=None)
STD_ANON_7.Vapor_or_sublimation_pressure_kPa = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='Vapor or sublimation pressure, kPa', tag='Vapor_or_sublimation_pressure_kPa')
STD_ANON_7.Normal_boiling_temperature_K = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='Normal boiling temperature, K', tag='Normal_boiling_temperature_K')
STD_ANON_7.Boiling_temperature_at_pressure_P_K = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='Boiling temperature at pressure P, K', tag='Boiling_temperature_at_pressure_P_K')
STD_ANON_7.Azeotropic_pressure_kPa = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='Azeotropic pressure, kPa', tag='Azeotropic_pressure_kPa')
STD_ANON_7.Azeotropic_temperature_K = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='Azeotropic temperature, K', tag='Azeotropic_temperature_K')
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_enumeration)
_module_typeBindings.STD_ANON_7 = STD_ANON_7

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 654, 18)
    _Documentation = None
STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_8, enum_prefix=None)
STD_ANON_8.Manometric_method = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Manometric method', tag='Manometric_method')
STD_ANON_8.Closed_cell_Static_method = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Closed cell (Static) method', tag='Closed_cell_Static_method')
STD_ANON_8.Diaphragm_manometer = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Diaphragm manometer', tag='Diaphragm_manometer')
STD_ANON_8.Inclined_piston_gauge = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Inclined piston gauge', tag='Inclined_piston_gauge')
STD_ANON_8.Isochoric_PVT_apparatus = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Isochoric PVT apparatus', tag='Isochoric_PVT_apparatus')
STD_ANON_8.Isoteniscope = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Isoteniscope', tag='Isoteniscope')
STD_ANON_8.Knudsen_effusion_method = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Knudsen effusion method', tag='Knudsen_effusion_method')
STD_ANON_8.Distillation = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Distillation', tag='Distillation')
STD_ANON_8.Ebulliometric_method_Recirculating_still = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Ebulliometric method (Recirculating still)', tag='Ebulliometric_method_Recirculating_still')
STD_ANON_8.Twin_ebulliometer = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Twin ebulliometer', tag='Twin_ebulliometer')
STD_ANON_8.Transpiration_method = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Transpiration method', tag='Transpiration_method')
STD_ANON_8.Rate_of_evaporation = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Rate of evaporation', tag='Rate_of_evaporation')
STD_ANON_8.Torsion_effusion_method = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Torsion effusion method', tag='Torsion_effusion_method')
STD_ANON_8.Gas_chromatography = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Gas chromatography', tag='Gas_chromatography')
STD_ANON_8.Laser_pulse_heating = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Laser pulse heating', tag='Laser_pulse_heating')
STD_ANON_8.Levitation_methods = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Levitation methods', tag='Levitation_methods')
STD_ANON_8.By_XY = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='By X=Y', tag='By_XY')
STD_ANON_8.By_PX_extreme = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='By P(X) extreme', tag='By_PX_extreme')
STD_ANON_8.By_TX_extreme = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='By T(X) extreme', tag='By_TX_extreme')
STD_ANON_8.DSCDTA = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='DSC/DTA', tag='DSCDTA')
STD_ANON_8.Other = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)
_module_typeBindings.STD_ANON_8 = STD_ANON_8

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 691, 17)
    _Documentation = None
STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9.Triple_point_temperature_K = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Triple point temperature, K', tag='Triple_point_temperature_K')
STD_ANON_9.Triple_point_pressure_kPa = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Triple point pressure, kPa', tag='Triple_point_pressure_kPa')
STD_ANON_9.Normal_melting_temperature_K = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Normal melting temperature, K', tag='Normal_melting_temperature_K')
STD_ANON_9.Molar_enthalpy_of_transition_or_fusion_kJmol = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Molar enthalpy of transition or fusion, kJ/mol', tag='Molar_enthalpy_of_transition_or_fusion_kJmol')
STD_ANON_9.Molar_entropy_of_transition_or_fusion_JKmol = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Molar entropy of transition or fusion, J/K/mol', tag='Molar_entropy_of_transition_or_fusion_JKmol')
STD_ANON_9.Cryoscopic_constant_mole_fraction_scale_1K = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Cryoscopic constant (mole fraction scale), 1/K', tag='Cryoscopic_constant_mole_fraction_scale_1K')
STD_ANON_9.Cryoscopic_constant_molality_scale_kgmolK = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Cryoscopic constant (molality scale), kg/mol/K', tag='Cryoscopic_constant_molality_scale_kgmolK')
STD_ANON_9.Molar_enthalpy_of_vaporization_or_sublimation_kJmol = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Molar enthalpy of vaporization or sublimation, kJ/mol', tag='Molar_enthalpy_of_vaporization_or_sublimation_kJmol')
STD_ANON_9.Molar_entropy_of_vaporization_or_sublimation_JKmol = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Molar entropy of vaporization or sublimation, J/K/mol', tag='Molar_entropy_of_vaporization_or_sublimation_JKmol')
STD_ANON_9.Molar_Gibbs_energy_of_vaporization_or_sublimation_kJmol = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Molar Gibbs energy of vaporization or sublimation, kJ/mol', tag='Molar_Gibbs_energy_of_vaporization_or_sublimation_kJmol')
STD_ANON_9.Quadruple_quintuple_point_temperature_K = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Quadruple (quintuple) point temperature, K', tag='Quadruple_quintuple_point_temperature_K')
STD_ANON_9.Quadruple_quintuple_point_pressure_kPa = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Quadruple (quintuple) point pressure, kPa', tag='Quadruple_quintuple_point_pressure_kPa')
STD_ANON_9.Solid_liquid_equilibrium_temperature_K = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Solid-liquid equilibrium temperature, K', tag='Solid_liquid_equilibrium_temperature_K')
STD_ANON_9.Liquid_liquid_equilibrium_temperature_K = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Liquid-liquid equilibrium temperature, K', tag='Liquid_liquid_equilibrium_temperature_K')
STD_ANON_9.Phase_boundary_pressure_kPa = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Phase boundary pressure, kPa', tag='Phase_boundary_pressure_kPa')
STD_ANON_9.Eutectic_temperature_K = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Eutectic temperature, K', tag='Eutectic_temperature_K')
STD_ANON_9.Peritectic_temperature_K = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Peritectic temperature, K', tag='Peritectic_temperature_K')
STD_ANON_9.Monotectic_temperature_K = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Monotectic temperature, K', tag='Monotectic_temperature_K')
STD_ANON_9.Molar_lattice_energy_at_0_K_kJmol = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Molar lattice energy at 0 K, kJ/mol', tag='Molar_lattice_energy_at_0_K_kJmol')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)
_module_typeBindings.STD_ANON_9 = STD_ANON_9

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 717, 18)
    _Documentation = None
STD_ANON_10._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_10, enum_prefix=None)
STD_ANON_10.Visual_observation = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Visual observation', tag='Visual_observation')
STD_ANON_10.HeatingCooling_curves = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Heating/Cooling curves', tag='HeatingCooling_curves')
STD_ANON_10.DSCDTA = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='DSC/DTA', tag='DSCDTA')
STD_ANON_10.Adiabatic_calorimetry = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Adiabatic calorimetry', tag='Adiabatic_calorimetry')
STD_ANON_10.Large_sample_thermal_analysis = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Large-sample thermal analysis', tag='Large_sample_thermal_analysis')
STD_ANON_10.Drop_calorimetry = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Drop calorimetry', tag='Drop_calorimetry')
STD_ANON_10.Drop_ice_or_diphenyl_ether_calorimetry = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Drop ice or diphenyl ether calorimetry', tag='Drop_ice_or_diphenyl_ether_calorimetry')
STD_ANON_10.Obtained_from_cryoscopic_constant = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Obtained from cryoscopic constant', tag='Obtained_from_cryoscopic_constant')
STD_ANON_10.Derived_from_phase_diagram_analysis = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Derived from phase diagram analysis', tag='Derived_from_phase_diagram_analysis')
STD_ANON_10.Static_calorimetry = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Static calorimetry', tag='Static_calorimetry')
STD_ANON_10.Flow_calorimetry = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Flow calorimetry', tag='Flow_calorimetry')
STD_ANON_10.Derived_by_Second_law = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Derived by Second law', tag='Derived_by_Second_law')
STD_ANON_10.Derived_by_Second_law_from_precise_ebulliometry = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Derived by Second law from precise ebulliometry', tag='Derived_by_Second_law_from_precise_ebulliometry')
STD_ANON_10.Depression_of_a_freezing_temperature_of_a_dilute_solution = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Depression of a freezing temperature of a dilute solution', tag='Depression_of_a_freezing_temperature_of_a_dilute_solution')
STD_ANON_10.AC_calorimetry = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='AC calorimetry', tag='AC_calorimetry')
STD_ANON_10.Resistive_pulse_heating = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Resistive pulse heating', tag='Resistive_pulse_heating')
STD_ANON_10.Laser_pulse_heating = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Laser pulse heating', tag='Laser_pulse_heating')
STD_ANON_10.Levitation_methods = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Levitation methods', tag='Levitation_methods')
STD_ANON_10.Correlation_gas_chromatography = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Correlation gas chromatography', tag='Correlation_gas_chromatography')
STD_ANON_10.Other = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_enumeration)
_module_typeBindings.STD_ANON_10 = STD_ANON_10

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 753, 17)
    _Documentation = None
STD_ANON_11._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_11, enum_prefix=None)
STD_ANON_11.Azeotropic_composition_mole_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Azeotropic composition: mole fraction', tag='Azeotropic_composition_mole_fraction')
STD_ANON_11.Azeotropic_composition_mass_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Azeotropic composition: mass fraction', tag='Azeotropic_composition_mass_fraction')
STD_ANON_11.Eutectic_composition_mole_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Eutectic composition: mole fraction', tag='Eutectic_composition_mole_fraction')
STD_ANON_11.Eutectic_composition_mass_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Eutectic composition: mass fraction', tag='Eutectic_composition_mass_fraction')
STD_ANON_11.Eutectic_composition_volume_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Eutectic composition: volume fraction', tag='Eutectic_composition_volume_fraction')
STD_ANON_11.Monotectic_composition_mole_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Monotectic composition: mole fraction', tag='Monotectic_composition_mole_fraction')
STD_ANON_11.Monotectic_composition_mass_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Monotectic composition: mass fraction', tag='Monotectic_composition_mass_fraction')
STD_ANON_11.Lower_consolute_composition_volume_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Lower consolute composition: volume fraction', tag='Lower_consolute_composition_volume_fraction')
STD_ANON_11.Lower_consolute_composition_mole_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Lower consolute composition: mole fraction', tag='Lower_consolute_composition_mole_fraction')
STD_ANON_11.Lower_consolute_composition_mass_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Lower consolute composition: mass fraction', tag='Lower_consolute_composition_mass_fraction')
STD_ANON_11.Mass_concentration_kgm3 = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Mass concentration, kg/m3', tag='Mass_concentration_kgm3')
STD_ANON_11.Ratio_of_amount_of_solute_to_mass_of_solution_molkg = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Ratio of amount of solute to mass of solution, mol/kg', tag='Ratio_of_amount_of_solute_to_mass_of_solution_molkg')
STD_ANON_11.Mass_ratio_of_solute_to_solvent = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Mass ratio of solute to solvent', tag='Mass_ratio_of_solute_to_solvent')
STD_ANON_11.Molality_molkg = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Molality, mol/kg', tag='Molality_molkg')
STD_ANON_11.Amount_concentration_molarity_moldm3 = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Amount concentration (molarity), mol/dm3', tag='Amount_concentration_molarity_moldm3')
STD_ANON_11.Mole_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Mole fraction', tag='Mole_fraction')
STD_ANON_11.Mole_fraction_in_LLG_critical_state = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Mole fraction in LLG critical state', tag='Mole_fraction_in_LLG_critical_state')
STD_ANON_11.Amount_ratio_of_solute_to_solvent = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Amount ratio of solute to solvent', tag='Amount_ratio_of_solute_to_solvent')
STD_ANON_11.Upper_consolute_composition_volume_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Upper consolute composition: volume fraction', tag='Upper_consolute_composition_volume_fraction')
STD_ANON_11.Upper_consolute_composition_mole_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Upper consolute composition: mole fraction', tag='Upper_consolute_composition_mole_fraction')
STD_ANON_11.Upper_consolute_composition_mass_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Upper consolute composition: mass fraction', tag='Upper_consolute_composition_mass_fraction')
STD_ANON_11.Volume_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Volume fraction', tag='Volume_fraction')
STD_ANON_11.Volume_ratio_of_solute_to_solvent = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Volume ratio of solute to solvent', tag='Volume_ratio_of_solute_to_solvent')
STD_ANON_11.Mass_fraction = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Mass fraction', tag='Mass_fraction')
STD_ANON_11.Mass_fraction_in_LLG_critical_state = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Mass fraction in LLG critical state', tag='Mass_fraction_in_LLG_critical_state')
STD_ANON_11.Henrys_Law_constant_mole_fraction_scale_kPa = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value="Henry's Law constant (mole fraction scale), kPa", tag='Henrys_Law_constant_mole_fraction_scale_kPa')
STD_ANON_11.Henrys_Law_constant_molality_scale_kPakgmol = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value="Henry's Law constant (molality scale), kPa*kg/mol", tag='Henrys_Law_constant_molality_scale_kPakgmol')
STD_ANON_11.Henrys_Law_constant_amount_concentration_scale_kPadm3mol = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value="Henry's Law constant (amount concentration scale), kPa*dm3/mol", tag='Henrys_Law_constant_amount_concentration_scale_kPadm3mol')
STD_ANON_11.Bunsen_coefficient = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Bunsen coefficient', tag='Bunsen_coefficient')
STD_ANON_11.Ostwald_coefficient = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Ostwald coefficient', tag='Ostwald_coefficient')
STD_ANON_11.Partial_pressure_kPa = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='Partial pressure, kPa', tag='Partial_pressure_kPa')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_enumeration)
_module_typeBindings.STD_ANON_11 = STD_ANON_11

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 799, 18)
    _Documentation = None
STD_ANON_12._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_12, enum_prefix=None)
STD_ANON_12.By_XY = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='By X=Y', tag='By_XY')
STD_ANON_12.By_T_or_P_extreme = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='By T or P extreme', tag='By_T_or_P_extreme')
STD_ANON_12.Chromatography = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Chromatography', tag='Chromatography')
STD_ANON_12.Spectrophotometry = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Spectrophotometry', tag='Spectrophotometry')
STD_ANON_12.Density_calibration_data = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Density calibration data', tag='Density_calibration_data')
STD_ANON_12.Index_of_refraction_calibration_data = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Index of refraction calibration data', tag='Index_of_refraction_calibration_data')
STD_ANON_12.Speed_of_sound_calibration_data = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Speed of sound calibration data', tag='Speed_of_sound_calibration_data')
STD_ANON_12.Calculated_by_Gibbs_Duhem_equation = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Calculated by Gibbs-Duhem equation', tag='Calculated_by_Gibbs_Duhem_equation')
STD_ANON_12.Titration_method = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Titration method', tag='Titration_method')
STD_ANON_12.Phase_equilibration = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Phase equilibration', tag='Phase_equilibration')
STD_ANON_12.Derived_from_phase_diagram_analysis = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Derived from phase diagram analysis', tag='Derived_from_phase_diagram_analysis')
STD_ANON_12.Photoacoustic_method = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Photoacoustic method', tag='Photoacoustic_method')
STD_ANON_12.Other = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_enumeration)
_module_typeBindings.STD_ANON_12 = STD_ANON_12

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 828, 17)
    _Documentation = None
STD_ANON_13._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_13, enum_prefix=None)
STD_ANON_13.Relative_activity = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='(Relative) activity', tag='Relative_activity')
STD_ANON_13.Activity_coefficient = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='Activity coefficient', tag='Activity_coefficient')
STD_ANON_13.Mean_ionic_activity_coefficient = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='Mean ionic activity coefficient', tag='Mean_ionic_activity_coefficient')
STD_ANON_13.Mean_ionic_activity_moldm3n = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='Mean ionic activity, (mol/dm3)^n', tag='Mean_ionic_activity_moldm3n')
STD_ANON_13.Fugacity_kPa = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='Fugacity, kPa', tag='Fugacity_kPa')
STD_ANON_13.Fugacity_coefficient = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='Fugacity coefficient', tag='Fugacity_coefficient')
STD_ANON_13.Osmotic_pressure_kPa = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='Osmotic pressure, kPa', tag='Osmotic_pressure_kPa')
STD_ANON_13.Osmotic_coefficient = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='Osmotic coefficient', tag='Osmotic_coefficient')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_enumeration)
_module_typeBindings.STD_ANON_13 = STD_ANON_13

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 843, 18)
    _Documentation = None
STD_ANON_14._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_14, enum_prefix=None)
STD_ANON_14.Chromatography = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='Chromatography', tag='Chromatography')
STD_ANON_14.Differential_ebulliometry = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='Differential ebulliometry', tag='Differential_ebulliometry')
STD_ANON_14.Spectroscopy = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='Spectroscopy', tag='Spectroscopy')
STD_ANON_14.Mass_spectrometry = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='Mass-spectrometry', tag='Mass_spectrometry')
STD_ANON_14.NMR_spectrometry = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='NMR spectrometry', tag='NMR_spectrometry')
STD_ANON_14.Static_method = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='Static method', tag='Static_method')
STD_ANON_14.Isopiestic_method = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='Isopiestic method', tag='Isopiestic_method')
STD_ANON_14.Potential_difference_of_an_electrochemical_cell = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='Potential difference of an electrochemical cell', tag='Potential_difference_of_an_electrochemical_cell')
STD_ANON_14.Other = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_enumeration)
_module_typeBindings.STD_ANON_14 = STD_ANON_14

# Atomic simple type: [anonymous]
class STD_ANON_15 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 872, 17)
    _Documentation = None
STD_ANON_15._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_15, enum_prefix=None)
STD_ANON_15.Mass_density_kgm3 = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Mass density, kg/m3', tag='Mass_density_kgm3')
STD_ANON_15.Specific_volume_m3kg = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Specific volume, m3/kg', tag='Specific_volume_m3kg')
STD_ANON_15.Amount_density_molm3 = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Amount density, mol/m3', tag='Amount_density_molm3')
STD_ANON_15.Molar_volume_m3mol = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Molar volume, m3/mol', tag='Molar_volume_m3mol')
STD_ANON_15.n2nd_virial_coefficient_m3mol = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='2nd virial coefficient, m3/mol', tag='n2nd_virial_coefficient_m3mol')
STD_ANON_15.n2nd_acoustic_virial_coefficient_m3mol = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='2nd acoustic virial coefficient, m3/mol', tag='n2nd_acoustic_virial_coefficient_m3mol')
STD_ANON_15.n3rd_virial_coefficient_m6mol2 = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='3rd virial coefficient, m6/mol2', tag='n3rd_virial_coefficient_m6mol2')
STD_ANON_15.n3rd_acoustic_virial_coefficient_m6mol2 = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='3rd acoustic virial coefficient, m6/mol2', tag='n3rd_acoustic_virial_coefficient_m6mol2')
STD_ANON_15.n3rd_interaction_virial_coefficient_C112_m6mol2 = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='3rd interaction virial coefficient C112, m6/mol2', tag='n3rd_interaction_virial_coefficient_C112_m6mol2')
STD_ANON_15.n3rd_interaction_virial_coefficient_C122_m6mol2 = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='3rd interaction virial coefficient C122, m6/mol2', tag='n3rd_interaction_virial_coefficient_C122_m6mol2')
STD_ANON_15.Excess_virial_coefficient_m3mol = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Excess virial coefficient, m3/mol', tag='Excess_virial_coefficient_m3mol')
STD_ANON_15.Interaction_virial_coefficient_m3mol = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Interaction virial coefficient, m3/mol', tag='Interaction_virial_coefficient_m3mol')
STD_ANON_15.Excess_molar_volume_m3mol = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Excess molar volume, m3/mol', tag='Excess_molar_volume_m3mol')
STD_ANON_15.Partial_molar_volume_m3mol = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Partial molar volume, m3/mol', tag='Partial_molar_volume_m3mol')
STD_ANON_15.Relative_partial_molar_volume_m3mol = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Relative partial molar volume, m3/mol', tag='Relative_partial_molar_volume_m3mol')
STD_ANON_15.Apparent_molar_volume_m3mol = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Apparent molar volume, m3/mol', tag='Apparent_molar_volume_m3mol')
STD_ANON_15.Adiabatic_compressibility_1kPa = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Adiabatic compressibility, 1/kPa', tag='Adiabatic_compressibility_1kPa')
STD_ANON_15.Excess_adiabatic_compressibility_1kPa = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Excess adiabatic compressibility, 1/kPa', tag='Excess_adiabatic_compressibility_1kPa')
STD_ANON_15.Isothermal_compressibility_1kPa = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Isothermal compressibility, 1/kPa', tag='Isothermal_compressibility_1kPa')
STD_ANON_15.Excess_isothermal_compressibility_1kPa = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Excess isothermal compressibility, 1/kPa', tag='Excess_isothermal_compressibility_1kPa')
STD_ANON_15.Isobaric_coefficient_of_expansion_1K = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Isobaric coefficient of expansion, 1/K', tag='Isobaric_coefficient_of_expansion_1K')
STD_ANON_15.Excess_coefficient_of_expansion_1K = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Excess coefficient of expansion, 1/K', tag='Excess_coefficient_of_expansion_1K')
STD_ANON_15.Compressibility_factor = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Compressibility factor', tag='Compressibility_factor')
STD_ANON_15.Thermal_pressure_coefficient_kPaK = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Thermal pressure coefficient, kPa/K', tag='Thermal_pressure_coefficient_kPaK')
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_enumeration)
_module_typeBindings.STD_ANON_15 = STD_ANON_15

# Atomic simple type: [anonymous]
class STD_ANON_16 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 907, 18)
    _Documentation = None
STD_ANON_16._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_16, enum_prefix=None)
STD_ANON_16.Pycnometric_method = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Pycnometric method', tag='Pycnometric_method')
STD_ANON_16.X_ray_diffraction = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='X-ray diffraction', tag='X_ray_diffraction')
STD_ANON_16.Buoyancy___hydrostatic_balance = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Buoyancy - hydrostatic balance', tag='Buoyancy___hydrostatic_balance')
STD_ANON_16.Buoyancy___magnetic_float_or_magnetic_suspension = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Buoyancy - magnetic float or magnetic suspension', tag='Buoyancy___magnetic_float_or_magnetic_suspension')
STD_ANON_16.Buoyancy___hydrostatic_balance_with_magnetic_float = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Buoyancy - hydrostatic balance with magnetic float', tag='Buoyancy___hydrostatic_balance_with_magnetic_float')
STD_ANON_16.Buoyancy___hydrostatic_balance_with_magnetic_suspension___one_sinker = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Buoyancy - hydrostatic balance with magnetic suspension - one sinker', tag='Buoyancy___hydrostatic_balance_with_magnetic_suspension___one_sinker')
STD_ANON_16.Buoyancy___hydrostatic_balance_with_magnetic_suspension___two_sinkers = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Buoyancy - hydrostatic balance with magnetic suspension - two sinkers', tag='Buoyancy___hydrostatic_balance_with_magnetic_suspension___two_sinkers')
STD_ANON_16.Vibrating_tube_method = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Vibrating tube method', tag='Vibrating_tube_method')
STD_ANON_16.Isochoric_PVT_measurement = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Isochoric PVT measurement', tag='Isochoric_PVT_measurement')
STD_ANON_16.Other_PVT_measurement = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Other PVT measurement', tag='Other_PVT_measurement')
STD_ANON_16.Burnett_expansion_method = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Burnett expansion method', tag='Burnett_expansion_method')
STD_ANON_16.Constant_volume_piezometry = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Constant-volume piezometry', tag='Constant_volume_piezometry')
STD_ANON_16.Hydrostatic_balance = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Hydrostatic balance', tag='Hydrostatic_balance')
STD_ANON_16.Bellows_volumetry = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Bellows volumetry', tag='Bellows_volumetry')
STD_ANON_16.Derived_from_speed_of_sound = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Derived from speed of sound', tag='Derived_from_speed_of_sound')
STD_ANON_16.Resistive_pulse_heating = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Resistive pulse heating', tag='Resistive_pulse_heating')
STD_ANON_16.Laser_pulse_heating = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Laser pulse heating', tag='Laser_pulse_heating')
STD_ANON_16.Levitation_methods = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Levitation methods', tag='Levitation_methods')
STD_ANON_16.Direct_dilatometry = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Direct dilatometry', tag='Direct_dilatometry')
STD_ANON_16.Derived_analytically = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Derived analytically', tag='Derived_analytically')
STD_ANON_16.Derived_graphically = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Derived graphically', tag='Derived_graphically')
STD_ANON_16.Calculated_with_densities_of_this_investigation = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Calculated with densities of this investigation', tag='Calculated_with_densities_of_this_investigation')
STD_ANON_16.Calculated_with_a_solvent_density_reported_elsewhere = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Calculated with a solvent density reported elsewhere', tag='Calculated_with_a_solvent_density_reported_elsewhere')
STD_ANON_16.Other = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_enumeration)
_module_typeBindings.STD_ANON_16 = STD_ANON_16

# Atomic simple type: [anonymous]
class STD_ANON_17 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 947, 17)
    _Documentation = None
STD_ANON_17._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_17, enum_prefix=None)
STD_ANON_17.Molar_heat_capacity_at_constant_pressure_JKmol = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Molar heat capacity at constant pressure, J/K/mol', tag='Molar_heat_capacity_at_constant_pressure_JKmol')
STD_ANON_17.Specific_heat_capacity_at_constant_pressure_JKkg = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Specific heat capacity at constant pressure, J/K/kg', tag='Specific_heat_capacity_at_constant_pressure_JKkg')
STD_ANON_17.Heat_capacity_at_constant_pressure_per_volume_JKm3 = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Heat capacity at constant pressure per volume, J/K/m3', tag='Heat_capacity_at_constant_pressure_per_volume_JKm3')
STD_ANON_17.Molar_heat_capacity_at_saturation_pressure_JKmol = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Molar heat capacity at saturation pressure, J/K/mol', tag='Molar_heat_capacity_at_saturation_pressure_JKmol')
STD_ANON_17.Specific_heat_capacity_at_saturation_pressure_JKkg = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Specific heat capacity at saturation pressure, J/K/kg', tag='Specific_heat_capacity_at_saturation_pressure_JKkg')
STD_ANON_17.Heat_capacity_at_saturation_pressure_per_volume_JKm3 = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Heat capacity at saturation pressure per volume, J/K/m3', tag='Heat_capacity_at_saturation_pressure_per_volume_JKm3')
STD_ANON_17.Molar_heat_capacity_at_constant_volume_JKmol = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Molar heat capacity at constant volume, J/K/mol', tag='Molar_heat_capacity_at_constant_volume_JKmol')
STD_ANON_17.Specific_heat_capacity_at_constant_volume_JKkg = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Specific heat capacity at constant volume, J/K/kg', tag='Specific_heat_capacity_at_constant_volume_JKkg')
STD_ANON_17.Heat_capacity_at_constant_volume_per_volume_JKm3 = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Heat capacity at constant volume per volume, J/K/m3', tag='Heat_capacity_at_constant_volume_per_volume_JKm3')
STD_ANON_17.Heat_capacity_ratio_cpcv = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Heat capacity ratio cp/cv', tag='Heat_capacity_ratio_cpcv')
STD_ANON_17.Molar_entropy_JKmol = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Molar entropy, J/K/mol', tag='Molar_entropy_JKmol')
STD_ANON_17.Molar_enthalpy_kJmol = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Molar enthalpy, kJ/mol', tag='Molar_enthalpy_kJmol')
STD_ANON_17.Molar_enthalpy_function_HmT_Hm0T_JKmol = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Molar enthalpy function {Hm(T)-Hm(0)}/T, J/K/mol', tag='Molar_enthalpy_function_HmT_Hm0T_JKmol')
STD_ANON_17.Molar_Gibbs_energy_function_GmT_Hm0T_JKmol = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Molar Gibbs energy function {Gm(T)-Hm(0)}/T, J/K/mol', tag='Molar_Gibbs_energy_function_GmT_Hm0T_JKmol')
STD_ANON_17.Molar_Gibbs_energy_function_GmT_Hm298_15T_JKmol = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Molar Gibbs energy function {Gm(T)-Hm(298.15)}/T, J/K/mol', tag='Molar_Gibbs_energy_function_GmT_Hm298_15T_JKmol')
STD_ANON_17.Molar_Gibbs_energy_kJmol = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Molar Gibbs energy, kJ/mol', tag='Molar_Gibbs_energy_kJmol')
STD_ANON_17.Molar_Helmholtz_energy_kJmol = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Molar Helmholtz energy, kJ/mol', tag='Molar_Helmholtz_energy_kJmol')
STD_ANON_17.Molar_internal_energy_kJmol = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Molar internal energy, kJ/mol', tag='Molar_internal_energy_kJmol')
STD_ANON_17.Joule_Thomson_coefficient_KkPa = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Joule-Thomson coefficient, K/kPa', tag='Joule_Thomson_coefficient_KkPa')
STD_ANON_17.Pressure_coefficient_of_molar_enthalpy_JkPamol = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='Pressure coefficient of molar enthalpy, J/kPa/mol', tag='Pressure_coefficient_of_molar_enthalpy_JkPamol')
STD_ANON_17._InitializeFacetMap(STD_ANON_17._CF_enumeration)
_module_typeBindings.STD_ANON_17 = STD_ANON_17

# Atomic simple type: [anonymous]
class STD_ANON_18 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 974, 18)
    _Documentation = None
STD_ANON_18._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_18, enum_prefix=None)
STD_ANON_18.Vacuum_adiabatic_calorimetry = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Vacuum adiabatic calorimetry', tag='Vacuum_adiabatic_calorimetry')
STD_ANON_18.Small_less_than_1_g_adiabatic_calorimetry = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Small (less than 1 g) adiabatic calorimetry', tag='Small_less_than_1_g_adiabatic_calorimetry')
STD_ANON_18.Flow_calorimetry = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Flow calorimetry', tag='Flow_calorimetry')
STD_ANON_18.Large_sample_1_g_DSC = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Large sample (1 g) DSC', tag='Large_sample_1_g_DSC')
STD_ANON_18.Small_sample_50_mg_DSC = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Small sample (50 mg) DSC', tag='Small_sample_50_mg_DSC')
STD_ANON_18.Drop_calorimetry = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Drop calorimetry', tag='Drop_calorimetry')
STD_ANON_18.Drop_ice_or_diphenyl_ether_calorimetry = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Drop ice or diphenyl ether calorimetry', tag='Drop_ice_or_diphenyl_ether_calorimetry')
STD_ANON_18.Open_cup_calorimetry = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Open cup calorimetry', tag='Open_cup_calorimetry')
STD_ANON_18.Closed_cup_calorimetry = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Closed cup calorimetry', tag='Closed_cup_calorimetry')
STD_ANON_18.Differential_flow_calorimetry = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Differential flow calorimetry', tag='Differential_flow_calorimetry')
STD_ANON_18.Extra_sensitive_DSC = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Extra sensitive DSC', tag='Extra_sensitive_DSC')
STD_ANON_18.Twin_closed_calorimetry = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Twin closed calorimetry', tag='Twin_closed_calorimetry')
STD_ANON_18.Thin_film_microcalorimeter = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Thin-film microcalorimeter', tag='Thin_film_microcalorimeter')
STD_ANON_18.AC_calorimetry = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='AC calorimetry', tag='AC_calorimetry')
STD_ANON_18.Resistive_pulse_heating = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Resistive pulse heating', tag='Resistive_pulse_heating')
STD_ANON_18.Laser_pulse_heating = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Laser pulse heating', tag='Laser_pulse_heating')
STD_ANON_18.Levitation_methods = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Levitation methods', tag='Levitation_methods')
STD_ANON_18.Derived_from_speed_of_sound = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Derived from speed of sound', tag='Derived_from_speed_of_sound')
STD_ANON_18.Derived_from_equation_of_state = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Derived from equation of state', tag='Derived_from_equation_of_state')
STD_ANON_18.Expansion_technique = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Expansion technique', tag='Expansion_technique')
STD_ANON_18.Other = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_18._InitializeFacetMap(STD_ANON_18._CF_enumeration)
_module_typeBindings.STD_ANON_18 = STD_ANON_18

# Atomic simple type: [anonymous]
class STD_ANON_19 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1011, 17)
    _Documentation = None
STD_ANON_19._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_19, enum_prefix=None)
STD_ANON_19.Apparent_molar_enthalpy_kJmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Apparent molar enthalpy, kJ/mol', tag='Apparent_molar_enthalpy_kJmol')
STD_ANON_19.Apparent_molar_entropy_JKmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Apparent molar entropy, J/K/mol', tag='Apparent_molar_entropy_JKmol')
STD_ANON_19.Apparent_molar_Gibbs_energy_kJmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Apparent molar Gibbs energy, kJ/mol', tag='Apparent_molar_Gibbs_energy_kJmol')
STD_ANON_19.Apparent_molar_heat_capacity_JKmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Apparent molar heat capacity, J/K/mol', tag='Apparent_molar_heat_capacity_JKmol')
STD_ANON_19.Excess_molar_enthalpy_molar_enthalpy_of_mixing_kJmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Excess molar enthalpy (molar enthalpy of mixing), kJ/mol', tag='Excess_molar_enthalpy_molar_enthalpy_of_mixing_kJmol')
STD_ANON_19.Molar_enthalpy_of_mixing_with_solvent_kJmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Molar enthalpy of mixing with solvent, kJ/mol', tag='Molar_enthalpy_of_mixing_with_solvent_kJmol')
STD_ANON_19.Molar_enthalpy_of_solution_kJmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Molar enthalpy of solution, kJ/mol', tag='Molar_enthalpy_of_solution_kJmol')
STD_ANON_19.Molar_enthalpy_of_dilution_kJmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Molar enthalpy of dilution, kJ/mol', tag='Molar_enthalpy_of_dilution_kJmol')
STD_ANON_19.Excess_molar_entropy_JKmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Excess molar entropy, J/K/mol', tag='Excess_molar_entropy_JKmol')
STD_ANON_19.Excess_molar_Gibbs_energy_kJmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Excess molar Gibbs energy, kJ/mol', tag='Excess_molar_Gibbs_energy_kJmol')
STD_ANON_19.Excess_molar_heat_capacity_JKmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Excess molar heat capacity, J/K/mol', tag='Excess_molar_heat_capacity_JKmol')
STD_ANON_19.Partial_molar_enthalpy_kJmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Partial molar enthalpy, kJ/mol', tag='Partial_molar_enthalpy_kJmol')
STD_ANON_19.Partial_molar_entropy_JKmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Partial molar entropy, J/K/mol', tag='Partial_molar_entropy_JKmol')
STD_ANON_19.Partial_molar_Gibbs_energy_kJmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Partial molar Gibbs energy, kJ/mol', tag='Partial_molar_Gibbs_energy_kJmol')
STD_ANON_19.Partial_molar_heat_capacity_JKmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Partial molar heat capacity, J/K/mol', tag='Partial_molar_heat_capacity_JKmol')
STD_ANON_19.Relative_partial_molar_enthalpy_kJmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Relative partial molar enthalpy, kJ/mol', tag='Relative_partial_molar_enthalpy_kJmol')
STD_ANON_19.Relative_partial_molar_entropy_JKmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Relative partial molar entropy, J/K/mol', tag='Relative_partial_molar_entropy_JKmol')
STD_ANON_19.Relative_partial_molar_Gibbs_energy_kJmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Relative partial molar Gibbs energy, kJ/mol', tag='Relative_partial_molar_Gibbs_energy_kJmol')
STD_ANON_19.Relative_partial_molar_heat_capacity_JKmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Relative partial molar heat capacity, J/K/mol', tag='Relative_partial_molar_heat_capacity_JKmol')
STD_ANON_19.Standard_state_molar_enthalpy_kJmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Standard state molar enthalpy, kJ/mol', tag='Standard_state_molar_enthalpy_kJmol')
STD_ANON_19.Standard_state_molar_entropy_JKmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Standard state molar entropy, J/K/mol', tag='Standard_state_molar_entropy_JKmol')
STD_ANON_19.Standard_state_molar_Gibbs_energy_kJmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Standard state molar Gibbs energy, kJ/mol', tag='Standard_state_molar_Gibbs_energy_kJmol')
STD_ANON_19.Standard_state_molar_heat_capacity_JKmol = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='Standard state molar heat capacity, J/K/mol', tag='Standard_state_molar_heat_capacity_JKmol')
STD_ANON_19._InitializeFacetMap(STD_ANON_19._CF_enumeration)
_module_typeBindings.STD_ANON_19 = STD_ANON_19

# Atomic simple type: [anonymous]
class STD_ANON_20 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1057, 18)
    _Documentation = None
STD_ANON_20._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_20, enum_prefix=None)
STD_ANON_20.Vacuum_adiabatic_calorimetry = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Vacuum adiabatic calorimetry', tag='Vacuum_adiabatic_calorimetry')
STD_ANON_20.Small_less_than_1_g_adiabatic_calorimetry = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Small (less than 1 g) adiabatic calorimetry', tag='Small_less_than_1_g_adiabatic_calorimetry')
STD_ANON_20.Flow_calorimetry = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Flow calorimetry', tag='Flow_calorimetry')
STD_ANON_20.Differential_flow_calorimetry = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Differential flow calorimetry', tag='Differential_flow_calorimetry')
STD_ANON_20.Calvet_calorimetry = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Calvet calorimetry', tag='Calvet_calorimetry')
STD_ANON_20.Large_sample_1_g_DSC = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Large sample (1 g) DSC', tag='Large_sample_1_g_DSC')
STD_ANON_20.Small_sample_50_mg_DSC = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Small sample (50 mg) DSC', tag='Small_sample_50_mg_DSC')
STD_ANON_20.Extra_sensitive_DSC = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Extra sensitive DSC', tag='Extra_sensitive_DSC')
STD_ANON_20.Twin_closed_calorimetry = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Twin closed calorimetry', tag='Twin_closed_calorimetry')
STD_ANON_20.Isoperibol_calorimetry = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Isoperibol calorimetry', tag='Isoperibol_calorimetry')
STD_ANON_20.Isothermal_displacement = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Isothermal displacement', tag='Isothermal_displacement')
STD_ANON_20.Power_compensation_calorimetry = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Power-compensation calorimetry', tag='Power_compensation_calorimetry')
STD_ANON_20.Titration_calorimetry = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Titration calorimetry', tag='Titration_calorimetry')
STD_ANON_20.Potential_difference_of_an_electrochemical_cell = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Potential difference of an electrochemical cell', tag='Potential_difference_of_an_electrochemical_cell')
STD_ANON_20.Other = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_20._InitializeFacetMap(STD_ANON_20._CF_enumeration)
_module_typeBindings.STD_ANON_20 = STD_ANON_20

# Atomic simple type: [anonymous]
class STD_ANON_21 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1088, 17)
    _Documentation = None
STD_ANON_21._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_21, enum_prefix=None)
STD_ANON_21.Viscosity_Pas = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='Viscosity, Pa*s', tag='Viscosity_Pas')
STD_ANON_21.Excess_viscosity_Pas = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='Excess viscosity, Pa*s', tag='Excess_viscosity_Pas')
STD_ANON_21.Kinematic_viscosity_m2s = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='Kinematic viscosity, m2/s', tag='Kinematic_viscosity_m2s')
STD_ANON_21.Fluidity_1Pas = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='Fluidity, 1/Pa/s', tag='Fluidity_1Pas')
STD_ANON_21.Thermal_conductivity_WmK = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='Thermal conductivity, W/m/K', tag='Thermal_conductivity_WmK')
STD_ANON_21.Thermal_diffusivity_m2s = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='Thermal diffusivity, m2/s', tag='Thermal_diffusivity_m2s')
STD_ANON_21.Binary_diffusion_coefficient_m2s = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='Binary diffusion coefficient, m2/s', tag='Binary_diffusion_coefficient_m2s')
STD_ANON_21.Self_diffusion_coefficient_m2s = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='Self diffusion coefficient, m2/s', tag='Self_diffusion_coefficient_m2s')
STD_ANON_21.Tracer_diffusion_coefficient_m2s = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='Tracer diffusion coefficient, m2/s', tag='Tracer_diffusion_coefficient_m2s')
STD_ANON_21.Electrical_conductivity_Sm = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='Electrical conductivity, S/m', tag='Electrical_conductivity_Sm')
STD_ANON_21.Molar_conductivity_Sm2mol = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='Molar conductivity, S*m2/mol', tag='Molar_conductivity_Sm2mol')
STD_ANON_21.Transport_number = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='Transport number', tag='Transport_number')
STD_ANON_21._InitializeFacetMap(STD_ANON_21._CF_enumeration)
_module_typeBindings.STD_ANON_21 = STD_ANON_21

# Atomic simple type: [anonymous]
class STD_ANON_22 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1107, 18)
    _Documentation = None
STD_ANON_22._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_22, enum_prefix=None)
STD_ANON_22.Capillary_tube_Ostwald_Ubbelohde_method = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Capillary tube (Ostwald; Ubbelohde) method', tag='Capillary_tube_Ostwald_Ubbelohde_method')
STD_ANON_22.Cone_and_plate_viscometry = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Cone and plate viscometry', tag='Cone_and_plate_viscometry')
STD_ANON_22.Concentric_cylinders_viscometry = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Concentric cylinders viscometry', tag='Concentric_cylinders_viscometry')
STD_ANON_22.Falling_or_rolling_sphere_viscometry = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Falling or rolling sphere viscometry', tag='Falling_or_rolling_sphere_viscometry')
STD_ANON_22.Moving_piston_method = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Moving piston method', tag='Moving_piston_method')
STD_ANON_22.Oscillating_disk_viscometry = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Oscillating disk viscometry', tag='Oscillating_disk_viscometry')
STD_ANON_22.Vibrating_wire_viscometry = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Vibrating wire viscometry', tag='Vibrating_wire_viscometry')
STD_ANON_22.Parallel_plate_method = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Parallel plate method', tag='Parallel_plate_method')
STD_ANON_22.Coaxial_cylinder_method = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Coaxial cylinder method', tag='Coaxial_cylinder_method')
STD_ANON_22.Hot_wire_method = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Hot wire method', tag='Hot_wire_method')
STD_ANON_22.Optical_interferometry = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Optical interferometry', tag='Optical_interferometry')
STD_ANON_22.Dispersion = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Dispersion', tag='Dispersion')
STD_ANON_22.Diaphragm_Cell = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Diaphragm Cell', tag='Diaphragm_Cell')
STD_ANON_22.Open_capillary = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Open capillary', tag='Open_capillary')
STD_ANON_22.Closed_capillary = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Closed capillary', tag='Closed_capillary')
STD_ANON_22.Taylor_dispersion_method = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Taylor dispersion method', tag='Taylor_dispersion_method')
STD_ANON_22.NMR_spin_echo_technique = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='NMR spin-echo technique', tag='NMR_spin_echo_technique')
STD_ANON_22.Hot_disk_method = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Hot disk method', tag='Hot_disk_method')
STD_ANON_22.Resistive_pulse_heating = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Resistive pulse heating', tag='Resistive_pulse_heating')
STD_ANON_22.Laser_pulse_heating = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Laser pulse heating', tag='Laser_pulse_heating')
STD_ANON_22.Levitation_methods = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Levitation methods', tag='Levitation_methods')
STD_ANON_22.Alternating_current_cell_with_electrodes = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Alternating current cell with electrodes', tag='Alternating_current_cell_with_electrodes')
STD_ANON_22.Direct_current_cell_with_electrodes = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Direct current cell with electrodes', tag='Direct_current_cell_with_electrodes')
STD_ANON_22.Voltage_change_across_transformer_no_electrode = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Voltage change across transformer (no electrode)', tag='Voltage_change_across_transformer_no_electrode')
STD_ANON_22.Gouy_interferometer = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Gouy interferometer', tag='Gouy_interferometer')
STD_ANON_22.Lamb_interferometer = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Lamb interferometer', tag='Lamb_interferometer')
STD_ANON_22.Oscillating_sinker = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Oscillating sinker', tag='Oscillating_sinker')
STD_ANON_22.Speed_of_sound_measurements = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Speed of sound measurements', tag='Speed_of_sound_measurements')
STD_ANON_22.Other = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_22._InitializeFacetMap(STD_ANON_22._CF_enumeration)
_module_typeBindings.STD_ANON_22 = STD_ANON_22

# Atomic simple type: [anonymous]
class STD_ANON_23 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1152, 17)
    _Documentation = None
STD_ANON_23._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_23, enum_prefix=None)
STD_ANON_23.Refractive_index_Na_D_line = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='Refractive index (Na D-line)', tag='Refractive_index_Na_D_line')
STD_ANON_23.Excess_refractive_index_Na_D_line = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='Excess refractive index (Na D-line)', tag='Excess_refractive_index_Na_D_line')
STD_ANON_23.Refractive_index_other_wavelength = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='Refractive index (other wavelength)', tag='Refractive_index_other_wavelength')
STD_ANON_23.Excess_refractive_index_other_wavelength = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='Excess refractive index (other wavelength)', tag='Excess_refractive_index_other_wavelength')
STD_ANON_23.Relative_permittivity_at_zero_frequency = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='Relative permittivity at zero frequency', tag='Relative_permittivity_at_zero_frequency')
STD_ANON_23.Excess_relative_permittivity_at_zero_frequency = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='Excess relative permittivity at zero frequency', tag='Excess_relative_permittivity_at_zero_frequency')
STD_ANON_23.Relative_permittivity_at_various_frequencies = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='Relative permittivity at various frequencies', tag='Relative_permittivity_at_various_frequencies')
STD_ANON_23.Complex_relative_permittivity_Real_part_at_various_frequencies = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='Complex relative permittivity (Real part) at various frequencies', tag='Complex_relative_permittivity_Real_part_at_various_frequencies')
STD_ANON_23.Complex_relative_permittivity_Imaginary_part_at_various_frequencies = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='Complex relative permittivity (Imaginary part) at various frequencies', tag='Complex_relative_permittivity_Imaginary_part_at_various_frequencies')
STD_ANON_23.Surface_tension_liquid_gas_Nm = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='Surface tension liquid-gas, N/m', tag='Surface_tension_liquid_gas_Nm')
STD_ANON_23.Excess_surface_tension_liquid_gas_Nm = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='Excess surface tension liquid-gas, N/m', tag='Excess_surface_tension_liquid_gas_Nm')
STD_ANON_23.Interfacial_tension_Nm = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='Interfacial tension, N/m', tag='Interfacial_tension_Nm')
STD_ANON_23.Speed_of_sound_ms = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='Speed of sound, m/s', tag='Speed_of_sound_ms')
STD_ANON_23.Excess_speed_of_sound_ms = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='Excess speed of sound, m/s', tag='Excess_speed_of_sound_ms')
STD_ANON_23._InitializeFacetMap(STD_ANON_23._CF_enumeration)
_module_typeBindings.STD_ANON_23 = STD_ANON_23

# Atomic simple type: [anonymous]
class STD_ANON_24 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1173, 18)
    _Documentation = None
STD_ANON_24._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_24, enum_prefix=None)
STD_ANON_24.Standard_Abbe_refractometry = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Standard Abbe refractometry', tag='Standard_Abbe_refractometry')
STD_ANON_24.Precision_Abbe_refractometry = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Precision Abbe refractometry', tag='Precision_Abbe_refractometry')
STD_ANON_24.Dipping_refractometry_monochromatic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Dipping refractometry (monochromatic)', tag='Dipping_refractometry_monochromatic')
STD_ANON_24.Interferometer = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Interferometer', tag='Interferometer')
STD_ANON_24.Capillary_rise = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Capillary rise', tag='Capillary_rise')
STD_ANON_24.Drop_weight = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Drop weight', tag='Drop_weight')
STD_ANON_24.Drop_volume = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Drop volume', tag='Drop_volume')
STD_ANON_24.Maximal_bubble_pressure = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Maximal bubble pressure', tag='Maximal_bubble_pressure')
STD_ANON_24.Pendant_drop_shape = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pendant drop shape', tag='Pendant_drop_shape')
STD_ANON_24.Ring_tensiometer = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Ring tensiometer', tag='Ring_tensiometer')
STD_ANON_24.Linear_variable_path_acoustic_interferometer = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Linear variable-path acoustic interferometer', tag='Linear_variable_path_acoustic_interferometer')
STD_ANON_24.Sing_around_technique_in_a_fixed_path_interferometer = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sing-around technique in a fixed-path interferometer', tag='Sing_around_technique_in_a_fixed_path_interferometer')
STD_ANON_24.Annular_interferometer = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Annular interferometer', tag='Annular_interferometer')
STD_ANON_24.Pulse_echo_method = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulse-echo method', tag='Pulse_echo_method')
STD_ANON_24.Spherical_resonator = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Spherical resonator', tag='Spherical_resonator')
STD_ANON_24.Light_diffraction_method = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Light diffraction method', tag='Light_diffraction_method')
STD_ANON_24.Parallel_plate_capacitor = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Parallel plate capacitor', tag='Parallel_plate_capacitor')
STD_ANON_24.Coaxial_cylinder_capacitor = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Coaxial cylinder capacitor', tag='Coaxial_cylinder_capacitor')
STD_ANON_24.Cross_capacitor = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Cross capacitor', tag='Cross_capacitor')
STD_ANON_24.Reentrant_cavity_resonator = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Reentrant cavity resonator', tag='Reentrant_cavity_resonator')
STD_ANON_24.Coaxial_line = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Coaxial line', tag='Coaxial_line')
STD_ANON_24.Wave_guide = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Wave guide', tag='Wave_guide')
STD_ANON_24.Far_infrared_free_space = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Far infrared free space', tag='Far_infrared_free_space')
STD_ANON_24.Single_path_length_method = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Single path-length method', tag='Single_path_length_method')
STD_ANON_24.Dual_path_length_method = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Dual path-length method', tag='Dual_path_length_method')
STD_ANON_24.Multiple_path_length_method = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Multiple path-length method', tag='Multiple_path_length_method')
STD_ANON_24.Cylindrical_cavity_resonance_method = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Cylindrical cavity resonance method', tag='Cylindrical_cavity_resonance_method')
STD_ANON_24.Spherical_cavity_resonance_method = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Spherical cavity resonance method', tag='Spherical_cavity_resonance_method')
STD_ANON_24.Toroidal_cavity_resonance_method = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Toroidal cavity resonance method', tag='Toroidal_cavity_resonance_method')
STD_ANON_24.Levitation_methods = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Levitation methods', tag='Levitation_methods')
STD_ANON_24.Other = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_24._InitializeFacetMap(STD_ANON_24._CF_enumeration)
_module_typeBindings.STD_ANON_24 = STD_ANON_24

# Atomic simple type: [anonymous]
class STD_ANON_25 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1220, 17)
    _Documentation = None
STD_ANON_25._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_25, enum_prefix=None)
STD_ANON_25.Temperature_of_12_conversion_K = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value='Temperature of 1/2 conversion, K', tag='Temperature_of_12_conversion_K')
STD_ANON_25.Peak_temperature_K = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value='Peak temperature, K', tag='Peak_temperature_K')
STD_ANON_25.Zero_Gibbs_energy_temperature_K = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value='Zero-Gibbs energy temperature, K', tag='Zero_Gibbs_energy_temperature_K')
STD_ANON_25.Heat_capacity_change_at_transition_JKmol = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value='Heat capacity change at transition, J/K/mol', tag='Heat_capacity_change_at_transition_JKmol')
STD_ANON_25.vant_Hoff_enthalpy_of_transition_kJmol = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value="van't Hoff enthalpy of transition, kJ/mol", tag='vant_Hoff_enthalpy_of_transition_kJmol')
STD_ANON_25._InitializeFacetMap(STD_ANON_25._CF_enumeration)
_module_typeBindings.STD_ANON_25 = STD_ANON_25

# Atomic simple type: [anonymous]
class STD_ANON_26 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1232, 18)
    _Documentation = None
STD_ANON_26._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_26, enum_prefix=None)
STD_ANON_26.DSCDTA = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value='DSC/DTA', tag='DSCDTA')
STD_ANON_26._InitializeFacetMap(STD_ANON_26._CF_enumeration)
_module_typeBindings.STD_ANON_26 = STD_ANON_26

# Atomic simple type: [anonymous]
class STD_ANON_27 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1272, 12)
    _Documentation = None
STD_ANON_27._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_27, enum_prefix=None)
STD_ANON_27.Native = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='Native', tag='Native')
STD_ANON_27.Denaturated = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='Denaturated', tag='Denaturated')
STD_ANON_27._InitializeFacetMap(STD_ANON_27._CF_enumeration)
_module_typeBindings.STD_ANON_27 = STD_ANON_27

# Atomic simple type: [anonymous]
class STD_ANON_28 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1314, 8)
    _Documentation = None
STD_ANON_28._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_28, enum_prefix=None)
STD_ANON_28.Pure_compound = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='Pure compound', tag='Pure_compound')
STD_ANON_28.Pure_liquid_solute = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='Pure liquid solute', tag='Pure_liquid_solute')
STD_ANON_28.Standard_molality_1_molkg_solute = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='Standard molality (1 mol/kg) solute', tag='Standard_molality_1_molkg_solute')
STD_ANON_28.Standard_amount_concentration_1_moldm3_solute = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='Standard amount concentration (1 mol/dm3) solute', tag='Standard_amount_concentration_1_moldm3_solute')
STD_ANON_28.Infinite_dilution_solute = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='Infinite dilution solute', tag='Infinite_dilution_solute')
STD_ANON_28._InitializeFacetMap(STD_ANON_28._CF_enumeration)
_module_typeBindings.STD_ANON_28 = STD_ANON_28

# Atomic simple type: [anonymous]
class STD_ANON_29 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1469, 8)
    _Documentation = None
STD_ANON_29._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_29, enum_prefix=None)
STD_ANON_29.Pure_compound = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='Pure compound', tag='Pure_compound')
STD_ANON_29.Pure_liquid_solute = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='Pure liquid solute', tag='Pure_liquid_solute')
STD_ANON_29.Standard_molality_1_molkg_solute = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='Standard molality (1 mol/kg) solute', tag='Standard_molality_1_molkg_solute')
STD_ANON_29.Standard_amount_concentration_1_moldm3_solute = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='Standard amount concentration (1 mol/dm3) solute', tag='Standard_amount_concentration_1_moldm3_solute')
STD_ANON_29.Infinite_dilution_solute = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='Infinite dilution solute', tag='Infinite_dilution_solute')
STD_ANON_29._InitializeFacetMap(STD_ANON_29._CF_enumeration)
_module_typeBindings.STD_ANON_29 = STD_ANON_29

# Atomic simple type: [anonymous]
class STD_ANON_30 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1484, 8)
    _Documentation = None
STD_ANON_30._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_30, enum_prefix=None)
STD_ANON_30.Amount_ratio_of_solvent_to_participant = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='Amount ratio of solvent to participant', tag='Amount_ratio_of_solvent_to_participant')
STD_ANON_30.Molality___amount_of_participant_per_mass_of_solvent_molkg = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='Molality - amount of participant per mass of solvent, mol/kg', tag='Molality___amount_of_participant_per_mass_of_solvent_molkg')
STD_ANON_30.Amount_of_participant_per_mass_of_solution_molkg = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='Amount of participant per mass of solution, mol/kg', tag='Amount_of_participant_per_mass_of_solution_molkg')
STD_ANON_30.Amount_concentration___amount_of_participant_per_volume_of_solution_moldm3 = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='Amount concentration - amount of participant per volume of solution, mol/dm3', tag='Amount_concentration___amount_of_participant_per_volume_of_solution_moldm3')
STD_ANON_30.Amount_ratio_of_participant_to_solvent = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='Amount ratio of participant to solvent', tag='Amount_ratio_of_participant_to_solvent')
STD_ANON_30.Mass_ratio_of_participant_to_solvent = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='Mass ratio of participant to solvent', tag='Mass_ratio_of_participant_to_solvent')
STD_ANON_30.Volume_ratio_of_participant_to_solvent = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='Volume ratio of participant to solvent', tag='Volume_ratio_of_participant_to_solvent')
STD_ANON_30.Mass_of_participant_per_volume_of_solution_kgm3 = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='Mass of participant per volume of solution, kg/m3', tag='Mass_of_participant_per_volume_of_solution_kgm3')
STD_ANON_30._InitializeFacetMap(STD_ANON_30._CF_enumeration)
_module_typeBindings.STD_ANON_30 = STD_ANON_30

# Atomic simple type: [anonymous]
class STD_ANON_31 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1507, 9)
    _Documentation = None
STD_ANON_31._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_31, enum_prefix=None)
STD_ANON_31.Cofactor = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='Cofactor', tag='Cofactor')
STD_ANON_31.Buffer = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='Buffer', tag='Buffer')
STD_ANON_31.Inert = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='Inert', tag='Inert')
STD_ANON_31._InitializeFacetMap(STD_ANON_31._CF_enumeration)
_module_typeBindings.STD_ANON_31 = STD_ANON_31

# Atomic simple type: [anonymous]
class STD_ANON_32 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1538, 5)
    _Documentation = None
STD_ANON_32._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_32, enum_prefix=None)
STD_ANON_32.chemical = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value='chemical', tag='chemical')
STD_ANON_32.biochemical = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value='biochemical', tag='biochemical')
STD_ANON_32._InitializeFacetMap(STD_ANON_32._CF_enumeration)
_module_typeBindings.STD_ANON_32 = STD_ANON_32

# Atomic simple type: [anonymous]
class STD_ANON_33 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1554, 5)
    _Documentation = None
STD_ANON_33._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_33, enum_prefix=None)
STD_ANON_33.Combustion_with_oxygen = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Combustion with oxygen', tag='Combustion_with_oxygen')
STD_ANON_33.Addition_of_various_compounds_to_unsaturated_compounds = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Addition of various compounds to unsaturated compounds', tag='Addition_of_various_compounds_to_unsaturated_compounds')
STD_ANON_33.Addition_of_water_to_a_liquid_or_solid_to_produce_a_hydrate = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Addition of water to a liquid or solid to produce a hydrate', tag='Addition_of_water_to_a_liquid_or_solid_to_produce_a_hydrate')
STD_ANON_33.Atomization_or_formation_from_atoms = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Atomization (or formation from atoms)', tag='Atomization_or_formation_from_atoms')
STD_ANON_33.Combustion_with_other_elements_or_compounds = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Combustion with other elements or compounds', tag='Combustion_with_other_elements_or_compounds')
STD_ANON_33.Esterification = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Esterification', tag='Esterification')
STD_ANON_33.Exchange_of_alkyl_groups = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Exchange of alkyl groups', tag='Exchange_of_alkyl_groups')
STD_ANON_33.Exchange_of_hydrogen_atoms_with_other_groups = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Exchange of hydrogen (atoms) with other groups', tag='Exchange_of_hydrogen_atoms_with_other_groups')
STD_ANON_33.Formation_of_a_compound_from_elements_in_their_stable_state = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Formation of a compound from elements in their stable state', tag='Formation_of_a_compound_from_elements_in_their_stable_state')
STD_ANON_33.Halogenation_addition_of_or_replacement_by_a_halogen = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Halogenation (addition of or replacement by a halogen)', tag='Halogenation_addition_of_or_replacement_by_a_halogen')
STD_ANON_33.Hydrogenation_addition_of_hydrogen_to_unsaturated_compounds = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Hydrogenation (addition of hydrogen to unsaturated compounds)', tag='Hydrogenation_addition_of_hydrogen_to_unsaturated_compounds')
STD_ANON_33.Hydrohalogenation = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Hydrohalogenation', tag='Hydrohalogenation')
STD_ANON_33.Hydrolysis_of_ions = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Hydrolysis of ions', tag='Hydrolysis_of_ions')
STD_ANON_33.Other_reactions_with_water = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Other reactions with water', tag='Other_reactions_with_water')
STD_ANON_33.Ion_exchange = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Ion exchange', tag='Ion_exchange')
STD_ANON_33.Neutralization_reaction_of_an_acid_with_a_base = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Neutralization (reaction of an acid with a base)', tag='Neutralization_reaction_of_an_acid_with_a_base')
STD_ANON_33.Oxidation_with_oxidizing_agents_other_than_oxygen = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Oxidation with oxidizing agents other than oxygen', tag='Oxidation_with_oxidizing_agents_other_than_oxygen')
STD_ANON_33.Oxidation_with_oxygen_not_complete = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Oxidation with oxygen (not complete)', tag='Oxidation_with_oxygen_not_complete')
STD_ANON_33.Polymerization_all_other_types = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Polymerization (all other types)', tag='Polymerization_all_other_types')
STD_ANON_33.Homonuclear_dimerization = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Homonuclear dimerization', tag='Homonuclear_dimerization')
STD_ANON_33.Solvolyis_solvents_other_than_water = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Solvolyis (solvents other than water)', tag='Solvolyis_solvents_other_than_water')
STD_ANON_33.Stereoisomerism = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Stereoisomerism', tag='Stereoisomerism')
STD_ANON_33.Structural_isomerization = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Structural isomerization', tag='Structural_isomerization')
STD_ANON_33.Formation_of_ion = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Formation of ion', tag='Formation_of_ion')
STD_ANON_33.Other_reactions = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='Other reactions', tag='Other_reactions')
STD_ANON_33._InitializeFacetMap(STD_ANON_33._CF_enumeration)
_module_typeBindings.STD_ANON_33 = STD_ANON_33

# Atomic simple type: [anonymous]
class STD_ANON_34 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1598, 17)
    _Documentation = None
STD_ANON_34._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_34, enum_prefix=None)
STD_ANON_34.Molar_enthalpy_of_reaction_kJmol = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='Molar enthalpy of reaction, kJ/mol', tag='Molar_enthalpy_of_reaction_kJmol')
STD_ANON_34.Enthalpy_of_process_kJ = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='Enthalpy of process, kJ', tag='Enthalpy_of_process_kJ')
STD_ANON_34.Specific_internal_energy_of_reaction_at_constant_volume_Jg = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='Specific internal energy of reaction at constant volume, J/g', tag='Specific_internal_energy_of_reaction_at_constant_volume_Jg')
STD_ANON_34.Molar_internal_energy_of_reaction_at_constant_volume_kJmol = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='Molar internal energy of reaction at constant volume, kJ/mol', tag='Molar_internal_energy_of_reaction_at_constant_volume_kJmol')
STD_ANON_34.Molar_Gibbs_energy_of_reaction_kJmol = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='Molar Gibbs energy of reaction, kJ/mol', tag='Molar_Gibbs_energy_of_reaction_kJmol')
STD_ANON_34.Molar_entropy_of_reaction_JKmol = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='Molar entropy of reaction, J/K/mol', tag='Molar_entropy_of_reaction_JKmol')
STD_ANON_34.Potential_difference_of_an_electrochemical_cell_V = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='Potential difference of an electrochemical cell, V', tag='Potential_difference_of_an_electrochemical_cell_V')
STD_ANON_34._InitializeFacetMap(STD_ANON_34._CF_enumeration)
_module_typeBindings.STD_ANON_34 = STD_ANON_34

# Atomic simple type: [anonymous]
class STD_ANON_35 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1612, 18)
    _Documentation = None
STD_ANON_35._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_35, enum_prefix=None)
STD_ANON_35.Static_bomb_calorimetry = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Static bomb calorimetry', tag='Static_bomb_calorimetry')
STD_ANON_35.Rotating_bomb_calorimetry = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Rotating bomb calorimetry', tag='Rotating_bomb_calorimetry')
STD_ANON_35.Micro_bomb_calorimetry = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Micro-bomb calorimetry', tag='Micro_bomb_calorimetry')
STD_ANON_35.Flame_calorimetry = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Flame calorimetry', tag='Flame_calorimetry')
STD_ANON_35.Solution_calorimetry = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Solution calorimetry', tag='Solution_calorimetry')
STD_ANON_35.Potential_difference_of_an_electrochemical_cell = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Potential difference of an electrochemical cell', tag='Potential_difference_of_an_electrochemical_cell')
STD_ANON_35.Anion_exchange = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Anion exchange', tag='Anion_exchange')
STD_ANON_35.Cation_exchange = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Cation exchange', tag='Cation_exchange')
STD_ANON_35.Cell_potential_with_glass_electrode = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Cell potential with glass electrode', tag='Cell_potential_with_glass_electrode')
STD_ANON_35.Cell_potential_with_platinum_electrode = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Cell potential with platinum electrode', tag='Cell_potential_with_platinum_electrode')
STD_ANON_35.Cell_potential_with_quinhydrone_electrode = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Cell potential with quinhydrone electrode', tag='Cell_potential_with_quinhydrone_electrode')
STD_ANON_35.Cell_potential_with_redox_electrode = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Cell potential with redox electrode', tag='Cell_potential_with_redox_electrode')
STD_ANON_35.Colorimetry = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Colorimetry', tag='Colorimetry')
STD_ANON_35.Conductivity_measurement = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Conductivity measurement', tag='Conductivity_measurement')
STD_ANON_35.Coulometry = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Coulometry', tag='Coulometry')
STD_ANON_35.Cryoscopy = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Cryoscopy', tag='Cryoscopy')
STD_ANON_35.Distribution_between_two_phases = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Distribution between two phases', tag='Distribution_between_two_phases')
STD_ANON_35.Ion_selective_electrode = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Ion selective electrode', tag='Ion_selective_electrode')
STD_ANON_35.Molar_volume_determination = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Molar volume determination', tag='Molar_volume_determination')
STD_ANON_35.Polarography = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Polarography', tag='Polarography')
STD_ANON_35.Potentiometry = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Potentiometry', tag='Potentiometry')
STD_ANON_35.Proton_relaxation = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Proton relaxation', tag='Proton_relaxation')
STD_ANON_35.Rate_of_reaction = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Rate of reaction', tag='Rate_of_reaction')
STD_ANON_35.Solubility_measurement = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Solubility measurement', tag='Solubility_measurement')
STD_ANON_35.Spectrophotometry = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Spectrophotometry', tag='Spectrophotometry')
STD_ANON_35.Thermal_lensing_spectrophotometry = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Thermal lensing spectrophotometry', tag='Thermal_lensing_spectrophotometry')
STD_ANON_35.Transient_conductivity_measurement = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Transient conductivity measurement', tag='Transient_conductivity_measurement')
STD_ANON_35.Solvent_extraction = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Solvent extraction', tag='Solvent_extraction')
STD_ANON_35.Voltammetry = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Voltammetry', tag='Voltammetry')
STD_ANON_35.Other = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_35._InitializeFacetMap(STD_ANON_35._CF_enumeration)
_module_typeBindings.STD_ANON_35 = STD_ANON_35

# Atomic simple type: [anonymous]
class STD_ANON_36 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1662, 17)
    _Documentation = None
STD_ANON_36._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_36, enum_prefix=None)
STD_ANON_36.Thermodynamic_equilibrium_constant = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Thermodynamic equilibrium constant', tag='Thermodynamic_equilibrium_constant')
STD_ANON_36.Equilibrium_constant_in_terms_of_molality_molkgn = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Equilibrium constant in terms of molality, (mol/kg)^n', tag='Equilibrium_constant_in_terms_of_molality_molkgn')
STD_ANON_36.Equilibrium_constant_in_terms_of_amount_concentration_molarity_moldm3n = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Equilibrium constant in terms of amount concentration (molarity), (mol/dm3)^n', tag='Equilibrium_constant_in_terms_of_amount_concentration_molarity_moldm3n')
STD_ANON_36.Equilibrium_constant_in_terms_of_partial_pressure_kPan = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Equilibrium constant in terms of partial pressure, kPa^n', tag='Equilibrium_constant_in_terms_of_partial_pressure_kPan')
STD_ANON_36.Equilibrium_constant_in_terms_of_mole_fraction = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Equilibrium constant in terms of mole fraction', tag='Equilibrium_constant_in_terms_of_mole_fraction')
STD_ANON_36.Natural_logarithm_of_thermodynamic_equilibrium_constant = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Natural logarithm of thermodynamic equilibrium constant', tag='Natural_logarithm_of_thermodynamic_equilibrium_constant')
STD_ANON_36.Natural_logarithm_of_equilibrium_constant_in_terms_of_molality_molkgn = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Natural logarithm of equilibrium constant in terms of molality, (mol/kg)^n', tag='Natural_logarithm_of_equilibrium_constant_in_terms_of_molality_molkgn')
STD_ANON_36.Natural_logarithm_of_equilibrium_constant_in_terms_of_amount_concentration_molarity_moldm3n = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Natural logarithm of equilibrium constant in terms of amount concentration (molarity), (mol/dm3)^n', tag='Natural_logarithm_of_equilibrium_constant_in_terms_of_amount_concentration_molarity_moldm3n')
STD_ANON_36.Natural_logarithm_of_equilibrium_constant_in_terms_of_partial_pressure_kPan = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Natural logarithm of equilibrium constant in terms of partial pressure, kPa^n', tag='Natural_logarithm_of_equilibrium_constant_in_terms_of_partial_pressure_kPan')
STD_ANON_36.Natural_logarithm_of_equilibrium_constant_in_terms_of_mole_fraction = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Natural logarithm of equilibrium constant in terms of mole fraction', tag='Natural_logarithm_of_equilibrium_constant_in_terms_of_mole_fraction')
STD_ANON_36.Decadic_logarithm_of_thermodynamic_equilibrium_constant = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Decadic logarithm of thermodynamic equilibrium constant', tag='Decadic_logarithm_of_thermodynamic_equilibrium_constant')
STD_ANON_36.Decadic_logarithm_of_equilibrium_constant_in_terms_of_molality_molkgn = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Decadic logarithm of equilibrium constant in terms of molality, (mol/kg)^n', tag='Decadic_logarithm_of_equilibrium_constant_in_terms_of_molality_molkgn')
STD_ANON_36.Decadic_logarithm_of_equilibrium_constant_in_terms_of_amount_concentration_molarity_moldm3n = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Decadic logarithm of equilibrium constant in terms of amount concentration (molarity), (mol/dm3)^n', tag='Decadic_logarithm_of_equilibrium_constant_in_terms_of_amount_concentration_molarity_moldm3n')
STD_ANON_36.Decadic_logarithm_of_equilibrium_constant_in_terms_of_partial_pressure_kPan = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Decadic logarithm of equilibrium constant in terms of partial pressure, kPa^n', tag='Decadic_logarithm_of_equilibrium_constant_in_terms_of_partial_pressure_kPan')
STD_ANON_36.Decadic_logarithm_of_equilibrium_constant_in_terms_of_mole_fraction = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='Decadic logarithm of equilibrium constant in terms of mole fraction', tag='Decadic_logarithm_of_equilibrium_constant_in_terms_of_mole_fraction')
STD_ANON_36._InitializeFacetMap(STD_ANON_36._CF_enumeration)
_module_typeBindings.STD_ANON_36 = STD_ANON_36

# Atomic simple type: [anonymous]
class STD_ANON_37 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1684, 18)
    _Documentation = None
STD_ANON_37._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_37, enum_prefix=None)
STD_ANON_37.Static_equilibration = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Static equilibration', tag='Static_equilibration')
STD_ANON_37.Dynamic_equilibration = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Dynamic equilibration', tag='Dynamic_equilibration')
STD_ANON_37.Chromatography = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Chromatography', tag='Chromatography')
STD_ANON_37.IR_spectrometry = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='IR spectrometry', tag='IR_spectrometry')
STD_ANON_37.UV_spectroscopy = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='UV spectroscopy', tag='UV_spectroscopy')
STD_ANON_37.NMR_spectrometry = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='NMR spectrometry', tag='NMR_spectrometry')
STD_ANON_37.Titration = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Titration', tag='Titration')
STD_ANON_37.Potential_difference_of_an_electrochemical_cell = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Potential difference of an electrochemical cell', tag='Potential_difference_of_an_electrochemical_cell')
STD_ANON_37.Anion_exchange = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Anion exchange', tag='Anion_exchange')
STD_ANON_37.Cation_exchange = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Cation exchange', tag='Cation_exchange')
STD_ANON_37.Cell_potential_with_glass_electrode = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Cell potential with glass electrode', tag='Cell_potential_with_glass_electrode')
STD_ANON_37.Cell_potential_with_platinum_electrode = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Cell potential with platinum electrode', tag='Cell_potential_with_platinum_electrode')
STD_ANON_37.Cell_potential_with_quinhydrone_electrode = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Cell potential with quinhydrone electrode', tag='Cell_potential_with_quinhydrone_electrode')
STD_ANON_37.Cell_potential_with_redox_electrode = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Cell potential with redox electrode', tag='Cell_potential_with_redox_electrode')
STD_ANON_37.Colorimetry = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Colorimetry', tag='Colorimetry')
STD_ANON_37.Conductivity_measurement = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Conductivity measurement', tag='Conductivity_measurement')
STD_ANON_37.Coulometry = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Coulometry', tag='Coulometry')
STD_ANON_37.Cryoscopy = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Cryoscopy', tag='Cryoscopy')
STD_ANON_37.Distribution_between_two_phases = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Distribution between two phases', tag='Distribution_between_two_phases')
STD_ANON_37.Ion_selective_electrode = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Ion selective electrode', tag='Ion_selective_electrode')
STD_ANON_37.Molar_volume_determination = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Molar volume determination', tag='Molar_volume_determination')
STD_ANON_37.Polarography = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Polarography', tag='Polarography')
STD_ANON_37.Potentiometry = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Potentiometry', tag='Potentiometry')
STD_ANON_37.Proton_relaxation = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Proton relaxation', tag='Proton_relaxation')
STD_ANON_37.Rate_of_reaction = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Rate of reaction', tag='Rate_of_reaction')
STD_ANON_37.Solubility_measurement = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Solubility measurement', tag='Solubility_measurement')
STD_ANON_37.Spectrophotometry = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Spectrophotometry', tag='Spectrophotometry')
STD_ANON_37.Thermal_lensing_spectrophotometry = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Thermal lensing spectrophotometry', tag='Thermal_lensing_spectrophotometry')
STD_ANON_37.Transient_conductivity_measurement = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Transient conductivity measurement', tag='Transient_conductivity_measurement')
STD_ANON_37.Solvent_extraction = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Solvent extraction', tag='Solvent_extraction')
STD_ANON_37.Voltammetry = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Voltammetry', tag='Voltammetry')
STD_ANON_37.Other = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_37._InitializeFacetMap(STD_ANON_37._CF_enumeration)
_module_typeBindings.STD_ANON_37 = STD_ANON_37

# Atomic simple type: [anonymous]
class STD_ANON_38 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1761, 8)
    _Documentation = None
STD_ANON_38._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_38, enum_prefix=None)
STD_ANON_38.Pure_compound = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value='Pure compound', tag='Pure_compound')
STD_ANON_38.Pure_liquid_solute = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value='Pure liquid solute', tag='Pure_liquid_solute')
STD_ANON_38.Standard_molality_1_molkg_solute = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value='Standard molality (1 mol/kg) solute', tag='Standard_molality_1_molkg_solute')
STD_ANON_38.Standard_amount_concentration_1_moldm3_solute = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value='Standard amount concentration (1 mol/dm3) solute', tag='Standard_amount_concentration_1_moldm3_solute')
STD_ANON_38.Infinite_dilution_solute = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value='Infinite dilution solute', tag='Infinite_dilution_solute')
STD_ANON_38._InitializeFacetMap(STD_ANON_38._CF_enumeration)
_module_typeBindings.STD_ANON_38 = STD_ANON_38

# Atomic simple type: {http://www.iupac.org/namespaces/ThermoML}eSampleStatus
class eSampleStatus (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The sample status"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'eSampleStatus')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1861, 1)
    _Documentation = 'The sample status'
eSampleStatus._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=eSampleStatus, enum_prefix=None)
eSampleStatus.unknown = eSampleStatus._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
eSampleStatus.notDescribed = eSampleStatus._CF_enumeration.addEnumeration(unicode_value='notDescribed', tag='notDescribed')
eSampleStatus.previousPaper = eSampleStatus._CF_enumeration.addEnumeration(unicode_value='previousPaper', tag='previousPaper')
eSampleStatus.noSample = eSampleStatus._CF_enumeration.addEnumeration(unicode_value='noSample', tag='noSample')
eSampleStatus._InitializeFacetMap(eSampleStatus._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'eSampleStatus', eSampleStatus)
_module_typeBindings.eSampleStatus = eSampleStatus

# Atomic simple type: {http://www.iupac.org/namespaces/ThermoML}eSampleSource
class eSampleSource (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Source(s) of the sample"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'eSampleSource')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1875, 1)
    _Documentation = 'Source(s) of the sample'
eSampleSource._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=eSampleSource, enum_prefix=None)
eSampleSource.Commercial_source = eSampleSource._CF_enumeration.addEnumeration(unicode_value='Commercial source', tag='Commercial_source')
eSampleSource.Synthesized_by_the_authors = eSampleSource._CF_enumeration.addEnumeration(unicode_value='Synthesized by the authors', tag='Synthesized_by_the_authors')
eSampleSource.Synthesized_by_others = eSampleSource._CF_enumeration.addEnumeration(unicode_value='Synthesized by others', tag='Synthesized_by_others')
eSampleSource.Standard_Reference_Material_SRM = eSampleSource._CF_enumeration.addEnumeration(unicode_value='Standard Reference Material (SRM)', tag='Standard_Reference_Material_SRM')
eSampleSource.Isolated_from_a_natural_product = eSampleSource._CF_enumeration.addEnumeration(unicode_value='Isolated from a natural product', tag='Isolated_from_a_natural_product')
eSampleSource.Not_stated_in_the_document = eSampleSource._CF_enumeration.addEnumeration(unicode_value='Not stated in the document', tag='Not_stated_in_the_document')
eSampleSource.No_sample_used = eSampleSource._CF_enumeration.addEnumeration(unicode_value='No sample used', tag='No_sample_used')
eSampleSource._InitializeFacetMap(eSampleSource._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'eSampleSource', eSampleSource)
_module_typeBindings.eSampleSource = eSampleSource

# Atomic simple type: {http://www.iupac.org/namespaces/ThermoML}ePurifMethod
class ePurifMethod (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Purification method(s) used to purify sample"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ePurifMethod')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1892, 1)
    _Documentation = 'Purification method(s) used to purify sample'
ePurifMethod._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ePurifMethod, enum_prefix=None)
ePurifMethod.Impurity_adsorption = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Impurity adsorption', tag='Impurity_adsorption')
ePurifMethod.Vacuum_degasification = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Vacuum degasification', tag='Vacuum_degasification')
ePurifMethod.Chemical_reagent_treatment = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Chemical reagent treatment', tag='Chemical_reagent_treatment')
ePurifMethod.Crystallization_from_melt = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Crystallization from melt', tag='Crystallization_from_melt')
ePurifMethod.Crystallization_from_solution = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Crystallization from solution', tag='Crystallization_from_solution')
ePurifMethod.Liquid_chromatography = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Liquid chromatography', tag='Liquid_chromatography')
ePurifMethod.Dried_with_chemical_reagent = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Dried with chemical reagent', tag='Dried_with_chemical_reagent')
ePurifMethod.Dried_in_a_desiccator = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Dried in a desiccator', tag='Dried_in_a_desiccator')
ePurifMethod.Dried_by_oven_heating = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Dried by oven heating', tag='Dried_by_oven_heating')
ePurifMethod.Dried_by_vacuum_heating = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Dried by vacuum heating', tag='Dried_by_vacuum_heating')
ePurifMethod.De_gassed_by_boiling_or_ultrasonically = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='De-gassed by boiling or ultrasonically', tag='De_gassed_by_boiling_or_ultrasonically')
ePurifMethod.De_gassed_by_evacuation = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='De-gassed by evacuation', tag='De_gassed_by_evacuation')
ePurifMethod.De_gassed_by_freezing_and_melting_in_vacuum = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='De-gassed by freezing and melting in vacuum', tag='De_gassed_by_freezing_and_melting_in_vacuum')
ePurifMethod.Fractional_crystallization = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Fractional crystallization', tag='Fractional_crystallization')
ePurifMethod.Fractional_distillation = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Fractional distillation', tag='Fractional_distillation')
ePurifMethod.Molecular_sieve_treatment = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Molecular sieve treatment', tag='Molecular_sieve_treatment')
ePurifMethod.Unspecified = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Unspecified', tag='Unspecified')
ePurifMethod.Preparative_gas_chromatography = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Preparative gas chromatography', tag='Preparative_gas_chromatography')
ePurifMethod.Sublimation = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Sublimation', tag='Sublimation')
ePurifMethod.Steam_distillation = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Steam distillation', tag='Steam_distillation')
ePurifMethod.Solvent_extraction = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Solvent extraction', tag='Solvent_extraction')
ePurifMethod.Salting_out_of_solution = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Salting out of solution', tag='Salting_out_of_solution')
ePurifMethod.Zone_refining = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Zone refining', tag='Zone_refining')
ePurifMethod.Other = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
ePurifMethod.None_used = ePurifMethod._CF_enumeration.addEnumeration(unicode_value='None used', tag='None_used')
ePurifMethod._InitializeFacetMap(ePurifMethod._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ePurifMethod', ePurifMethod)
_module_typeBindings.ePurifMethod = ePurifMethod

# Atomic simple type: {http://www.iupac.org/namespaces/ThermoML}ePurityAnalMethod
class ePurityAnalMethod (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Analytical method used to measure purity."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ePurityAnalMethod')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1927, 1)
    _Documentation = 'Analytical method used to measure purity.'
ePurityAnalMethod._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ePurityAnalMethod, enum_prefix=None)
ePurityAnalMethod.Chemical_analysis = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Chemical analysis', tag='Chemical_analysis')
ePurityAnalMethod.Difference_between_bubble_and_dew_temperatures = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Difference between bubble and dew temperatures', tag='Difference_between_bubble_and_dew_temperatures')
ePurityAnalMethod.Density = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Density', tag='Density')
ePurityAnalMethod.DSC = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='DSC', tag='DSC')
ePurityAnalMethod.Estimation = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Estimation', tag='Estimation')
ePurityAnalMethod.Gas_chromatography = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Gas chromatography', tag='Gas_chromatography')
ePurityAnalMethod.Fraction_melting_in_an_adiabatic_calorimeter = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Fraction melting in an adiabatic calorimeter', tag='Fraction_melting_in_an_adiabatic_calorimeter')
ePurityAnalMethod.Mass_spectrometry = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Mass spectrometry', tag='Mass_spectrometry')
ePurityAnalMethod.NMR_proton = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='NMR (proton)', tag='NMR_proton')
ePurityAnalMethod.NMR_other = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='NMR (other)', tag='NMR_other')
ePurityAnalMethod.Not_known = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Not known', tag='Not_known')
ePurityAnalMethod.Spectroscopy = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Spectroscopy', tag='Spectroscopy')
ePurityAnalMethod.Thermal_analysis_using_temperature_time_measurement = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Thermal analysis using temperature-time measurement', tag='Thermal_analysis_using_temperature_time_measurement')
ePurityAnalMethod.Acid_base_titration = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Acid-base titration', tag='Acid_base_titration')
ePurityAnalMethod.Other_types_of_titration = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Other types of titration', tag='Other_types_of_titration')
ePurityAnalMethod.Mass_loss_on_drying = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Mass loss on drying', tag='Mass_loss_on_drying')
ePurityAnalMethod.Karl_Fischer_titration = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Karl Fischer titration', tag='Karl_Fischer_titration')
ePurityAnalMethod.HPLC = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='HPLC', tag='HPLC')
ePurityAnalMethod.Ion_chromatography = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Ion chromatography', tag='Ion_chromatography')
ePurityAnalMethod.Ion_selective_electrode = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Ion-selective electrode', tag='Ion_selective_electrode')
ePurityAnalMethod.CO2_yield_in_combustion_products = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='CO2 yield in combustion products', tag='CO2_yield_in_combustion_products')
ePurityAnalMethod.Other = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
ePurityAnalMethod.Estimated_by_the_compiler = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Estimated by the compiler', tag='Estimated_by_the_compiler')
ePurityAnalMethod.Stated_by_supplier = ePurityAnalMethod._CF_enumeration.addEnumeration(unicode_value='Stated by supplier', tag='Stated_by_supplier')
ePurityAnalMethod._InitializeFacetMap(ePurityAnalMethod._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ePurityAnalMethod', ePurityAnalMethod)
_module_typeBindings.ePurityAnalMethod = ePurityAnalMethod

# Atomic simple type: {http://www.iupac.org/namespaces/ThermoML}eExpPurpose
class eExpPurpose (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Purpose of measurement"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'eExpPurpose')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1961, 1)
    _Documentation = 'Purpose of measurement'
eExpPurpose._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=eExpPurpose, enum_prefix=None)
eExpPurpose.Principal_objective_of_the_work = eExpPurpose._CF_enumeration.addEnumeration(unicode_value='Principal objective of the work', tag='Principal_objective_of_the_work')
eExpPurpose.Secondary_purpose_by_product_of_other_objective = eExpPurpose._CF_enumeration.addEnumeration(unicode_value='Secondary purpose (by-product of other objective)', tag='Secondary_purpose_by_product_of_other_objective')
eExpPurpose.Determined_for_identification_of_a_synthesized_compound = eExpPurpose._CF_enumeration.addEnumeration(unicode_value='Determined for identification of a synthesized compound', tag='Determined_for_identification_of_a_synthesized_compound')
eExpPurpose._InitializeFacetMap(eExpPurpose._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'eExpPurpose', eExpPurpose)
_module_typeBindings.eExpPurpose = eExpPurpose

# Atomic simple type: {http://www.iupac.org/namespaces/ThermoML}ePhaseName
class ePhaseName (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Phase description"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ePhaseName')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1974, 1)
    _Documentation = 'Phase description'
ePhaseName._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ePhaseName, enum_prefix=None)
ePhaseName.Crystal_5 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Crystal 5', tag='Crystal_5')
ePhaseName.Crystal_4 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Crystal 4', tag='Crystal_4')
ePhaseName.Crystal_3 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Crystal 3', tag='Crystal_3')
ePhaseName.Crystal_2 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Crystal 2', tag='Crystal_2')
ePhaseName.Crystal_1 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Crystal 1', tag='Crystal_1')
ePhaseName.Crystal = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Crystal', tag='Crystal')
ePhaseName.Crystal_of_unknown_type = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Crystal of unknown type', tag='Crystal_of_unknown_type')
ePhaseName.Crystal_of_intercomponent_compound_1 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Crystal of intercomponent compound 1', tag='Crystal_of_intercomponent_compound_1')
ePhaseName.Crystal_of_intercomponent_compound_2 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Crystal of intercomponent compound 2', tag='Crystal_of_intercomponent_compound_2')
ePhaseName.Crystal_of_intercomponent_compound_3 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Crystal of intercomponent compound 3', tag='Crystal_of_intercomponent_compound_3')
ePhaseName.Metastable_crystal = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Metastable crystal', tag='Metastable_crystal')
ePhaseName.Metastable_liquid = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Metastable liquid', tag='Metastable_liquid')
ePhaseName.Glass = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Glass', tag='Glass')
ePhaseName.Smectic_liquid_crystal = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Smectic liquid crystal', tag='Smectic_liquid_crystal')
ePhaseName.Smectic_liquid_crystal_1 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Smectic liquid crystal 1', tag='Smectic_liquid_crystal_1')
ePhaseName.Smectic_liquid_crystal_2 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Smectic liquid crystal 2', tag='Smectic_liquid_crystal_2')
ePhaseName.Nematic_liquid_crystal = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Nematic liquid crystal', tag='Nematic_liquid_crystal')
ePhaseName.Nematic_liquid_crystal_1 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Nematic liquid crystal 1', tag='Nematic_liquid_crystal_1')
ePhaseName.Nematic_liquid_crystal_2 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Nematic liquid crystal 2', tag='Nematic_liquid_crystal_2')
ePhaseName.Cholesteric_liquid_crystal = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Cholesteric liquid crystal', tag='Cholesteric_liquid_crystal')
ePhaseName.Liquid_crystal_of_unknown_type = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Liquid crystal of unknown type', tag='Liquid_crystal_of_unknown_type')
ePhaseName.Liquid = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Liquid', tag='Liquid')
ePhaseName.Liquid_mixture_1 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Liquid mixture 1', tag='Liquid_mixture_1')
ePhaseName.Liquid_mixture_2 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Liquid mixture 2', tag='Liquid_mixture_2')
ePhaseName.Liquid_mixture_3 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Liquid mixture 3', tag='Liquid_mixture_3')
ePhaseName.Solution = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Solution', tag='Solution')
ePhaseName.Solution_1 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Solution 1', tag='Solution_1')
ePhaseName.Solution_2 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Solution 2', tag='Solution_2')
ePhaseName.Solution_3 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Solution 3', tag='Solution_3')
ePhaseName.Solution_4 = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Solution 4', tag='Solution_4')
ePhaseName.Fluid_supercritical_or_subcritical_phases = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Fluid (supercritical or subcritical phases)', tag='Fluid_supercritical_or_subcritical_phases')
ePhaseName.Ideal_gas = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Ideal gas', tag='Ideal_gas')
ePhaseName.Gas = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Gas', tag='Gas')
ePhaseName.Air_at_1_atmosphere = ePhaseName._CF_enumeration.addEnumeration(unicode_value='Air at 1 atmosphere', tag='Air_at_1_atmosphere')
ePhaseName._InitializeFacetMap(ePhaseName._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ePhaseName', ePhaseName)
_module_typeBindings.ePhaseName = ePhaseName

# Atomic simple type: {http://www.iupac.org/namespaces/ThermoML}eCrystalLatticeTypeSelection
class eCrystalLatticeTypeSelection (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Crystal Lattice Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeTypeSelection')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2018, 1)
    _Documentation = 'Crystal Lattice Type'
eCrystalLatticeTypeSelection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=eCrystalLatticeTypeSelection, enum_prefix=None)
eCrystalLatticeTypeSelection.Cubic = eCrystalLatticeTypeSelection._CF_enumeration.addEnumeration(unicode_value='Cubic', tag='Cubic')
eCrystalLatticeTypeSelection.Tetragonal = eCrystalLatticeTypeSelection._CF_enumeration.addEnumeration(unicode_value='Tetragonal', tag='Tetragonal')
eCrystalLatticeTypeSelection.Hexagonal = eCrystalLatticeTypeSelection._CF_enumeration.addEnumeration(unicode_value='Hexagonal', tag='Hexagonal')
eCrystalLatticeTypeSelection.Rhombohedral = eCrystalLatticeTypeSelection._CF_enumeration.addEnumeration(unicode_value='Rhombohedral', tag='Rhombohedral')
eCrystalLatticeTypeSelection.Orthorhombic = eCrystalLatticeTypeSelection._CF_enumeration.addEnumeration(unicode_value='Orthorhombic', tag='Orthorhombic')
eCrystalLatticeTypeSelection.Monoclinic = eCrystalLatticeTypeSelection._CF_enumeration.addEnumeration(unicode_value='Monoclinic', tag='Monoclinic')
eCrystalLatticeTypeSelection.Triclinic = eCrystalLatticeTypeSelection._CF_enumeration.addEnumeration(unicode_value='Triclinic', tag='Triclinic')
eCrystalLatticeTypeSelection._InitializeFacetMap(eCrystalLatticeTypeSelection._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'eCrystalLatticeTypeSelection', eCrystalLatticeTypeSelection)
_module_typeBindings.eCrystalLatticeTypeSelection = eCrystalLatticeTypeSelection

# Atomic simple type: {http://www.iupac.org/namespaces/ThermoML}ePresentation
class ePresentation (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Means of property presentation"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ePresentation')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2035, 1)
    _Documentation = 'Means of property presentation'
ePresentation._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ePresentation, enum_prefix=None)
ePresentation.Direct_value_X = ePresentation._CF_enumeration.addEnumeration(unicode_value='Direct value, X', tag='Direct_value_X')
ePresentation.Difference_between_upper_and_lower_temperature_XT2_XT1 = ePresentation._CF_enumeration.addEnumeration(unicode_value='Difference between upper and lower temperature, X(T2)-X(T1)', tag='Difference_between_upper_and_lower_temperature_XT2_XT1')
ePresentation.Difference_between_upper_and_lower_pressure_XP2_XP1 = ePresentation._CF_enumeration.addEnumeration(unicode_value='Difference between upper and lower pressure, X(P2)-X(P1)', tag='Difference_between_upper_and_lower_pressure_XP2_XP1')
ePresentation.Mean_between_upper_and_lower_temperature_XT2XT12 = ePresentation._CF_enumeration.addEnumeration(unicode_value='Mean between upper and lower temperature, [X(T2)+X(T1)]/2', tag='Mean_between_upper_and_lower_temperature_XT2XT12')
ePresentation.Difference_with_the_reference_state_X_XREF = ePresentation._CF_enumeration.addEnumeration(unicode_value='Difference with the reference state, X-X(REF)', tag='Difference_with_the_reference_state_X_XREF')
ePresentation.Ratio_with_the_reference_state_XXREF = ePresentation._CF_enumeration.addEnumeration(unicode_value='Ratio with the reference state, X/X(REF)', tag='Ratio_with_the_reference_state_XXREF')
ePresentation.Ratio_of_difference_with_the_reference_state_to_the_reference_state_X_XREFXREF = ePresentation._CF_enumeration.addEnumeration(unicode_value='Ratio of difference with the reference state to the reference state, [X-X(REF)]/X(REF)', tag='Ratio_of_difference_with_the_reference_state_to_the_reference_state_X_XREFXREF')
ePresentation._InitializeFacetMap(ePresentation._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ePresentation', ePresentation)
_module_typeBindings.ePresentation = ePresentation

# Atomic simple type: {http://www.iupac.org/namespaces/ThermoML}eRefStateType
class eRefStateType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Type of reference state"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'eRefStateType')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2052, 1)
    _Documentation = 'Type of reference state'
eRefStateType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=eRefStateType, enum_prefix=None)
eRefStateType.Reference_phase_with_the_same_composition_at_fixed_temperature_and_pressure = eRefStateType._CF_enumeration.addEnumeration(unicode_value='Reference phase with the same composition at fixed temperature and pressure', tag='Reference_phase_with_the_same_composition_at_fixed_temperature_and_pressure')
eRefStateType.Reference_phase_with_the_same_composition_temperature_and_pressure = eRefStateType._CF_enumeration.addEnumeration(unicode_value='Reference phase with the same composition, temperature and pressure', tag='Reference_phase_with_the_same_composition_temperature_and_pressure')
eRefStateType.Reference_phase_at_fixed_temperature_and_the_same_pressure = eRefStateType._CF_enumeration.addEnumeration(unicode_value='Reference phase at fixed temperature and the same pressure', tag='Reference_phase_at_fixed_temperature_and_the_same_pressure')
eRefStateType.Reference_phase_at_the_same_temperature_and_fixed_pressure = eRefStateType._CF_enumeration.addEnumeration(unicode_value='Reference phase at the same temperature and fixed pressure', tag='Reference_phase_at_the_same_temperature_and_fixed_pressure')
eRefStateType.Ideal_gas_at_the_same_amount_density_temperature_and_composition = eRefStateType._CF_enumeration.addEnumeration(unicode_value='Ideal gas at the same amount density, temperature, and composition', tag='Ideal_gas_at_the_same_amount_density_temperature_and_composition')
eRefStateType.Ideal_mixture_of_pure_fluid_components_at_the_same_amount_density_temperature_and_composition = eRefStateType._CF_enumeration.addEnumeration(unicode_value='Ideal mixture of pure fluid components at the same amount density, temperature, and composition', tag='Ideal_mixture_of_pure_fluid_components_at_the_same_amount_density_temperature_and_composition')
eRefStateType.Phase_in_equilibrium_with_primary_phase_at_the_same_temperature_and_pressure = eRefStateType._CF_enumeration.addEnumeration(unicode_value='Phase in equilibrium with primary phase at the same temperature and pressure', tag='Phase_in_equilibrium_with_primary_phase_at_the_same_temperature_and_pressure')
eRefStateType.Pure_components_in_the_same_proportion_at_fixed_temperature_and_pressure = eRefStateType._CF_enumeration.addEnumeration(unicode_value='Pure components in the same proportion at fixed temperature and pressure', tag='Pure_components_in_the_same_proportion_at_fixed_temperature_and_pressure')
eRefStateType.Pure_components_in_the_same_proportion_at_the_same_temperature_and_pressure = eRefStateType._CF_enumeration.addEnumeration(unicode_value='Pure components in the same proportion at the same temperature and pressure', tag='Pure_components_in_the_same_proportion_at_the_same_temperature_and_pressure')
eRefStateType.Pure_solvent_at_the_temperature_of_the_same_phase_equilibrium = eRefStateType._CF_enumeration.addEnumeration(unicode_value='Pure solvent at the temperature of the same phase equilibrium', tag='Pure_solvent_at_the_temperature_of_the_same_phase_equilibrium')
eRefStateType.Pure_solvent_at_the_same_temperature_and_pressure = eRefStateType._CF_enumeration.addEnumeration(unicode_value='Pure solvent at the same temperature and pressure', tag='Pure_solvent_at_the_same_temperature_and_pressure')
eRefStateType.Pure_solute_at_the_same_temperature_and_pressure = eRefStateType._CF_enumeration.addEnumeration(unicode_value='Pure solute at the same temperature and pressure', tag='Pure_solute_at_the_same_temperature_and_pressure')
eRefStateType._InitializeFacetMap(eRefStateType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'eRefStateType', eRefStateType)
_module_typeBindings.eRefStateType = eRefStateType

# Atomic simple type: [anonymous]
class STD_ANON_39 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2101, 4)
    _Documentation = None
STD_ANON_39._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_39, enum_prefix=None)
STD_ANON_39.Temperature_K = STD_ANON_39._CF_enumeration.addEnumeration(unicode_value='Temperature, K', tag='Temperature_K')
STD_ANON_39.Upper_temperature_K = STD_ANON_39._CF_enumeration.addEnumeration(unicode_value='Upper temperature, K', tag='Upper_temperature_K')
STD_ANON_39.Lower_temperature_K = STD_ANON_39._CF_enumeration.addEnumeration(unicode_value='Lower temperature, K', tag='Lower_temperature_K')
STD_ANON_39._InitializeFacetMap(STD_ANON_39._CF_enumeration)
_module_typeBindings.STD_ANON_39 = STD_ANON_39

# Atomic simple type: [anonymous]
class STD_ANON_40 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2110, 4)
    _Documentation = None
STD_ANON_40._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_40, enum_prefix=None)
STD_ANON_40.Pressure_kPa = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value='Pressure, kPa', tag='Pressure_kPa')
STD_ANON_40.Partial_pressure_kPa = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value='Partial pressure, kPa', tag='Partial_pressure_kPa')
STD_ANON_40.Upper_pressure_kPa = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value='Upper pressure, kPa', tag='Upper_pressure_kPa')
STD_ANON_40.Lower_pressure_kPa = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value='Lower pressure, kPa', tag='Lower_pressure_kPa')
STD_ANON_40._InitializeFacetMap(STD_ANON_40._CF_enumeration)
_module_typeBindings.STD_ANON_40 = STD_ANON_40

# Atomic simple type: [anonymous]
class STD_ANON_41 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2120, 4)
    _Documentation = None
STD_ANON_41._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_41, enum_prefix=None)
STD_ANON_41.Mole_fraction = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Mole fraction', tag='Mole_fraction')
STD_ANON_41.Mass_fraction = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Mass fraction', tag='Mass_fraction')
STD_ANON_41.Molality_molkg = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Molality, mol/kg', tag='Molality_molkg')
STD_ANON_41.Amount_concentration_molarity_moldm3 = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Amount concentration (molarity), mol/dm3', tag='Amount_concentration_molarity_moldm3')
STD_ANON_41.Volume_fraction = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Volume fraction', tag='Volume_fraction')
STD_ANON_41.Ratio_of_amount_of_solute_to_mass_of_solution_molkg = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Ratio of amount of solute to mass of solution, mol/kg', tag='Ratio_of_amount_of_solute_to_mass_of_solution_molkg')
STD_ANON_41.Ratio_of_mass_of_solute_to_volume_of_solution_kgm3 = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Ratio of mass of solute to volume of solution, kg/m3', tag='Ratio_of_mass_of_solute_to_volume_of_solution_kgm3')
STD_ANON_41.Amount_ratio_of_solute_to_solvent = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Amount ratio of solute to solvent', tag='Amount_ratio_of_solute_to_solvent')
STD_ANON_41.Mass_ratio_of_solute_to_solvent = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Mass ratio of solute to solvent', tag='Mass_ratio_of_solute_to_solvent')
STD_ANON_41.Volume_ratio_of_solute_to_solvent = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Volume ratio of solute to solvent', tag='Volume_ratio_of_solute_to_solvent')
STD_ANON_41.Initial_mole_fraction_of_solute = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Initial mole fraction of solute', tag='Initial_mole_fraction_of_solute')
STD_ANON_41.Final_mole_fraction_of_solute = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Final mole fraction of solute', tag='Final_mole_fraction_of_solute')
STD_ANON_41.Initial_mass_fraction_of_solute = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Initial mass fraction of solute', tag='Initial_mass_fraction_of_solute')
STD_ANON_41.Final_mass_fraction_of_solute = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Final mass fraction of solute', tag='Final_mass_fraction_of_solute')
STD_ANON_41.Initial_molality_of_solute_molkg = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Initial molality of solute, mol/kg', tag='Initial_molality_of_solute_molkg')
STD_ANON_41.Final_molality_of_solute_molkg = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='Final molality of solute, mol/kg', tag='Final_molality_of_solute_molkg')
STD_ANON_41._InitializeFacetMap(STD_ANON_41._CF_enumeration)
_module_typeBindings.STD_ANON_41 = STD_ANON_41

# Atomic simple type: [anonymous]
class STD_ANON_42 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2142, 4)
    _Documentation = None
STD_ANON_42._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_42, enum_prefix=None)
STD_ANON_42.Solvent_Mole_fraction = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='Solvent: Mole fraction', tag='Solvent_Mole_fraction')
STD_ANON_42.Solvent_Mass_fraction = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='Solvent: Mass fraction', tag='Solvent_Mass_fraction')
STD_ANON_42.Solvent_Volume_fraction = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='Solvent: Volume fraction', tag='Solvent_Volume_fraction')
STD_ANON_42.Solvent_Molality_molkg = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='Solvent: Molality, mol/kg', tag='Solvent_Molality_molkg')
STD_ANON_42.Solvent_Amount_concentration_molarity_moldm3 = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='Solvent: Amount concentration (molarity), mol/dm3', tag='Solvent_Amount_concentration_molarity_moldm3')
STD_ANON_42.Solvent_Amount_ratio_of_component_to_other_component_of_binary_solvent = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='Solvent: Amount ratio of component to other component of binary solvent', tag='Solvent_Amount_ratio_of_component_to_other_component_of_binary_solvent')
STD_ANON_42.Solvent_Mass_ratio_of_component_to_other_component_of_binary_solvent = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='Solvent: Mass ratio of component to other component of binary solvent', tag='Solvent_Mass_ratio_of_component_to_other_component_of_binary_solvent')
STD_ANON_42.Solvent_Volume_ratio_of_component_to_other_component_of_binary_solvent = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='Solvent: Volume ratio of component to other component of binary solvent', tag='Solvent_Volume_ratio_of_component_to_other_component_of_binary_solvent')
STD_ANON_42.Solvent_Ratio_of_amount_of_component_to_mass_of_solvent_molkg = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='Solvent: Ratio of amount of component to mass of solvent, mol/kg', tag='Solvent_Ratio_of_amount_of_component_to_mass_of_solvent_molkg')
STD_ANON_42.Solvent_Ratio_of_component_mass_to_volume_of_solvent_kgm3 = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='Solvent: Ratio of component mass to volume of solvent, kg/m3', tag='Solvent_Ratio_of_component_mass_to_volume_of_solvent_kgm3')
STD_ANON_42._InitializeFacetMap(STD_ANON_42._CF_enumeration)
_module_typeBindings.STD_ANON_42 = STD_ANON_42

# Atomic simple type: [anonymous]
class STD_ANON_43 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2158, 4)
    _Documentation = None
STD_ANON_43._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_43, enum_prefix=None)
STD_ANON_43.Wavelength_nm = STD_ANON_43._CF_enumeration.addEnumeration(unicode_value='Wavelength, nm', tag='Wavelength_nm')
STD_ANON_43.Frequency_MHz = STD_ANON_43._CF_enumeration.addEnumeration(unicode_value='Frequency, MHz', tag='Frequency_MHz')
STD_ANON_43.Molar_volume_m3mol = STD_ANON_43._CF_enumeration.addEnumeration(unicode_value='Molar volume, m3/mol', tag='Molar_volume_m3mol')
STD_ANON_43.Specific_volume_m3kg = STD_ANON_43._CF_enumeration.addEnumeration(unicode_value='Specific volume, m3/kg', tag='Specific_volume_m3kg')
STD_ANON_43.Mass_density_kgm3 = STD_ANON_43._CF_enumeration.addEnumeration(unicode_value='Mass density, kg/m3', tag='Mass_density_kgm3')
STD_ANON_43.Amount_density_molm3 = STD_ANON_43._CF_enumeration.addEnumeration(unicode_value='Amount density, mol/m3', tag='Amount_density_molm3')
STD_ANON_43.Molar_entropy_JKmol = STD_ANON_43._CF_enumeration.addEnumeration(unicode_value='Molar entropy, J/K/mol', tag='Molar_entropy_JKmol')
STD_ANON_43.Relative_activity = STD_ANON_43._CF_enumeration.addEnumeration(unicode_value='(Relative) activity', tag='Relative_activity')
STD_ANON_43.Activity_coefficient = STD_ANON_43._CF_enumeration.addEnumeration(unicode_value='Activity coefficient', tag='Activity_coefficient')
STD_ANON_43._InitializeFacetMap(STD_ANON_43._CF_enumeration)
_module_typeBindings.STD_ANON_43 = STD_ANON_43

# Atomic simple type: [anonymous]
class STD_ANON_44 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2177, 4)
    _Documentation = None
STD_ANON_44._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_44, enum_prefix=None)
STD_ANON_44.pH = STD_ANON_44._CF_enumeration.addEnumeration(unicode_value='pH', tag='pH')
STD_ANON_44.Ionic_strength_molality_basis_molkg = STD_ANON_44._CF_enumeration.addEnumeration(unicode_value='Ionic strength (molality basis), mol/kg', tag='Ionic_strength_molality_basis_molkg')
STD_ANON_44.Ionic_strength_amount_concentration_basis_moldm3 = STD_ANON_44._CF_enumeration.addEnumeration(unicode_value='Ionic strength (amount concentration basis), mol/dm3', tag='Ionic_strength_amount_concentration_basis_moldm3')
STD_ANON_44.pC_amount_concentration_basis = STD_ANON_44._CF_enumeration.addEnumeration(unicode_value='pC (amount concentration basis)', tag='pC_amount_concentration_basis')
STD_ANON_44.Solvent_pC_amount_concentration_basis = STD_ANON_44._CF_enumeration.addEnumeration(unicode_value='Solvent: pC (amount concentration basis)', tag='Solvent_pC_amount_concentration_basis')
STD_ANON_44._InitializeFacetMap(STD_ANON_44._CF_enumeration)
_module_typeBindings.STD_ANON_44 = STD_ANON_44

# Atomic simple type: [anonymous]
class STD_ANON_45 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2188, 8)
    _Documentation = None
STD_ANON_45._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_45, enum_prefix=None)
STD_ANON_45.Amount_mol = STD_ANON_45._CF_enumeration.addEnumeration(unicode_value='Amount, mol', tag='Amount_mol')
STD_ANON_45.Mass_kg = STD_ANON_45._CF_enumeration.addEnumeration(unicode_value='Mass, kg', tag='Mass_kg')
STD_ANON_45._InitializeFacetMap(STD_ANON_45._CF_enumeration)
_module_typeBindings.STD_ANON_45 = STD_ANON_45

# Atomic simple type: [anonymous]
class STD_ANON_46 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2204, 4)
    _Documentation = None
STD_ANON_46._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_46, enum_prefix=None)
STD_ANON_46.Specified_by_the_manufacturer = STD_ANON_46._CF_enumeration.addEnumeration(unicode_value='Specified by the manufacturer', tag='Specified_by_the_manufacturer')
STD_ANON_46.Certified_or_calibrated_by_a_third_party = STD_ANON_46._CF_enumeration.addEnumeration(unicode_value='Certified or calibrated by a third party', tag='Certified_or_calibrated_by_a_third_party')
STD_ANON_46.Calibrated_by_the_experimentalist = STD_ANON_46._CF_enumeration.addEnumeration(unicode_value='Calibrated by the experimentalist', tag='Calibrated_by_the_experimentalist')
STD_ANON_46._InitializeFacetMap(STD_ANON_46._CF_enumeration)
_module_typeBindings.STD_ANON_46 = STD_ANON_46

# Atomic simple type: [anonymous]
class STD_ANON_47 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2224, 4)
    _Documentation = None
STD_ANON_47._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_47, enum_prefix=None)
STD_ANON_47.Specified_by_the_manufacturer = STD_ANON_47._CF_enumeration.addEnumeration(unicode_value='Specified by the manufacturer', tag='Specified_by_the_manufacturer')
STD_ANON_47.Certified_or_calibrated_by_a_third_party = STD_ANON_47._CF_enumeration.addEnumeration(unicode_value='Certified or calibrated by a third party', tag='Certified_or_calibrated_by_a_third_party')
STD_ANON_47.Calibrated_by_the_experimentalist = STD_ANON_47._CF_enumeration.addEnumeration(unicode_value='Calibrated by the experimentalist', tag='Calibrated_by_the_experimentalist')
STD_ANON_47._InitializeFacetMap(STD_ANON_47._CF_enumeration)
_module_typeBindings.STD_ANON_47 = STD_ANON_47

# Atomic simple type: [anonymous]
class STD_ANON_48 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2243, 4)
    _Documentation = None
STD_ANON_48._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_48, enum_prefix=None)
STD_ANON_48.Standard_deviation_of_a_single_value_biased = STD_ANON_48._CF_enumeration.addEnumeration(unicode_value='Standard deviation of a single value (biased)', tag='Standard_deviation_of_a_single_value_biased')
STD_ANON_48.Standard_deviation_of_a_single_value_unbiased = STD_ANON_48._CF_enumeration.addEnumeration(unicode_value='Standard deviation of a single value (unbiased)', tag='Standard_deviation_of_a_single_value_unbiased')
STD_ANON_48.Standard_deviation_of_the_mean = STD_ANON_48._CF_enumeration.addEnumeration(unicode_value='Standard deviation of the mean', tag='Standard_deviation_of_the_mean')
STD_ANON_48.Other = STD_ANON_48._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_48._InitializeFacetMap(STD_ANON_48._CF_enumeration)
_module_typeBindings.STD_ANON_48 = STD_ANON_48

# Atomic simple type: [anonymous]
class STD_ANON_49 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2264, 4)
    _Documentation = None
STD_ANON_49._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_49, enum_prefix=None)
STD_ANON_49.Standard_deviation_of_a_single_value_biased = STD_ANON_49._CF_enumeration.addEnumeration(unicode_value='Standard deviation of a single value (biased)', tag='Standard_deviation_of_a_single_value_biased')
STD_ANON_49.Standard_deviation_of_a_single_value_unbiased = STD_ANON_49._CF_enumeration.addEnumeration(unicode_value='Standard deviation of a single value (unbiased)', tag='Standard_deviation_of_a_single_value_unbiased')
STD_ANON_49.Standard_deviation_of_the_mean = STD_ANON_49._CF_enumeration.addEnumeration(unicode_value='Standard deviation of the mean', tag='Standard_deviation_of_the_mean')
STD_ANON_49.Other = STD_ANON_49._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_49._InitializeFacetMap(STD_ANON_49._CF_enumeration)
_module_typeBindings.STD_ANON_49 = STD_ANON_49

# Atomic simple type: [anonymous]
class STD_ANON_50 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2333, 5)
    _Documentation = None
STD_ANON_50._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_50, enum_prefix=None)
STD_ANON_50.Propagation_of_evaluated_standard_uncertainties = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='Propagation of evaluated standard uncertainties', tag='Propagation_of_evaluated_standard_uncertainties')
STD_ANON_50.Comparison_with_reference_property_values = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='Comparison with reference property values', tag='Comparison_with_reference_property_values')
STD_ANON_50._InitializeFacetMap(STD_ANON_50._CF_enumeration)
_module_typeBindings.STD_ANON_50 = STD_ANON_50

# Atomic simple type: [anonymous]
class STD_ANON_51 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2499, 5)
    _Documentation = None
STD_ANON_51._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_51, enum_prefix=None)
STD_ANON_51.Ab_initio = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='Ab initio', tag='Ab_initio')
STD_ANON_51.Molecular_dynamics = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='Molecular dynamics', tag='Molecular_dynamics')
STD_ANON_51.Semiempirical_quantum_methods = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='Semiempirical quantum methods', tag='Semiempirical_quantum_methods')
STD_ANON_51.Molecular_mechanics = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='Molecular mechanics', tag='Molecular_mechanics')
STD_ANON_51.Statistical_mechanics = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='Statistical mechanics', tag='Statistical_mechanics')
STD_ANON_51.Corresponding_states = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='Corresponding states', tag='Corresponding_states')
STD_ANON_51.Correlation = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='Correlation', tag='Correlation')
STD_ANON_51.Group_contribution = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='Group contribution', tag='Group_contribution')
STD_ANON_51._InitializeFacetMap(STD_ANON_51._CF_enumeration)
_module_typeBindings.STD_ANON_51 = STD_ANON_51

# Atomic simple type: [anonymous]
class STD_ANON_52 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2527, 7)
    _Documentation = None
STD_ANON_52._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_52, enum_prefix=None)
STD_ANON_52.ThermoML_Antoine_VaporPressure = STD_ANON_52._CF_enumeration.addEnumeration(unicode_value='ThermoML.Antoine.VaporPressure', tag='ThermoML_Antoine_VaporPressure')
STD_ANON_52.ThermoML_CustomExpansion = STD_ANON_52._CF_enumeration.addEnumeration(unicode_value='ThermoML.CustomExpansion', tag='ThermoML_CustomExpansion')
STD_ANON_52.ThermoML_Helmholtz3General_EOS = STD_ANON_52._CF_enumeration.addEnumeration(unicode_value='ThermoML.Helmholtz3General.EOS', tag='ThermoML_Helmholtz3General_EOS')
STD_ANON_52.ThermoML_Helmholtz4General_EOS = STD_ANON_52._CF_enumeration.addEnumeration(unicode_value='ThermoML.Helmholtz4General.EOS', tag='ThermoML_Helmholtz4General_EOS')
STD_ANON_52.ThermoML_WagnerLinear_VaporPressure = STD_ANON_52._CF_enumeration.addEnumeration(unicode_value='ThermoML.WagnerLinear.VaporPressure', tag='ThermoML_WagnerLinear_VaporPressure')
STD_ANON_52.ThermoML_Wagner25Linear_VaporPressure = STD_ANON_52._CF_enumeration.addEnumeration(unicode_value='ThermoML.Wagner25Linear.VaporPressure', tag='ThermoML_Wagner25Linear_VaporPressure')
STD_ANON_52.ThermoML_Wagner36Linear_VaporPressure = STD_ANON_52._CF_enumeration.addEnumeration(unicode_value='ThermoML.Wagner36Linear.VaporPressure', tag='ThermoML_Wagner36Linear_VaporPressure')
STD_ANON_52.ThermoML_PolynomialExpansion = STD_ANON_52._CF_enumeration.addEnumeration(unicode_value='ThermoML.PolynomialExpansion', tag='ThermoML_PolynomialExpansion')
STD_ANON_52.ThermoML_SpanWagner12Nonpolar_EOS = STD_ANON_52._CF_enumeration.addEnumeration(unicode_value='ThermoML.SpanWagner12Nonpolar.EOS', tag='ThermoML_SpanWagner12Nonpolar_EOS')
STD_ANON_52.ThermoML_SpanWagner12Polar_EOS = STD_ANON_52._CF_enumeration.addEnumeration(unicode_value='ThermoML.SpanWagner12Polar.EOS', tag='ThermoML_SpanWagner12Polar_EOS')
STD_ANON_52._InitializeFacetMap(STD_ANON_52._CF_enumeration)
_module_typeBindings.STD_ANON_52 = STD_ANON_52

# Atomic simple type: {http://www.iupac.org/namespaces/ThermoML}MulticomponentType
class MulticomponentType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MulticomponentType')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2633, 1)
    _Documentation = None
MulticomponentType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MulticomponentType, enum_prefix=None)
MulticomponentType.alloy = MulticomponentType._CF_enumeration.addEnumeration(unicode_value='alloy', tag='alloy')
MulticomponentType.clathrate = MulticomponentType._CF_enumeration.addEnumeration(unicode_value='clathrate', tag='clathrate')
MulticomponentType.complex = MulticomponentType._CF_enumeration.addEnumeration(unicode_value='complex', tag='complex')
MulticomponentType.crystal = MulticomponentType._CF_enumeration.addEnumeration(unicode_value='crystal', tag='crystal')
MulticomponentType.solution = MulticomponentType._CF_enumeration.addEnumeration(unicode_value='solution', tag='solution')
MulticomponentType._InitializeFacetMap(MulticomponentType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MulticomponentType', MulticomponentType)
_module_typeBindings.MulticomponentType = MulticomponentType

# Atomic simple type: {http://www.iupac.org/namespaces/ThermoML}MulticomponentComposition
class MulticomponentComposition (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MulticomponentComposition')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2645, 1)
    _Documentation = None
MulticomponentComposition._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MulticomponentComposition, enum_prefix=None)
MulticomponentComposition.number_of_molecules = MulticomponentComposition._CF_enumeration.addEnumeration(unicode_value='number of molecules', tag='number_of_molecules')
MulticomponentComposition.mole_fraction = MulticomponentComposition._CF_enumeration.addEnumeration(unicode_value='mole fraction', tag='mole_fraction')
MulticomponentComposition.mass_fraction = MulticomponentComposition._CF_enumeration.addEnumeration(unicode_value='mass fraction', tag='mass_fraction')
MulticomponentComposition._InitializeFacetMap(MulticomponentComposition._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MulticomponentComposition', MulticomponentComposition)
_module_typeBindings.MulticomponentComposition = MulticomponentComposition

# Complex type {http://www.iupac.org/namespaces/ThermoML}DataReport with content type ELEMENT_ONLY
class DataReport_ (pyxb.binding.basis.complexTypeDefinition):
    """DataReport complex type"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataReport')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}Version uses Python identifier Version
    __Version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Version'), 'Version', '__httpwww_iupac_orgnamespacesThermoML_DataReport__httpwww_iupac_orgnamespacesThermoMLVersion', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 13, 3), )

    
    Version = property(__Version.value, __Version.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Citation uses Python identifier Citation
    __Citation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Citation'), 'Citation', '__httpwww_iupac_orgnamespacesThermoML_DataReport__httpwww_iupac_orgnamespacesThermoMLCitation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 21, 3), )

    
    Citation = property(__Citation.value, __Citation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Compound uses Python identifier Compound
    __Compound = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Compound'), 'Compound', '__httpwww_iupac_orgnamespacesThermoML_DataReport__httpwww_iupac_orgnamespacesThermoMLCompound', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 264, 1), )

    
    Compound = property(__Compound.value, __Compound.set, None, 'Material component characteristics that serves to identify the component')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PureOrMixtureData uses Python identifier PureOrMixtureData
    __PureOrMixtureData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PureOrMixtureData'), 'PureOrMixtureData', '__httpwww_iupac_orgnamespacesThermoML_DataReport__httpwww_iupac_orgnamespacesThermoMLPureOrMixtureData', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 532, 1), )

    
    PureOrMixtureData = property(__PureOrMixtureData.value, __PureOrMixtureData.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ReactionData uses Python identifier ReactionData
    __ReactionData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReactionData'), 'ReactionData', '__httpwww_iupac_orgnamespacesThermoML_DataReport__httpwww_iupac_orgnamespacesThermoMLReactionData', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1450, 1), )

    
    ReactionData = property(__ReactionData.value, __ReactionData.set, None, None)

    _ElementMap.update({
        __Version.name() : __Version,
        __Citation.name() : __Citation,
        __Compound.name() : __Compound,
        __PureOrMixtureData.name() : __PureOrMixtureData,
        __ReactionData.name() : __ReactionData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DataReport_ = DataReport_
Namespace.addCategoryObject('typeBinding', 'DataReport', DataReport_)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 14, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nVersionMajor uses Python identifier nVersionMajor
    __nVersionMajor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nVersionMajor'), 'nVersionMajor', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_httpwww_iupac_orgnamespacesThermoMLnVersionMajor', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 16, 6), )

    
    nVersionMajor = property(__nVersionMajor.value, __nVersionMajor.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nVersionMinor uses Python identifier nVersionMinor
    __nVersionMinor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nVersionMinor'), 'nVersionMinor', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_httpwww_iupac_orgnamespacesThermoMLnVersionMinor', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 17, 6), )

    
    nVersionMinor = property(__nVersionMinor.value, __nVersionMinor.set, None, None)

    _ElementMap.update({
        __nVersionMajor.name() : __nVersionMajor,
        __nVersionMinor.name() : __nVersionMinor
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """TRC Reference Identifier"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 34, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}yrYrPub uses Python identifier yrYrPub
    __yrYrPub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'yrYrPub'), 'yrYrPub', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON__httpwww_iupac_orgnamespacesThermoMLyrYrPub', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 36, 4), )

    
    yrYrPub = property(__yrYrPub.value, __yrYrPub.set, None, 'Integer year of publication')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sAuthor1 uses Python identifier sAuthor1
    __sAuthor1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sAuthor1'), 'sAuthor1', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON__httpwww_iupac_orgnamespacesThermoMLsAuthor1', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 41, 4), )

    
    sAuthor1 = property(__sAuthor1.value, __sAuthor1.set, None, 'First 3 characters of Author 1 last name')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sAuthor2 uses Python identifier sAuthor2
    __sAuthor2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sAuthor2'), 'sAuthor2', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON__httpwww_iupac_orgnamespacesThermoMLsAuthor2', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 46, 4), )

    
    sAuthor2 = property(__sAuthor2.value, __sAuthor2.set, None, 'First 3 characters of Author 2 last name')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nAuthorn uses Python identifier nAuthorn
    __nAuthorn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nAuthorn'), 'nAuthorn', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON__httpwww_iupac_orgnamespacesThermoMLnAuthorn', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 51, 4), )

    
    nAuthorn = property(__nAuthorn.value, __nAuthorn.set, None, 'Integer identifier to distinguish conflicts')

    _ElementMap.update({
        __yrYrPub.name() : __yrYrPub,
        __sAuthor1.name() : __sAuthor1,
        __sAuthor2.name() : __sAuthor2,
        __nAuthorn.name() : __nAuthorn
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_ = CTD_ANON_


# Complex type {http://www.iupac.org/namespaces/ThermoML}CitationType with content type ELEMENT_ONLY
class CitationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.iupac.org/namespaces/ThermoML}CitationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CitationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 62, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}TRCRefID uses Python identifier TRCRefID
    __TRCRefID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TRCRefID'), 'TRCRefID', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLTRCRefID', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 30, 1), )

    
    TRCRefID = property(__TRCRefID.value, __TRCRefID.set, None, 'TRC Reference Identifier')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eType uses Python identifier eType
    __eType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eType'), 'eType', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLeType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 65, 3), )

    
    eType = property(__eType.value, __eType.set, None, 'The type of publication')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eSourceType uses Python identifier eSourceType
    __eSourceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eSourceType'), 'eSourceType', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLeSourceType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 84, 3), )

    
    eSourceType = property(__eSourceType.value, __eSourceType.set, None, 'The source status type for a citation')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sDocumentOrigin uses Python identifier sDocumentOrigin
    __sDocumentOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sDocumentOrigin'), 'sDocumentOrigin', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLsDocumentOrigin', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 96, 3), )

    
    sDocumentOrigin = property(__sDocumentOrigin.value, __sDocumentOrigin.set, None, 'Company, institution, or conference name')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sAuthor uses Python identifier sAuthor
    __sAuthor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sAuthor'), 'sAuthor', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLsAuthor', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 101, 3), )

    
    sAuthor = property(__sAuthor.value, __sAuthor.set, None, 'Author of publication')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sPubName uses Python identifier sPubName
    __sPubName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sPubName'), 'sPubName', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLsPubName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 106, 3), )

    
    sPubName = property(__sPubName.value, __sPubName.set, None, 'Name of the publication.')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}yrPubYr uses Python identifier yrPubYr
    __yrPubYr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'yrPubYr'), 'yrPubYr', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLyrPubYr', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 111, 3), )

    
    yrPubYr = property(__yrPubYr.value, __yrPubYr.set, None, 'Publication year')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}dateCit uses Python identifier dateCit
    __dateCit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateCit'), 'dateCit', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLdateCit', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 116, 3), )

    
    dateCit = property(__dateCit.value, __dateCit.set, None, 'Date of the citation')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sTitle uses Python identifier sTitle
    __sTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sTitle'), 'sTitle', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLsTitle', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 121, 3), )

    
    sTitle = property(__sTitle.value, __sTitle.set, None, 'Title of the publication')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sAbstract uses Python identifier sAbstract
    __sAbstract = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sAbstract'), 'sAbstract', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLsAbstract', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 126, 3), )

    
    sAbstract = property(__sAbstract.value, __sAbstract.set, None, 'An abstract of the publication')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sKeyword uses Python identifier sKeyword
    __sKeyword = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sKeyword'), 'sKeyword', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLsKeyword', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 131, 3), )

    
    sKeyword = property(__sKeyword.value, __sKeyword.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eLanguage uses Python identifier eLanguage
    __eLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eLanguage'), 'eLanguage', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLeLanguage', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 132, 3), )

    
    eLanguage = property(__eLanguage.value, __eLanguage.set, None, 'Language of publication')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sDOI uses Python identifier sDOI
    __sDOI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sDOI'), 'sDOI', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLsDOI', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 149, 3), )

    
    sDOI = property(__sDOI.value, __sDOI.set, None, 'DOI')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}urlCit uses Python identifier urlCit
    __urlCit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'urlCit'), 'urlCit', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLurlCit', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 154, 3), )

    
    urlCit = property(__urlCit.value, __urlCit.set, None, 'URL to the publication')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sCASCit uses Python identifier sCASCit
    __sCASCit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sCASCit'), 'sCASCit', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLsCASCit', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 159, 3), )

    
    sCASCit = property(__sCASCit.value, __sCASCit.set, None, 'The Chemical Abstracts Service citation')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sIDNum uses Python identifier sIDNum
    __sIDNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sIDNum'), 'sIDNum', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLsIDNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 164, 3), )

    
    sIDNum = property(__sIDNum.value, __sIDNum.set, None, 'Identification number, e.g., a patent number or a document number')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sLocation uses Python identifier sLocation
    __sLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sLocation'), 'sLocation', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLsLocation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 169, 3), )

    
    sLocation = property(__sLocation.value, __sLocation.set, None, 'Reference to a location')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sVol uses Python identifier sVol
    __sVol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sVol'), 'sVol', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLsVol', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 174, 3), )

    
    sVol = property(__sVol.value, __sVol.set, None, 'Volume number')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sPage uses Python identifier sPage
    __sPage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sPage'), 'sPage', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLsPage', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 179, 3), )

    
    sPage = property(__sPage.value, __sPage.set, None, 'Page range where the publication can be found')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}book uses Python identifier book
    __book = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'book'), 'book', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLbook', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 185, 4), )

    
    book = property(__book.value, __book.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}journal uses Python identifier journal
    __journal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'journal'), 'journal', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLjournal', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 216, 4), )

    
    journal = property(__journal.value, __journal.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}thesis uses Python identifier thesis
    __thesis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'thesis'), 'thesis', '__httpwww_iupac_orgnamespacesThermoML_CitationType_httpwww_iupac_orgnamespacesThermoMLthesis', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 237, 4), )

    
    thesis = property(__thesis.value, __thesis.set, None, None)

    _ElementMap.update({
        __TRCRefID.name() : __TRCRefID,
        __eType.name() : __eType,
        __eSourceType.name() : __eSourceType,
        __sDocumentOrigin.name() : __sDocumentOrigin,
        __sAuthor.name() : __sAuthor,
        __sPubName.name() : __sPubName,
        __yrPubYr.name() : __yrPubYr,
        __dateCit.name() : __dateCit,
        __sTitle.name() : __sTitle,
        __sAbstract.name() : __sAbstract,
        __sKeyword.name() : __sKeyword,
        __eLanguage.name() : __eLanguage,
        __sDOI.name() : __sDOI,
        __urlCit.name() : __urlCit,
        __sCASCit.name() : __sCASCit,
        __sIDNum.name() : __sIDNum,
        __sLocation.name() : __sLocation,
        __sVol.name() : __sVol,
        __sPage.name() : __sPage,
        __book.name() : __book,
        __journal.name() : __journal,
        __thesis.name() : __thesis
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CitationType = CitationType
Namespace.addCategoryObject('typeBinding', 'CitationType', CitationType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 186, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}sChapter uses Python identifier sChapter
    __sChapter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sChapter'), 'sChapter', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_2_httpwww_iupac_orgnamespacesThermoMLsChapter', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 188, 7), )

    
    sChapter = property(__sChapter.value, __sChapter.set, None, 'Chapter number')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sEdition uses Python identifier sEdition
    __sEdition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sEdition'), 'sEdition', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_2_httpwww_iupac_orgnamespacesThermoMLsEdition', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 193, 7), )

    
    sEdition = property(__sEdition.value, __sEdition.set, None, 'Edition number of the book')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sEditor uses Python identifier sEditor
    __sEditor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sEditor'), 'sEditor', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_2_httpwww_iupac_orgnamespacesThermoMLsEditor', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 198, 7), )

    
    sEditor = property(__sEditor.value, __sEditor.set, None, 'Editor of the book')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sISBN uses Python identifier sISBN
    __sISBN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sISBN'), 'sISBN', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_2_httpwww_iupac_orgnamespacesThermoMLsISBN', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 203, 7), )

    
    sISBN = property(__sISBN.value, __sISBN.set, None, 'The International Standard Book Number')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sPublisher uses Python identifier sPublisher
    __sPublisher = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sPublisher'), 'sPublisher', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_2_httpwww_iupac_orgnamespacesThermoMLsPublisher', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 208, 7), )

    
    sPublisher = property(__sPublisher.value, __sPublisher.set, None, 'Publisher name and city')

    _ElementMap.update({
        __sChapter.name() : __sChapter,
        __sEdition.name() : __sEdition,
        __sEditor.name() : __sEditor,
        __sISBN.name() : __sISBN,
        __sPublisher.name() : __sPublisher
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_2 = CTD_ANON_2


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 217, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}sISSN uses Python identifier sISSN
    __sISSN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sISSN'), 'sISSN', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_3_httpwww_iupac_orgnamespacesThermoMLsISSN', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 219, 7), )

    
    sISSN = property(__sISSN.value, __sISSN.set, None, 'The International Standard Subscription Number')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sIssue uses Python identifier sIssue
    __sIssue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sIssue'), 'sIssue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_3_httpwww_iupac_orgnamespacesThermoMLsIssue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 224, 7), )

    
    sIssue = property(__sIssue.value, __sIssue.set, None, 'Issue number, usually indicates month')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sCODEN uses Python identifier sCODEN
    __sCODEN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sCODEN'), 'sCODEN', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_3_httpwww_iupac_orgnamespacesThermoMLsCODEN', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 229, 7), )

    
    sCODEN = property(__sCODEN.value, __sCODEN.set, None, 'The CODEN identification of the journal')

    _ElementMap.update({
        __sISSN.name() : __sISSN,
        __sIssue.name() : __sIssue,
        __sCODEN.name() : __sCODEN
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_3 = CTD_ANON_3


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 238, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}sDeg uses Python identifier sDeg
    __sDeg = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sDeg'), 'sDeg', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_4_httpwww_iupac_orgnamespacesThermoMLsDeg', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 240, 7), )

    
    sDeg = property(__sDeg.value, __sDeg.set, None, 'Academic degree designation, e.g., MS or PhD')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sDegInst uses Python identifier sDegInst
    __sDegInst = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sDegInst'), 'sDegInst', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_4_httpwww_iupac_orgnamespacesThermoMLsDegInst', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 245, 7), )

    
    sDegInst = property(__sDegInst.value, __sDegInst.set, None, 'Academic degree granting institution')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sUMIPubNum uses Python identifier sUMIPubNum
    __sUMIPubNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sUMIPubNum'), 'sUMIPubNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_4_httpwww_iupac_orgnamespacesThermoMLsUMIPubNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 250, 7), )

    
    sUMIPubNum = property(__sUMIPubNum.value, __sUMIPubNum.set, None, 'University Microfilms International Publication Number')

    _ElementMap.update({
        __sDeg.name() : __sDeg,
        __sDegInst.name() : __sDegInst,
        __sUMIPubNum.name() : __sUMIPubNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_4 = CTD_ANON_4


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Material component characteristics that serves to identify the component"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 268, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 270, 4), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, 'Index to link compounds to data')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 275, 4), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPubChemID uses Python identifier nPubChemID
    __nPubChemID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPubChemID'), 'nPubChemID', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLnPubChemID', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 286, 4), )

    
    nPubChemID = property(__nPubChemID.value, __nPubChemID.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sStandardInChI uses Python identifier sStandardInChI
    __sStandardInChI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sStandardInChI'), 'sStandardInChI', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLsStandardInChI', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 287, 4), )

    
    sStandardInChI = property(__sStandardInChI.value, __sStandardInChI.set, None, 'IUPAC International Chemical Identifier')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sStandardInChIKey uses Python identifier sStandardInChIKey
    __sStandardInChIKey = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sStandardInChIKey'), 'sStandardInChIKey', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLsStandardInChIKey', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 293, 4), )

    
    sStandardInChIKey = property(__sStandardInChIKey.value, __sStandardInChIKey.set, None, '')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sOrgID uses Python identifier sOrgID
    __sOrgID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sOrgID'), 'sOrgID', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLsOrgID', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 298, 4), )

    
    sOrgID = property(__sOrgID.value, __sOrgID.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sCASName uses Python identifier sCASName
    __sCASName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sCASName'), 'sCASName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLsCASName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 306, 4), )

    
    sCASName = property(__sCASName.value, __sCASName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sIUPACName uses Python identifier sIUPACName
    __sIUPACName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sIUPACName'), 'sIUPACName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLsIUPACName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 307, 4), )

    
    sIUPACName = property(__sIUPACName.value, __sIUPACName.set, None, 'International Union of Physics and Applied Chemistry name')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sCommonName uses Python identifier sCommonName
    __sCommonName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sCommonName'), 'sCommonName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLsCommonName', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 313, 4), )

    
    sCommonName = property(__sCommonName.value, __sCommonName.set, None, 'Common name')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sFormulaMolec uses Python identifier sFormulaMolec
    __sFormulaMolec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sFormulaMolec'), 'sFormulaMolec', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLsFormulaMolec', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 319, 4), )

    
    sFormulaMolec = property(__sFormulaMolec.value, __sFormulaMolec.set, None, 'Chemical molecular formula')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sSmiles uses Python identifier sSmiles
    __sSmiles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sSmiles'), 'sSmiles', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLsSmiles', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 325, 4), )

    
    sSmiles = property(__sSmiles.value, __sSmiles.set, None, 'SMILES notation')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}polymer uses Python identifier polymer
    __polymer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'polymer'), 'polymer', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLpolymer', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 332, 5), )

    
    polymer = property(__polymer.value, __polymer.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ion uses Python identifier ion
    __ion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ion'), 'ion', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLion', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 368, 5), )

    
    ion = property(__ion.value, __ion.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}biomaterial uses Python identifier biomaterial
    __biomaterial = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'biomaterial'), 'biomaterial', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLbiomaterial', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 378, 5), )

    
    biomaterial = property(__biomaterial.value, __biomaterial.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}MulticomponentSubstance uses Python identifier MulticomponentSubstance
    __MulticomponentSubstance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MulticomponentSubstance'), 'MulticomponentSubstance', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLMulticomponentSubstance', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 389, 5), )

    
    MulticomponentSubstance = property(__MulticomponentSubstance.value, __MulticomponentSubstance.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eSpeciationState uses Python identifier eSpeciationState
    __eSpeciationState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eSpeciationState'), 'eSpeciationState', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLeSpeciationState', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 409, 4), )

    
    eSpeciationState = property(__eSpeciationState.value, __eSpeciationState.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Sample uses Python identifier Sample
    __Sample = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Sample'), 'Sample', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_5_httpwww_iupac_orgnamespacesThermoMLSample', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 424, 1), )

    
    Sample = property(__Sample.value, __Sample.set, None, 'sample')

    _ElementMap.update({
        __nCompIndex.name() : __nCompIndex,
        __RegNum.name() : __RegNum,
        __nPubChemID.name() : __nPubChemID,
        __sStandardInChI.name() : __sStandardInChI,
        __sStandardInChIKey.name() : __sStandardInChIKey,
        __sOrgID.name() : __sOrgID,
        __sCASName.name() : __sCASName,
        __sIUPACName.name() : __sIUPACName,
        __sCommonName.name() : __sCommonName,
        __sFormulaMolec.name() : __sFormulaMolec,
        __sSmiles.name() : __sSmiles,
        __polymer.name() : __polymer,
        __ion.name() : __ion,
        __biomaterial.name() : __biomaterial,
        __MulticomponentSubstance.name() : __MulticomponentSubstance,
        __eSpeciationState.name() : __eSpeciationState,
        __Sample.name() : __Sample
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_5 = CTD_ANON_5


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 276, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCASRNum uses Python identifier nCASRNum
    __nCASRNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCASRNum'), 'nCASRNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_6_httpwww_iupac_orgnamespacesThermoMLnCASRNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 278, 7), )

    
    nCASRNum = property(__nCASRNum.value, __nCASRNum.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nOrgNum uses Python identifier nOrgNum
    __nOrgNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nOrgNum'), 'nOrgNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_6_httpwww_iupac_orgnamespacesThermoMLnOrgNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 280, 8), )

    
    nOrgNum = property(__nOrgNum.value, __nOrgNum.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sOrganization uses Python identifier sOrganization
    __sOrganization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sOrganization'), 'sOrganization', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_6_httpwww_iupac_orgnamespacesThermoMLsOrganization', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 281, 8), )

    
    sOrganization = property(__sOrganization.value, __sOrganization.set, None, None)

    _ElementMap.update({
        __nCASRNum.name() : __nCASRNum,
        __nOrgNum.name() : __nOrgNum,
        __sOrganization.name() : __sOrganization
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_6 = CTD_ANON_6


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 299, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}sOrgIdentifier uses Python identifier sOrgIdentifier
    __sOrgIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sOrgIdentifier'), 'sOrgIdentifier', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_7_httpwww_iupac_orgnamespacesThermoMLsOrgIdentifier', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 301, 7), )

    
    sOrgIdentifier = property(__sOrgIdentifier.value, __sOrgIdentifier.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sOrganization uses Python identifier sOrganization
    __sOrganization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sOrganization'), 'sOrganization', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_7_httpwww_iupac_orgnamespacesThermoMLsOrganization', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 302, 7), )

    
    sOrganization = property(__sOrganization.value, __sOrganization.set, None, None)

    _ElementMap.update({
        __sOrgIdentifier.name() : __sOrgIdentifier,
        __sOrganization.name() : __sOrganization
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_7 = CTD_ANON_7


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Polymer-specific information"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 333, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nNumberAvgMolMass uses Python identifier nNumberAvgMolMass
    __nNumberAvgMolMass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nNumberAvgMolMass'), 'nNumberAvgMolMass', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_8_httpwww_iupac_orgnamespacesThermoMLnNumberAvgMolMass', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 338, 8), )

    
    nNumberAvgMolMass = property(__nNumberAvgMolMass.value, __nNumberAvgMolMass.set, None, 'Number average molecular mass, kg/kmol')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPeakAvgMolMass uses Python identifier nPeakAvgMolMass
    __nPeakAvgMolMass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPeakAvgMolMass'), 'nPeakAvgMolMass', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_8_httpwww_iupac_orgnamespacesThermoMLnPeakAvgMolMass', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 343, 8), )

    
    nPeakAvgMolMass = property(__nPeakAvgMolMass.value, __nPeakAvgMolMass.set, None, 'Peak average molecular mass, kg/kmol')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nViscosityAvgMolMass uses Python identifier nViscosityAvgMolMass
    __nViscosityAvgMolMass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nViscosityAvgMolMass'), 'nViscosityAvgMolMass', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_8_httpwww_iupac_orgnamespacesThermoMLnViscosityAvgMolMass', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 348, 8), )

    
    nViscosityAvgMolMass = property(__nViscosityAvgMolMass.value, __nViscosityAvgMolMass.set, None, 'Viscosity average molecular mass, kg/kmol')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nMassAvgMolMass uses Python identifier nMassAvgMolMass
    __nMassAvgMolMass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nMassAvgMolMass'), 'nMassAvgMolMass', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_8_httpwww_iupac_orgnamespacesThermoMLnMassAvgMolMass', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 353, 8), )

    
    nMassAvgMolMass = property(__nMassAvgMolMass.value, __nMassAvgMolMass.set, None, 'Weight average molecular mass, kg/kmol')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nZAvgMolMass uses Python identifier nZAvgMolMass
    __nZAvgMolMass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nZAvgMolMass'), 'nZAvgMolMass', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_8_httpwww_iupac_orgnamespacesThermoMLnZAvgMolMass', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 358, 8), )

    
    nZAvgMolMass = property(__nZAvgMolMass.value, __nZAvgMolMass.set, None, 'Z average molecular mass, kg/kmol')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nMolarMassDispersity uses Python identifier nMolarMassDispersity
    __nMolarMassDispersity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nMolarMassDispersity'), 'nMolarMassDispersity', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_8_httpwww_iupac_orgnamespacesThermoMLnMolarMassDispersity', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 363, 8), )

    
    nMolarMassDispersity = property(__nMolarMassDispersity.value, __nMolarMassDispersity.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nDegOfPolymerizationDispersity uses Python identifier nDegOfPolymerizationDispersity
    __nDegOfPolymerizationDispersity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nDegOfPolymerizationDispersity'), 'nDegOfPolymerizationDispersity', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_8_httpwww_iupac_orgnamespacesThermoMLnDegOfPolymerizationDispersity', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 364, 8), )

    
    nDegOfPolymerizationDispersity = property(__nDegOfPolymerizationDispersity.value, __nDegOfPolymerizationDispersity.set, None, None)

    _ElementMap.update({
        __nNumberAvgMolMass.name() : __nNumberAvgMolMass,
        __nPeakAvgMolMass.name() : __nPeakAvgMolMass,
        __nViscosityAvgMolMass.name() : __nViscosityAvgMolMass,
        __nMassAvgMolMass.name() : __nMassAvgMolMass,
        __nZAvgMolMass.name() : __nZAvgMolMass,
        __nMolarMassDispersity.name() : __nMolarMassDispersity,
        __nDegOfPolymerizationDispersity.name() : __nDegOfPolymerizationDispersity
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_8 = CTD_ANON_8


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """Ion-specific information"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 369, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCharge uses Python identifier nCharge
    __nCharge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCharge'), 'nCharge', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_9_httpwww_iupac_orgnamespacesThermoMLnCharge', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 374, 8), )

    
    nCharge = property(__nCharge.value, __nCharge.set, None, None)

    _ElementMap.update({
        __nCharge.name() : __nCharge
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_9 = CTD_ANON_9


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """Bio species information"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 379, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}sECNumber uses Python identifier sECNumber
    __sECNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sECNumber'), 'sECNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_10_httpwww_iupac_orgnamespacesThermoMLsECNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 384, 8), )

    
    sECNumber = property(__sECNumber.value, __sECNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sPDBIdentifier uses Python identifier sPDBIdentifier
    __sPDBIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sPDBIdentifier'), 'sPDBIdentifier', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_10_httpwww_iupac_orgnamespacesThermoMLsPDBIdentifier', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 385, 8), )

    
    sPDBIdentifier = property(__sPDBIdentifier.value, __sPDBIdentifier.set, None, None)

    _ElementMap.update({
        __sECNumber.name() : __sECNumber,
        __sPDBIdentifier.name() : __sPDBIdentifier
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_10 = CTD_ANON_10


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 393, 9)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_11_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 396, 12), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nAmount uses Python identifier nAmount
    __nAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nAmount'), 'nAmount', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_11_httpwww_iupac_orgnamespacesThermoMLnAmount', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 399, 11), )

    
    nAmount = property(__nAmount.value, __nAmount.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_11_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __nCompIndex.name() : __nCompIndex,
        __nAmount.name() : __nAmount,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_11 = CTD_ANON_11


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """sample"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 428, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nSampleNm uses Python identifier nSampleNm
    __nSampleNm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm'), 'nSampleNm', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_12_httpwww_iupac_orgnamespacesThermoMLnSampleNm', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 430, 4), )

    
    nSampleNm = property(__nSampleNm.value, __nSampleNm.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eSource uses Python identifier eSource
    __eSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eSource'), 'eSource', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_12_httpwww_iupac_orgnamespacesThermoMLeSource', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 431, 4), )

    
    eSource = property(__eSource.value, __eSource.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eStatus uses Python identifier eStatus
    __eStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eStatus'), 'eStatus', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_12_httpwww_iupac_orgnamespacesThermoMLeStatus', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 432, 4), )

    
    eStatus = property(__eStatus.value, __eStatus.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}purity uses Python identifier purity
    __purity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'purity'), 'purity', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_12_httpwww_iupac_orgnamespacesThermoMLpurity', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 433, 4), )

    
    purity = property(__purity.value, __purity.set, None, 'Purity of the sample')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ComponentSample uses Python identifier ComponentSample
    __ComponentSample = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ComponentSample'), 'ComponentSample', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_12_httpwww_iupac_orgnamespacesThermoMLComponentSample', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 515, 4), )

    
    ComponentSample = property(__ComponentSample.value, __ComponentSample.set, None, None)

    _ElementMap.update({
        __nSampleNm.name() : __nSampleNm,
        __eSource.name() : __eSource,
        __eStatus.name() : __eStatus,
        __purity.name() : __purity,
        __ComponentSample.name() : __ComponentSample
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_12 = CTD_ANON_12


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """Purity of the sample"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 437, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nStep uses Python identifier nStep
    __nStep = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nStep'), 'nStep', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnStep', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 439, 7), )

    
    nStep = property(__nStep.value, __nStep.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePurifMethod uses Python identifier ePurifMethod
    __ePurifMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePurifMethod'), 'ePurifMethod', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLePurifMethod', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 440, 7), )

    
    ePurifMethod = property(__ePurifMethod.value, __ePurifMethod.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sPurifMethod uses Python identifier sPurifMethod
    __sPurifMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sPurifMethod'), 'sPurifMethod', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLsPurifMethod', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 441, 7), )

    
    sPurifMethod = property(__sPurifMethod.value, __sPurifMethod.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPurityMol uses Python identifier nPurityMol
    __nPurityMol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPurityMol'), 'nPurityMol', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnPurityMol', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 443, 8), )

    
    nPurityMol = property(__nPurityMol.value, __nPurityMol.set, None, 'purity value in mole percent')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPurityMolDigits uses Python identifier nPurityMolDigits
    __nPurityMolDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPurityMolDigits'), 'nPurityMolDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnPurityMolDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 448, 8), )

    
    nPurityMolDigits = property(__nPurityMolDigits.value, __nPurityMolDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPurityMass uses Python identifier nPurityMass
    __nPurityMass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPurityMass'), 'nPurityMass', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnPurityMass', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 451, 8), )

    
    nPurityMass = property(__nPurityMass.value, __nPurityMass.set, None, 'purity value in mass percent')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPurityMassDigits uses Python identifier nPurityMassDigits
    __nPurityMassDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPurityMassDigits'), 'nPurityMassDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnPurityMassDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 456, 8), )

    
    nPurityMassDigits = property(__nPurityMassDigits.value, __nPurityMassDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPurityVol uses Python identifier nPurityVol
    __nPurityVol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPurityVol'), 'nPurityVol', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnPurityVol', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 459, 8), )

    
    nPurityVol = property(__nPurityVol.value, __nPurityVol.set, None, 'purity value in volume percent')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPurityVolDigits uses Python identifier nPurityVolDigits
    __nPurityVolDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPurityVolDigits'), 'nPurityVolDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnPurityVolDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 464, 8), )

    
    nPurityVolDigits = property(__nPurityVolDigits.value, __nPurityVolDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nUnknownPerCent uses Python identifier nUnknownPerCent
    __nUnknownPerCent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nUnknownPerCent'), 'nUnknownPerCent', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnUnknownPerCent', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 467, 8), )

    
    nUnknownPerCent = property(__nUnknownPerCent.value, __nUnknownPerCent.set, None, 'purity value in not specified percent')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nUnknownPerCentDigits uses Python identifier nUnknownPerCentDigits
    __nUnknownPerCentDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nUnknownPerCentDigits'), 'nUnknownPerCentDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnUnknownPerCentDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 472, 8), )

    
    nUnknownPerCentDigits = property(__nUnknownPerCentDigits.value, __nUnknownPerCentDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nWaterMassPerCent uses Python identifier nWaterMassPerCent
    __nWaterMassPerCent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nWaterMassPerCent'), 'nWaterMassPerCent', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnWaterMassPerCent', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 475, 8), )

    
    nWaterMassPerCent = property(__nWaterMassPerCent.value, __nWaterMassPerCent.set, None, 'mass per cent of water')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nWaterMassPerCentDigits uses Python identifier nWaterMassPerCentDigits
    __nWaterMassPerCentDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nWaterMassPerCentDigits'), 'nWaterMassPerCentDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnWaterMassPerCentDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 480, 8), )

    
    nWaterMassPerCentDigits = property(__nWaterMassPerCentDigits.value, __nWaterMassPerCentDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nWaterMolPerCent uses Python identifier nWaterMolPerCent
    __nWaterMolPerCent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nWaterMolPerCent'), 'nWaterMolPerCent', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnWaterMolPerCent', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 483, 8), )

    
    nWaterMolPerCent = property(__nWaterMolPerCent.value, __nWaterMolPerCent.set, None, 'mole per cent of water')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nWaterMolPerCentDigits uses Python identifier nWaterMolPerCentDigits
    __nWaterMolPerCentDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nWaterMolPerCentDigits'), 'nWaterMolPerCentDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnWaterMolPerCentDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 488, 8), )

    
    nWaterMolPerCentDigits = property(__nWaterMolPerCentDigits.value, __nWaterMolPerCentDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nHalideMolPerCent uses Python identifier nHalideMolPerCent
    __nHalideMolPerCent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nHalideMolPerCent'), 'nHalideMolPerCent', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnHalideMolPerCent', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 491, 8), )

    
    nHalideMolPerCent = property(__nHalideMolPerCent.value, __nHalideMolPerCent.set, None, 'mass per cent of halide impurity')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nHalideMolPerCentDigits uses Python identifier nHalideMolPerCentDigits
    __nHalideMolPerCentDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nHalideMolPerCentDigits'), 'nHalideMolPerCentDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnHalideMolPerCentDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 496, 8), )

    
    nHalideMolPerCentDigits = property(__nHalideMolPerCentDigits.value, __nHalideMolPerCentDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nHalideMassPerCent uses Python identifier nHalideMassPerCent
    __nHalideMassPerCent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nHalideMassPerCent'), 'nHalideMassPerCent', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnHalideMassPerCent', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 499, 8), )

    
    nHalideMassPerCent = property(__nHalideMassPerCent.value, __nHalideMassPerCent.set, None, 'mass per cent of halide impurity')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nHalideMassPerCentDigits uses Python identifier nHalideMassPerCentDigits
    __nHalideMassPerCentDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nHalideMassPerCentDigits'), 'nHalideMassPerCentDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLnHalideMassPerCentDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 504, 8), )

    
    nHalideMassPerCentDigits = property(__nHalideMassPerCentDigits.value, __nHalideMassPerCentDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eAnalMeth uses Python identifier eAnalMeth
    __eAnalMeth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eAnalMeth'), 'eAnalMeth', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLeAnalMeth', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 506, 7), )

    
    eAnalMeth = property(__eAnalMeth.value, __eAnalMeth.set, None, 'Analytical method used to determine purity')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sAnalMeth uses Python identifier sAnalMeth
    __sAnalMeth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sAnalMeth'), 'sAnalMeth', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_13_httpwww_iupac_orgnamespacesThermoMLsAnalMeth', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 511, 7), )

    
    sAnalMeth = property(__sAnalMeth.value, __sAnalMeth.set, None, None)

    _ElementMap.update({
        __nStep.name() : __nStep,
        __ePurifMethod.name() : __ePurifMethod,
        __sPurifMethod.name() : __sPurifMethod,
        __nPurityMol.name() : __nPurityMol,
        __nPurityMolDigits.name() : __nPurityMolDigits,
        __nPurityMass.name() : __nPurityMass,
        __nPurityMassDigits.name() : __nPurityMassDigits,
        __nPurityVol.name() : __nPurityVol,
        __nPurityVolDigits.name() : __nPurityVolDigits,
        __nUnknownPerCent.name() : __nUnknownPerCent,
        __nUnknownPerCentDigits.name() : __nUnknownPerCentDigits,
        __nWaterMassPerCent.name() : __nWaterMassPerCent,
        __nWaterMassPerCentDigits.name() : __nWaterMassPerCentDigits,
        __nWaterMolPerCent.name() : __nWaterMolPerCent,
        __nWaterMolPerCentDigits.name() : __nWaterMolPerCentDigits,
        __nHalideMolPerCent.name() : __nHalideMolPerCent,
        __nHalideMolPerCentDigits.name() : __nHalideMolPerCentDigits,
        __nHalideMassPerCent.name() : __nHalideMassPerCent,
        __nHalideMassPerCentDigits.name() : __nHalideMassPerCentDigits,
        __eAnalMeth.name() : __eAnalMeth,
        __sAnalMeth.name() : __sAnalMeth
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_13 = CTD_ANON_13


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 516, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_14_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 519, 8), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nSampleNm uses Python identifier nSampleNm
    __nSampleNm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm'), 'nSampleNm', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_14_httpwww_iupac_orgnamespacesThermoMLnSampleNm', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 522, 7), )

    
    nSampleNm = property(__nSampleNm.value, __nSampleNm.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_14_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __nCompIndex.name() : __nCompIndex,
        __nSampleNm.name() : __nSampleNm,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_14 = CTD_ANON_14


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 533, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPureOrMixtureDataNumber uses Python identifier nPureOrMixtureDataNumber
    __nPureOrMixtureDataNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPureOrMixtureDataNumber'), 'nPureOrMixtureDataNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_15_httpwww_iupac_orgnamespacesThermoMLnPureOrMixtureDataNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 535, 4), )

    
    nPureOrMixtureDataNumber = property(__nPureOrMixtureDataNumber.value, __nPureOrMixtureDataNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Component uses Python identifier Component
    __Component = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Component'), 'Component', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_15_httpwww_iupac_orgnamespacesThermoMLComponent', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 536, 4), )

    
    Component = property(__Component.value, __Component.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}AuxiliarySubstance uses Python identifier AuxiliarySubstance
    __AuxiliarySubstance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AuxiliarySubstance'), 'AuxiliarySubstance', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_15_httpwww_iupac_orgnamespacesThermoMLAuxiliarySubstance', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 547, 4), )

    
    AuxiliarySubstance = property(__AuxiliarySubstance.value, __AuxiliarySubstance.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eExpPurpose uses Python identifier eExpPurpose
    __eExpPurpose = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eExpPurpose'), 'eExpPurpose', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_15_httpwww_iupac_orgnamespacesThermoMLeExpPurpose', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 570, 4), )

    
    eExpPurpose = property(__eExpPurpose.value, __eExpPurpose.set, None, 'Purpose of measurement')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sCompiler uses Python identifier sCompiler
    __sCompiler = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sCompiler'), 'sCompiler', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_15_httpwww_iupac_orgnamespacesThermoMLsCompiler', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 575, 4), )

    
    sCompiler = property(__sCompiler.value, __sCompiler.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sContributor uses Python identifier sContributor
    __sContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sContributor'), 'sContributor', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_15_httpwww_iupac_orgnamespacesThermoMLsContributor', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 576, 4), )

    
    sContributor = property(__sContributor.value, __sContributor.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}dateDateAdded uses Python identifier dateDateAdded
    __dateDateAdded = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDateAdded'), 'dateDateAdded', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_15_httpwww_iupac_orgnamespacesThermoMLdateDateAdded', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 577, 4), )

    
    dateDateAdded = property(__dateDateAdded.value, __dateDateAdded.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Property uses Python identifier Property
    __Property = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Property'), 'Property', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_15_httpwww_iupac_orgnamespacesThermoMLProperty', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 578, 4), )

    
    Property = property(__Property.value, __Property.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PhaseID uses Python identifier PhaseID
    __PhaseID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PhaseID'), 'PhaseID', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_15_httpwww_iupac_orgnamespacesThermoMLPhaseID', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1336, 4), )

    
    PhaseID = property(__PhaseID.value, __PhaseID.set, None, ' CASRN is necessary for mixtures only')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Constraint uses Python identifier Constraint
    __Constraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Constraint'), 'Constraint', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_15_httpwww_iupac_orgnamespacesThermoMLConstraint', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1354, 4), )

    
    Constraint = property(__Constraint.value, __Constraint.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Variable uses Python identifier Variable
    __Variable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Variable'), 'Variable', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_15_httpwww_iupac_orgnamespacesThermoMLVariable', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1399, 4), )

    
    Variable = property(__Variable.value, __Variable.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}NumValues uses Python identifier NumValues
    __NumValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NumValues'), 'NumValues', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_15_httpwww_iupac_orgnamespacesThermoMLNumValues', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2349, 1), )

    
    NumValues = property(__NumValues.value, __NumValues.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Equation uses Python identifier Equation
    __Equation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Equation'), 'Equation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_15_httpwww_iupac_orgnamespacesThermoMLEquation', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2521, 1), )

    
    Equation = property(__Equation.value, __Equation.set, None, None)

    _ElementMap.update({
        __nPureOrMixtureDataNumber.name() : __nPureOrMixtureDataNumber,
        __Component.name() : __Component,
        __AuxiliarySubstance.name() : __AuxiliarySubstance,
        __eExpPurpose.name() : __eExpPurpose,
        __sCompiler.name() : __sCompiler,
        __sContributor.name() : __sContributor,
        __dateDateAdded.name() : __dateDateAdded,
        __Property.name() : __Property,
        __PhaseID.name() : __PhaseID,
        __Constraint.name() : __Constraint,
        __Variable.name() : __Variable,
        __NumValues.name() : __NumValues,
        __Equation.name() : __Equation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_15 = CTD_ANON_15


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 537, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_16_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 540, 8), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nSampleNm uses Python identifier nSampleNm
    __nSampleNm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm'), 'nSampleNm', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_16_httpwww_iupac_orgnamespacesThermoMLnSampleNm', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 543, 7), )

    
    nSampleNm = property(__nSampleNm.value, __nSampleNm.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_16_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __nCompIndex.name() : __nCompIndex,
        __nSampleNm.name() : __nSampleNm,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_16 = CTD_ANON_16


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 548, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}eFunction uses Python identifier eFunction
    __eFunction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eFunction'), 'eFunction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_17_httpwww_iupac_orgnamespacesThermoMLeFunction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 551, 8), )

    
    eFunction = property(__eFunction.value, __eFunction.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sFunction uses Python identifier sFunction
    __sFunction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sFunction'), 'sFunction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_17_httpwww_iupac_orgnamespacesThermoMLsFunction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 560, 8), )

    
    sFunction = property(__sFunction.value, __sFunction.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_17_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 563, 8), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nSampleNm uses Python identifier nSampleNm
    __nSampleNm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm'), 'nSampleNm', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_17_httpwww_iupac_orgnamespacesThermoMLnSampleNm', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 566, 7), )

    
    nSampleNm = property(__nSampleNm.value, __nSampleNm.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_17_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __eFunction.name() : __eFunction,
        __sFunction.name() : __sFunction,
        __nCompIndex.name() : __nCompIndex,
        __nSampleNm.name() : __nSampleNm,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_17 = CTD_ANON_17


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 579, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPropNumber uses Python identifier nPropNumber
    __nPropNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPropNumber'), 'nPropNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLnPropNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 581, 7), )

    
    nPropNumber = property(__nPropNumber.value, __nPropNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Property-MethodID uses Python identifier Property_MethodID
    __Property_MethodID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Property-MethodID'), 'Property_MethodID', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLProperty_MethodID', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 582, 7), )

    
    Property_MethodID = property(__Property_MethodID.value, __Property_MethodID.set, None, ' CASRN is necessary for mixtures only')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PropPhaseID uses Python identifier PropPhaseID
    __PropPhaseID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropPhaseID'), 'PropPhaseID', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLPropPhaseID', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1255, 7), )

    
    PropPhaseID = property(__PropPhaseID.value, __PropPhaseID.set, None, ' CASRN is necessary for mixtures only')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePresentation uses Python identifier ePresentation
    __ePresentation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePresentation'), 'ePresentation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLePresentation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1284, 7), )

    
    ePresentation = property(__ePresentation.value, __ePresentation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eRefStateType uses Python identifier eRefStateType
    __eRefStateType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eRefStateType'), 'eRefStateType', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLeRefStateType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1285, 7), )

    
    eRefStateType = property(__eRefStateType.value, __eRefStateType.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nRefTemp uses Python identifier nRefTemp
    __nRefTemp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nRefTemp'), 'nRefTemp', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLnRefTemp', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1287, 8), )

    
    nRefTemp = property(__nRefTemp.value, __nRefTemp.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nRefTempDigits uses Python identifier nRefTempDigits
    __nRefTempDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nRefTempDigits'), 'nRefTempDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLnRefTempDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1288, 8), )

    
    nRefTempDigits = property(__nRefTempDigits.value, __nRefTempDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nRefPressure uses Python identifier nRefPressure
    __nRefPressure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nRefPressure'), 'nRefPressure', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLnRefPressure', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1291, 8), )

    
    nRefPressure = property(__nRefPressure.value, __nRefPressure.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nRefPressureDigits uses Python identifier nRefPressureDigits
    __nRefPressureDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nRefPressureDigits'), 'nRefPressureDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLnRefPressureDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1292, 8), )

    
    nRefPressureDigits = property(__nRefPressureDigits.value, __nRefPressureDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RefPhaseID uses Python identifier RefPhaseID
    __RefPhaseID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RefPhaseID'), 'RefPhaseID', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLRefPhaseID', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1294, 7), )

    
    RefPhaseID = property(__RefPhaseID.value, __RefPhaseID.set, None, ' CASRN is necessary for mixtures only')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eStandardState uses Python identifier eStandardState
    __eStandardState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eStandardState'), 'eStandardState', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLeStandardState', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1313, 7), )

    
    eStandardState = property(__eStandardState.value, __eStandardState.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PropUncertainty uses Python identifier PropUncertainty
    __PropUncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropUncertainty'), 'PropUncertainty', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLPropUncertainty', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1329, 7), )

    
    PropUncertainty = property(__PropUncertainty.value, __PropUncertainty.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PropRepeatability uses Python identifier PropRepeatability
    __PropRepeatability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropRepeatability'), 'PropRepeatability', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLPropRepeatability', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1330, 7), )

    
    PropRepeatability = property(__PropRepeatability.value, __PropRepeatability.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PropDeviceSpec uses Python identifier PropDeviceSpec
    __PropDeviceSpec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropDeviceSpec'), 'PropDeviceSpec', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLPropDeviceSpec', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1331, 7), )

    
    PropDeviceSpec = property(__PropDeviceSpec.value, __PropDeviceSpec.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Solvent uses Python identifier Solvent
    __Solvent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Solvent'), 'Solvent', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLSolvent', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2085, 1), )

    
    Solvent = property(__Solvent.value, __Solvent.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CurveDev uses Python identifier CurveDev
    __CurveDev = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurveDev'), 'CurveDev', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLCurveDev', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2279, 1), )

    
    CurveDev = property(__CurveDev.value, __CurveDev.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CombinedUncertainty uses Python identifier CombinedUncertainty
    __CombinedUncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CombinedUncertainty'), 'CombinedUncertainty', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_18_httpwww_iupac_orgnamespacesThermoMLCombinedUncertainty', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2327, 1), )

    
    CombinedUncertainty = property(__CombinedUncertainty.value, __CombinedUncertainty.set, None, None)

    _ElementMap.update({
        __nPropNumber.name() : __nPropNumber,
        __Property_MethodID.name() : __Property_MethodID,
        __PropPhaseID.name() : __PropPhaseID,
        __ePresentation.name() : __ePresentation,
        __eRefStateType.name() : __eRefStateType,
        __nRefTemp.name() : __nRefTemp,
        __nRefTempDigits.name() : __nRefTempDigits,
        __nRefPressure.name() : __nRefPressure,
        __nRefPressureDigits.name() : __nRefPressureDigits,
        __RefPhaseID.name() : __RefPhaseID,
        __eStandardState.name() : __eStandardState,
        __PropUncertainty.name() : __PropUncertainty,
        __PropRepeatability.name() : __PropRepeatability,
        __PropDeviceSpec.name() : __PropDeviceSpec,
        __Solvent.name() : __Solvent,
        __CurveDev.name() : __CurveDev,
        __CombinedUncertainty.name() : __CombinedUncertainty
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_18 = CTD_ANON_18


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """ CASRN is necessary for mixtures only"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 586, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}PropertyGroup uses Python identifier PropertyGroup
    __PropertyGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropertyGroup'), 'PropertyGroup', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_19_httpwww_iupac_orgnamespacesThermoMLPropertyGroup', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 588, 10), )

    
    PropertyGroup = property(__PropertyGroup.value, __PropertyGroup.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_19_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1249, 11), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_19_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __PropertyGroup.name() : __PropertyGroup,
        __nCompIndex.name() : __nCompIndex,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_19 = CTD_ANON_19


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 589, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}Criticals uses Python identifier Criticals
    __Criticals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Criticals'), 'Criticals', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_20_httpwww_iupac_orgnamespacesThermoMLCriticals', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 591, 13), )

    
    Criticals = property(__Criticals.value, __Criticals.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}VaporPBoilingTAzeotropTandP uses Python identifier VaporPBoilingTAzeotropTandP
    __VaporPBoilingTAzeotropTandP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VaporPBoilingTAzeotropTandP'), 'VaporPBoilingTAzeotropTandP', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_20_httpwww_iupac_orgnamespacesThermoMLVaporPBoilingTAzeotropTandP', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 634, 13), )

    
    VaporPBoilingTAzeotropTandP = property(__VaporPBoilingTAzeotropTandP.value, __VaporPBoilingTAzeotropTandP.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PhaseTransition uses Python identifier PhaseTransition
    __PhaseTransition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PhaseTransition'), 'PhaseTransition', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_20_httpwww_iupac_orgnamespacesThermoMLPhaseTransition', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 687, 13), )

    
    PhaseTransition = property(__PhaseTransition.value, __PhaseTransition.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CompositionAtPhaseEquilibrium uses Python identifier CompositionAtPhaseEquilibrium
    __CompositionAtPhaseEquilibrium = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CompositionAtPhaseEquilibrium'), 'CompositionAtPhaseEquilibrium', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_20_httpwww_iupac_orgnamespacesThermoMLCompositionAtPhaseEquilibrium', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 749, 13), )

    
    CompositionAtPhaseEquilibrium = property(__CompositionAtPhaseEquilibrium.value, __CompositionAtPhaseEquilibrium.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ActivityFugacityOsmoticProp uses Python identifier ActivityFugacityOsmoticProp
    __ActivityFugacityOsmoticProp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ActivityFugacityOsmoticProp'), 'ActivityFugacityOsmoticProp', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_20_httpwww_iupac_orgnamespacesThermoMLActivityFugacityOsmoticProp', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 824, 13), )

    
    ActivityFugacityOsmoticProp = property(__ActivityFugacityOsmoticProp.value, __ActivityFugacityOsmoticProp.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}VolumetricProp uses Python identifier VolumetricProp
    __VolumetricProp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VolumetricProp'), 'VolumetricProp', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_20_httpwww_iupac_orgnamespacesThermoMLVolumetricProp', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 868, 13), )

    
    VolumetricProp = property(__VolumetricProp.value, __VolumetricProp.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}HeatCapacityAndDerivedProp uses Python identifier HeatCapacityAndDerivedProp
    __HeatCapacityAndDerivedProp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HeatCapacityAndDerivedProp'), 'HeatCapacityAndDerivedProp', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_20_httpwww_iupac_orgnamespacesThermoMLHeatCapacityAndDerivedProp', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 943, 13), )

    
    HeatCapacityAndDerivedProp = property(__HeatCapacityAndDerivedProp.value, __HeatCapacityAndDerivedProp.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ExcessPartialApparentEnergyProp uses Python identifier ExcessPartialApparentEnergyProp
    __ExcessPartialApparentEnergyProp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExcessPartialApparentEnergyProp'), 'ExcessPartialApparentEnergyProp', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_20_httpwww_iupac_orgnamespacesThermoMLExcessPartialApparentEnergyProp', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1007, 13), )

    
    ExcessPartialApparentEnergyProp = property(__ExcessPartialApparentEnergyProp.value, __ExcessPartialApparentEnergyProp.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}TransportProp uses Python identifier TransportProp
    __TransportProp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransportProp'), 'TransportProp', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_20_httpwww_iupac_orgnamespacesThermoMLTransportProp', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1084, 13), )

    
    TransportProp = property(__TransportProp.value, __TransportProp.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RefractionSurfaceTensionSoundSpeed uses Python identifier RefractionSurfaceTensionSoundSpeed
    __RefractionSurfaceTensionSoundSpeed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RefractionSurfaceTensionSoundSpeed'), 'RefractionSurfaceTensionSoundSpeed', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_20_httpwww_iupac_orgnamespacesThermoMLRefractionSurfaceTensionSoundSpeed', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1148, 13), )

    
    RefractionSurfaceTensionSoundSpeed = property(__RefractionSurfaceTensionSoundSpeed.value, __RefractionSurfaceTensionSoundSpeed.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}BioProperties uses Python identifier BioProperties
    __BioProperties = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BioProperties'), 'BioProperties', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_20_httpwww_iupac_orgnamespacesThermoMLBioProperties', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1216, 13), )

    
    BioProperties = property(__BioProperties.value, __BioProperties.set, None, None)

    _ElementMap.update({
        __Criticals.name() : __Criticals,
        __VaporPBoilingTAzeotropTandP.name() : __VaporPBoilingTAzeotropTandP,
        __PhaseTransition.name() : __PhaseTransition,
        __CompositionAtPhaseEquilibrium.name() : __CompositionAtPhaseEquilibrium,
        __ActivityFugacityOsmoticProp.name() : __ActivityFugacityOsmoticProp,
        __VolumetricProp.name() : __VolumetricProp,
        __HeatCapacityAndDerivedProp.name() : __HeatCapacityAndDerivedProp,
        __ExcessPartialApparentEnergyProp.name() : __ExcessPartialApparentEnergyProp,
        __TransportProp.name() : __TransportProp,
        __RefractionSurfaceTensionSoundSpeed.name() : __RefractionSurfaceTensionSoundSpeed,
        __BioProperties.name() : __BioProperties
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_20 = CTD_ANON_20


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 592, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePropName uses Python identifier ePropName
    __ePropName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), 'ePropName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_21_httpwww_iupac_orgnamespacesThermoMLePropName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 594, 16), )

    
    ePropName = property(__ePropName.value, __ePropName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eMethodName uses Python identifier eMethodName
    __eMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), 'eMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_21_httpwww_iupac_orgnamespacesThermoMLeMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 611, 17), )

    
    eMethodName = property(__eMethodName.value, __eMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sMethodName uses Python identifier sMethodName
    __sMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), 'sMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_21_httpwww_iupac_orgnamespacesThermoMLsMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 627, 17), )

    
    sMethodName = property(__sMethodName.value, __sMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CriticalEvaluation uses Python identifier CriticalEvaluation
    __CriticalEvaluation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), 'CriticalEvaluation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_21_httpwww_iupac_orgnamespacesThermoMLCriticalEvaluation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1), )

    
    CriticalEvaluation = property(__CriticalEvaluation.value, __CriticalEvaluation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Prediction uses Python identifier Prediction
    __Prediction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), 'Prediction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_21_httpwww_iupac_orgnamespacesThermoMLPrediction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1), )

    
    Prediction = property(__Prediction.value, __Prediction.set, None, None)

    _ElementMap.update({
        __ePropName.name() : __ePropName,
        __eMethodName.name() : __eMethodName,
        __sMethodName.name() : __sMethodName,
        __CriticalEvaluation.name() : __CriticalEvaluation,
        __Prediction.name() : __Prediction
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_21 = CTD_ANON_21


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 635, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePropName uses Python identifier ePropName
    __ePropName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), 'ePropName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_22_httpwww_iupac_orgnamespacesThermoMLePropName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 637, 16), )

    
    ePropName = property(__ePropName.value, __ePropName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eMethodName uses Python identifier eMethodName
    __eMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), 'eMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_22_httpwww_iupac_orgnamespacesThermoMLeMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 653, 17), )

    
    eMethodName = property(__eMethodName.value, __eMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sMethodName uses Python identifier sMethodName
    __sMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), 'sMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_22_httpwww_iupac_orgnamespacesThermoMLsMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 680, 17), )

    
    sMethodName = property(__sMethodName.value, __sMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CriticalEvaluation uses Python identifier CriticalEvaluation
    __CriticalEvaluation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), 'CriticalEvaluation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_22_httpwww_iupac_orgnamespacesThermoMLCriticalEvaluation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1), )

    
    CriticalEvaluation = property(__CriticalEvaluation.value, __CriticalEvaluation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Prediction uses Python identifier Prediction
    __Prediction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), 'Prediction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_22_httpwww_iupac_orgnamespacesThermoMLPrediction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1), )

    
    Prediction = property(__Prediction.value, __Prediction.set, None, None)

    _ElementMap.update({
        __ePropName.name() : __ePropName,
        __eMethodName.name() : __eMethodName,
        __sMethodName.name() : __sMethodName,
        __CriticalEvaluation.name() : __CriticalEvaluation,
        __Prediction.name() : __Prediction
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_22 = CTD_ANON_22


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 688, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePropName uses Python identifier ePropName
    __ePropName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), 'ePropName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_23_httpwww_iupac_orgnamespacesThermoMLePropName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 690, 16), )

    
    ePropName = property(__ePropName.value, __ePropName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eMethodName uses Python identifier eMethodName
    __eMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), 'eMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_23_httpwww_iupac_orgnamespacesThermoMLeMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 716, 17), )

    
    eMethodName = property(__eMethodName.value, __eMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sMethodName uses Python identifier sMethodName
    __sMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), 'sMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_23_httpwww_iupac_orgnamespacesThermoMLsMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 742, 17), )

    
    sMethodName = property(__sMethodName.value, __sMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CriticalEvaluation uses Python identifier CriticalEvaluation
    __CriticalEvaluation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), 'CriticalEvaluation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_23_httpwww_iupac_orgnamespacesThermoMLCriticalEvaluation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1), )

    
    CriticalEvaluation = property(__CriticalEvaluation.value, __CriticalEvaluation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Prediction uses Python identifier Prediction
    __Prediction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), 'Prediction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_23_httpwww_iupac_orgnamespacesThermoMLPrediction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1), )

    
    Prediction = property(__Prediction.value, __Prediction.set, None, None)

    _ElementMap.update({
        __ePropName.name() : __ePropName,
        __eMethodName.name() : __eMethodName,
        __sMethodName.name() : __sMethodName,
        __CriticalEvaluation.name() : __CriticalEvaluation,
        __Prediction.name() : __Prediction
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_23 = CTD_ANON_23


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 750, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePropName uses Python identifier ePropName
    __ePropName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), 'ePropName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_24_httpwww_iupac_orgnamespacesThermoMLePropName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 752, 16), )

    
    ePropName = property(__ePropName.value, __ePropName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eMethodName uses Python identifier eMethodName
    __eMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), 'eMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_24_httpwww_iupac_orgnamespacesThermoMLeMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 798, 17), )

    
    eMethodName = property(__eMethodName.value, __eMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sMethodName uses Python identifier sMethodName
    __sMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), 'sMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_24_httpwww_iupac_orgnamespacesThermoMLsMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 817, 17), )

    
    sMethodName = property(__sMethodName.value, __sMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CriticalEvaluation uses Python identifier CriticalEvaluation
    __CriticalEvaluation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), 'CriticalEvaluation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_24_httpwww_iupac_orgnamespacesThermoMLCriticalEvaluation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1), )

    
    CriticalEvaluation = property(__CriticalEvaluation.value, __CriticalEvaluation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Prediction uses Python identifier Prediction
    __Prediction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), 'Prediction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_24_httpwww_iupac_orgnamespacesThermoMLPrediction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1), )

    
    Prediction = property(__Prediction.value, __Prediction.set, None, None)

    _ElementMap.update({
        __ePropName.name() : __ePropName,
        __eMethodName.name() : __eMethodName,
        __sMethodName.name() : __sMethodName,
        __CriticalEvaluation.name() : __CriticalEvaluation,
        __Prediction.name() : __Prediction
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_24 = CTD_ANON_24


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 825, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePropName uses Python identifier ePropName
    __ePropName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), 'ePropName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_25_httpwww_iupac_orgnamespacesThermoMLePropName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 827, 16), )

    
    ePropName = property(__ePropName.value, __ePropName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eMethodName uses Python identifier eMethodName
    __eMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), 'eMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_25_httpwww_iupac_orgnamespacesThermoMLeMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 842, 17), )

    
    eMethodName = property(__eMethodName.value, __eMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sMethodName uses Python identifier sMethodName
    __sMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), 'sMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_25_httpwww_iupac_orgnamespacesThermoMLsMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 861, 17), )

    
    sMethodName = property(__sMethodName.value, __sMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CriticalEvaluation uses Python identifier CriticalEvaluation
    __CriticalEvaluation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), 'CriticalEvaluation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_25_httpwww_iupac_orgnamespacesThermoMLCriticalEvaluation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1), )

    
    CriticalEvaluation = property(__CriticalEvaluation.value, __CriticalEvaluation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Prediction uses Python identifier Prediction
    __Prediction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), 'Prediction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_25_httpwww_iupac_orgnamespacesThermoMLPrediction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1), )

    
    Prediction = property(__Prediction.value, __Prediction.set, None, None)

    _ElementMap.update({
        __ePropName.name() : __ePropName,
        __eMethodName.name() : __eMethodName,
        __sMethodName.name() : __sMethodName,
        __CriticalEvaluation.name() : __CriticalEvaluation,
        __Prediction.name() : __Prediction
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_25 = CTD_ANON_25


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 869, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePropName uses Python identifier ePropName
    __ePropName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), 'ePropName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_26_httpwww_iupac_orgnamespacesThermoMLePropName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 871, 16), )

    
    ePropName = property(__ePropName.value, __ePropName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eMethodName uses Python identifier eMethodName
    __eMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), 'eMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_26_httpwww_iupac_orgnamespacesThermoMLeMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 906, 17), )

    
    eMethodName = property(__eMethodName.value, __eMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sMethodName uses Python identifier sMethodName
    __sMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), 'sMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_26_httpwww_iupac_orgnamespacesThermoMLsMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 936, 17), )

    
    sMethodName = property(__sMethodName.value, __sMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CriticalEvaluation uses Python identifier CriticalEvaluation
    __CriticalEvaluation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), 'CriticalEvaluation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_26_httpwww_iupac_orgnamespacesThermoMLCriticalEvaluation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1), )

    
    CriticalEvaluation = property(__CriticalEvaluation.value, __CriticalEvaluation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Prediction uses Python identifier Prediction
    __Prediction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), 'Prediction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_26_httpwww_iupac_orgnamespacesThermoMLPrediction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1), )

    
    Prediction = property(__Prediction.value, __Prediction.set, None, None)

    _ElementMap.update({
        __ePropName.name() : __ePropName,
        __eMethodName.name() : __eMethodName,
        __sMethodName.name() : __sMethodName,
        __CriticalEvaluation.name() : __CriticalEvaluation,
        __Prediction.name() : __Prediction
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_26 = CTD_ANON_26


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 944, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePropName uses Python identifier ePropName
    __ePropName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), 'ePropName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_27_httpwww_iupac_orgnamespacesThermoMLePropName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 946, 16), )

    
    ePropName = property(__ePropName.value, __ePropName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eMethodName uses Python identifier eMethodName
    __eMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), 'eMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_27_httpwww_iupac_orgnamespacesThermoMLeMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 973, 17), )

    
    eMethodName = property(__eMethodName.value, __eMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sMethodName uses Python identifier sMethodName
    __sMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), 'sMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_27_httpwww_iupac_orgnamespacesThermoMLsMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1000, 17), )

    
    sMethodName = property(__sMethodName.value, __sMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CriticalEvaluation uses Python identifier CriticalEvaluation
    __CriticalEvaluation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), 'CriticalEvaluation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_27_httpwww_iupac_orgnamespacesThermoMLCriticalEvaluation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1), )

    
    CriticalEvaluation = property(__CriticalEvaluation.value, __CriticalEvaluation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Prediction uses Python identifier Prediction
    __Prediction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), 'Prediction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_27_httpwww_iupac_orgnamespacesThermoMLPrediction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1), )

    
    Prediction = property(__Prediction.value, __Prediction.set, None, None)

    _ElementMap.update({
        __ePropName.name() : __ePropName,
        __eMethodName.name() : __eMethodName,
        __sMethodName.name() : __sMethodName,
        __CriticalEvaluation.name() : __CriticalEvaluation,
        __Prediction.name() : __Prediction
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_27 = CTD_ANON_27


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1008, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePropName uses Python identifier ePropName
    __ePropName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), 'ePropName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_28_httpwww_iupac_orgnamespacesThermoMLePropName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1010, 16), )

    
    ePropName = property(__ePropName.value, __ePropName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eMethodName uses Python identifier eMethodName
    __eMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), 'eMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_28_httpwww_iupac_orgnamespacesThermoMLeMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1056, 17), )

    
    eMethodName = property(__eMethodName.value, __eMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sMethodName uses Python identifier sMethodName
    __sMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), 'sMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_28_httpwww_iupac_orgnamespacesThermoMLsMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1077, 17), )

    
    sMethodName = property(__sMethodName.value, __sMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CriticalEvaluation uses Python identifier CriticalEvaluation
    __CriticalEvaluation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), 'CriticalEvaluation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_28_httpwww_iupac_orgnamespacesThermoMLCriticalEvaluation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1), )

    
    CriticalEvaluation = property(__CriticalEvaluation.value, __CriticalEvaluation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Prediction uses Python identifier Prediction
    __Prediction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), 'Prediction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_28_httpwww_iupac_orgnamespacesThermoMLPrediction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1), )

    
    Prediction = property(__Prediction.value, __Prediction.set, None, None)

    _ElementMap.update({
        __ePropName.name() : __ePropName,
        __eMethodName.name() : __eMethodName,
        __sMethodName.name() : __sMethodName,
        __CriticalEvaluation.name() : __CriticalEvaluation,
        __Prediction.name() : __Prediction
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_28 = CTD_ANON_28


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1085, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePropName uses Python identifier ePropName
    __ePropName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), 'ePropName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_29_httpwww_iupac_orgnamespacesThermoMLePropName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1087, 16), )

    
    ePropName = property(__ePropName.value, __ePropName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eMethodName uses Python identifier eMethodName
    __eMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), 'eMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_29_httpwww_iupac_orgnamespacesThermoMLeMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1106, 17), )

    
    eMethodName = property(__eMethodName.value, __eMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sMethodName uses Python identifier sMethodName
    __sMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), 'sMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_29_httpwww_iupac_orgnamespacesThermoMLsMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1141, 17), )

    
    sMethodName = property(__sMethodName.value, __sMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CriticalEvaluation uses Python identifier CriticalEvaluation
    __CriticalEvaluation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), 'CriticalEvaluation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_29_httpwww_iupac_orgnamespacesThermoMLCriticalEvaluation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1), )

    
    CriticalEvaluation = property(__CriticalEvaluation.value, __CriticalEvaluation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Prediction uses Python identifier Prediction
    __Prediction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), 'Prediction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_29_httpwww_iupac_orgnamespacesThermoMLPrediction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1), )

    
    Prediction = property(__Prediction.value, __Prediction.set, None, None)

    _ElementMap.update({
        __ePropName.name() : __ePropName,
        __eMethodName.name() : __eMethodName,
        __sMethodName.name() : __sMethodName,
        __CriticalEvaluation.name() : __CriticalEvaluation,
        __Prediction.name() : __Prediction
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_29 = CTD_ANON_29


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1149, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePropName uses Python identifier ePropName
    __ePropName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), 'ePropName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_30_httpwww_iupac_orgnamespacesThermoMLePropName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1151, 16), )

    
    ePropName = property(__ePropName.value, __ePropName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eMethodName uses Python identifier eMethodName
    __eMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), 'eMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_30_httpwww_iupac_orgnamespacesThermoMLeMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1172, 17), )

    
    eMethodName = property(__eMethodName.value, __eMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sMethodName uses Python identifier sMethodName
    __sMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), 'sMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_30_httpwww_iupac_orgnamespacesThermoMLsMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1209, 17), )

    
    sMethodName = property(__sMethodName.value, __sMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CriticalEvaluation uses Python identifier CriticalEvaluation
    __CriticalEvaluation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), 'CriticalEvaluation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_30_httpwww_iupac_orgnamespacesThermoMLCriticalEvaluation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1), )

    
    CriticalEvaluation = property(__CriticalEvaluation.value, __CriticalEvaluation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Prediction uses Python identifier Prediction
    __Prediction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), 'Prediction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_30_httpwww_iupac_orgnamespacesThermoMLPrediction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1), )

    
    Prediction = property(__Prediction.value, __Prediction.set, None, None)

    _ElementMap.update({
        __ePropName.name() : __ePropName,
        __eMethodName.name() : __eMethodName,
        __sMethodName.name() : __sMethodName,
        __CriticalEvaluation.name() : __CriticalEvaluation,
        __Prediction.name() : __Prediction
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_30 = CTD_ANON_30


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1217, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePropName uses Python identifier ePropName
    __ePropName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), 'ePropName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_31_httpwww_iupac_orgnamespacesThermoMLePropName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1219, 16), )

    
    ePropName = property(__ePropName.value, __ePropName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eMethodName uses Python identifier eMethodName
    __eMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), 'eMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_31_httpwww_iupac_orgnamespacesThermoMLeMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1231, 17), )

    
    eMethodName = property(__eMethodName.value, __eMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sMethodName uses Python identifier sMethodName
    __sMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), 'sMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_31_httpwww_iupac_orgnamespacesThermoMLsMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1238, 17), )

    
    sMethodName = property(__sMethodName.value, __sMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CriticalEvaluation uses Python identifier CriticalEvaluation
    __CriticalEvaluation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), 'CriticalEvaluation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_31_httpwww_iupac_orgnamespacesThermoMLCriticalEvaluation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1), )

    
    CriticalEvaluation = property(__CriticalEvaluation.value, __CriticalEvaluation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Prediction uses Python identifier Prediction
    __Prediction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), 'Prediction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_31_httpwww_iupac_orgnamespacesThermoMLPrediction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1), )

    
    Prediction = property(__Prediction.value, __Prediction.set, None, None)

    _ElementMap.update({
        __ePropName.name() : __ePropName,
        __eMethodName.name() : __eMethodName,
        __sMethodName.name() : __sMethodName,
        __CriticalEvaluation.name() : __CriticalEvaluation,
        __Prediction.name() : __Prediction
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_31 = CTD_ANON_31


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (pyxb.binding.basis.complexTypeDefinition):
    """ CASRN is necessary for mixtures only"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1259, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePropPhase uses Python identifier ePropPhase
    __ePropPhase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePropPhase'), 'ePropPhase', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_32_httpwww_iupac_orgnamespacesThermoMLePropPhase', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1261, 10), )

    
    ePropPhase = property(__ePropPhase.value, __ePropPhase.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eCrystalLatticeType uses Python identifier eCrystalLatticeType
    __eCrystalLatticeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType'), 'eCrystalLatticeType', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_32_httpwww_iupac_orgnamespacesThermoMLeCrystalLatticeType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1263, 11), )

    
    eCrystalLatticeType = property(__eCrystalLatticeType.value, __eCrystalLatticeType.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sPhaseDescription uses Python identifier sPhaseDescription
    __sPhaseDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription'), 'sPhaseDescription', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_32_httpwww_iupac_orgnamespacesThermoMLsPhaseDescription', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1264, 11), )

    
    sPhaseDescription = property(__sPhaseDescription.value, __sPhaseDescription.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_32_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1267, 11), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eBioState uses Python identifier eBioState
    __eBioState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eBioState'), 'eBioState', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_32_httpwww_iupac_orgnamespacesThermoMLeBioState', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1271, 11), )

    
    eBioState = property(__eBioState.value, __eBioState.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sBioState uses Python identifier sBioState
    __sBioState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sBioState'), 'sBioState', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_32_httpwww_iupac_orgnamespacesThermoMLsBioState', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1279, 11), )

    
    sBioState = property(__sBioState.value, __sBioState.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_32_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __ePropPhase.name() : __ePropPhase,
        __eCrystalLatticeType.name() : __eCrystalLatticeType,
        __sPhaseDescription.name() : __sPhaseDescription,
        __nCompIndex.name() : __nCompIndex,
        __eBioState.name() : __eBioState,
        __sBioState.name() : __sBioState,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_32 = CTD_ANON_32


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (pyxb.binding.basis.complexTypeDefinition):
    """ CASRN is necessary for mixtures only"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1298, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}eRefPhase uses Python identifier eRefPhase
    __eRefPhase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eRefPhase'), 'eRefPhase', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_33_httpwww_iupac_orgnamespacesThermoMLeRefPhase', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1300, 10), )

    
    eRefPhase = property(__eRefPhase.value, __eRefPhase.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eCrystalLatticeType uses Python identifier eCrystalLatticeType
    __eCrystalLatticeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType'), 'eCrystalLatticeType', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_33_httpwww_iupac_orgnamespacesThermoMLeCrystalLatticeType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1302, 11), )

    
    eCrystalLatticeType = property(__eCrystalLatticeType.value, __eCrystalLatticeType.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sPhaseDescription uses Python identifier sPhaseDescription
    __sPhaseDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription'), 'sPhaseDescription', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_33_httpwww_iupac_orgnamespacesThermoMLsPhaseDescription', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1303, 11), )

    
    sPhaseDescription = property(__sPhaseDescription.value, __sPhaseDescription.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_33_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1306, 11), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_33_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __eRefPhase.name() : __eRefPhase,
        __eCrystalLatticeType.name() : __eCrystalLatticeType,
        __sPhaseDescription.name() : __sPhaseDescription,
        __nCompIndex.name() : __nCompIndex,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_33 = CTD_ANON_33


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (pyxb.binding.basis.complexTypeDefinition):
    """ CASRN is necessary for mixtures only"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1340, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePhase uses Python identifier ePhase
    __ePhase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePhase'), 'ePhase', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_34_httpwww_iupac_orgnamespacesThermoMLePhase', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1342, 7), )

    
    ePhase = property(__ePhase.value, __ePhase.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eCrystalLatticeType uses Python identifier eCrystalLatticeType
    __eCrystalLatticeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType'), 'eCrystalLatticeType', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_34_httpwww_iupac_orgnamespacesThermoMLeCrystalLatticeType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1344, 8), )

    
    eCrystalLatticeType = property(__eCrystalLatticeType.value, __eCrystalLatticeType.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sPhaseDescription uses Python identifier sPhaseDescription
    __sPhaseDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription'), 'sPhaseDescription', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_34_httpwww_iupac_orgnamespacesThermoMLsPhaseDescription', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1345, 8), )

    
    sPhaseDescription = property(__sPhaseDescription.value, __sPhaseDescription.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_34_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1348, 8), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_34_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __ePhase.name() : __ePhase,
        __eCrystalLatticeType.name() : __eCrystalLatticeType,
        __sPhaseDescription.name() : __sPhaseDescription,
        __nCompIndex.name() : __nCompIndex,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_34 = CTD_ANON_34


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1355, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nConstraintNumber uses Python identifier nConstraintNumber
    __nConstraintNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nConstraintNumber'), 'nConstraintNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_35_httpwww_iupac_orgnamespacesThermoMLnConstraintNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1357, 7), )

    
    nConstraintNumber = property(__nConstraintNumber.value, __nConstraintNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ConstraintID uses Python identifier ConstraintID
    __ConstraintID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ConstraintID'), 'ConstraintID', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_35_httpwww_iupac_orgnamespacesThermoMLConstraintID', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1358, 7), )

    
    ConstraintID = property(__ConstraintID.value, __ConstraintID.set, None, ' CASRN is necessary for mixtures only')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ConstraintPhaseID uses Python identifier ConstraintPhaseID
    __ConstraintPhaseID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ConstraintPhaseID'), 'ConstraintPhaseID', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_35_httpwww_iupac_orgnamespacesThermoMLConstraintPhaseID', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1372, 7), )

    
    ConstraintPhaseID = property(__ConstraintPhaseID.value, __ConstraintPhaseID.set, None, ' CASRN is necessary for mixtures only')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nConstraintValue uses Python identifier nConstraintValue
    __nConstraintValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nConstraintValue'), 'nConstraintValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_35_httpwww_iupac_orgnamespacesThermoMLnConstraintValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1391, 7), )

    
    nConstraintValue = property(__nConstraintValue.value, __nConstraintValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nConstrDigits uses Python identifier nConstrDigits
    __nConstrDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nConstrDigits'), 'nConstrDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_35_httpwww_iupac_orgnamespacesThermoMLnConstrDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1392, 7), )

    
    nConstrDigits = property(__nConstrDigits.value, __nConstrDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ConstrUncertainty uses Python identifier ConstrUncertainty
    __ConstrUncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ConstrUncertainty'), 'ConstrUncertainty', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_35_httpwww_iupac_orgnamespacesThermoMLConstrUncertainty', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1393, 7), )

    
    ConstrUncertainty = property(__ConstrUncertainty.value, __ConstrUncertainty.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ConstrRepeatability uses Python identifier ConstrRepeatability
    __ConstrRepeatability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ConstrRepeatability'), 'ConstrRepeatability', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_35_httpwww_iupac_orgnamespacesThermoMLConstrRepeatability', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1394, 7), )

    
    ConstrRepeatability = property(__ConstrRepeatability.value, __ConstrRepeatability.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ConstrDeviceSpec uses Python identifier ConstrDeviceSpec
    __ConstrDeviceSpec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ConstrDeviceSpec'), 'ConstrDeviceSpec', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_35_httpwww_iupac_orgnamespacesThermoMLConstrDeviceSpec', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1395, 7), )

    
    ConstrDeviceSpec = property(__ConstrDeviceSpec.value, __ConstrDeviceSpec.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Solvent uses Python identifier Solvent
    __Solvent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Solvent'), 'Solvent', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_35_httpwww_iupac_orgnamespacesThermoMLSolvent', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2085, 1), )

    
    Solvent = property(__Solvent.value, __Solvent.set, None, None)

    _ElementMap.update({
        __nConstraintNumber.name() : __nConstraintNumber,
        __ConstraintID.name() : __ConstraintID,
        __ConstraintPhaseID.name() : __ConstraintPhaseID,
        __nConstraintValue.name() : __nConstraintValue,
        __nConstrDigits.name() : __nConstrDigits,
        __ConstrUncertainty.name() : __ConstrUncertainty,
        __ConstrRepeatability.name() : __ConstrRepeatability,
        __ConstrDeviceSpec.name() : __ConstrDeviceSpec,
        __Solvent.name() : __Solvent
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_35 = CTD_ANON_35


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_36 (pyxb.binding.basis.complexTypeDefinition):
    """ CASRN is necessary for mixtures only"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1362, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ConstraintType uses Python identifier ConstraintType
    __ConstraintType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ConstraintType'), 'ConstraintType', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_36_httpwww_iupac_orgnamespacesThermoMLConstraintType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1364, 10), )

    
    ConstraintType = property(__ConstraintType.value, __ConstraintType.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_36_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1366, 11), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_36_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __ConstraintType.name() : __ConstraintType,
        __nCompIndex.name() : __nCompIndex,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_36 = CTD_ANON_36


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (pyxb.binding.basis.complexTypeDefinition):
    """ CASRN is necessary for mixtures only"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1376, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}eConstraintPhase uses Python identifier eConstraintPhase
    __eConstraintPhase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eConstraintPhase'), 'eConstraintPhase', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_37_httpwww_iupac_orgnamespacesThermoMLeConstraintPhase', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1378, 10), )

    
    eConstraintPhase = property(__eConstraintPhase.value, __eConstraintPhase.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eCrystalLatticeType uses Python identifier eCrystalLatticeType
    __eCrystalLatticeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType'), 'eCrystalLatticeType', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_37_httpwww_iupac_orgnamespacesThermoMLeCrystalLatticeType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1380, 11), )

    
    eCrystalLatticeType = property(__eCrystalLatticeType.value, __eCrystalLatticeType.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sPhaseDescription uses Python identifier sPhaseDescription
    __sPhaseDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription'), 'sPhaseDescription', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_37_httpwww_iupac_orgnamespacesThermoMLsPhaseDescription', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1381, 11), )

    
    sPhaseDescription = property(__sPhaseDescription.value, __sPhaseDescription.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_37_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1384, 11), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_37_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __eConstraintPhase.name() : __eConstraintPhase,
        __eCrystalLatticeType.name() : __eCrystalLatticeType,
        __sPhaseDescription.name() : __sPhaseDescription,
        __nCompIndex.name() : __nCompIndex,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_37 = CTD_ANON_37


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1400, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nVarNumber uses Python identifier nVarNumber
    __nVarNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nVarNumber'), 'nVarNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_38_httpwww_iupac_orgnamespacesThermoMLnVarNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1402, 7), )

    
    nVarNumber = property(__nVarNumber.value, __nVarNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}VariableID uses Python identifier VariableID
    __VariableID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VariableID'), 'VariableID', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_38_httpwww_iupac_orgnamespacesThermoMLVariableID', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1403, 7), )

    
    VariableID = property(__VariableID.value, __VariableID.set, None, ' CASRN is necessary for mixtures only')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}VarPhaseID uses Python identifier VarPhaseID
    __VarPhaseID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VarPhaseID'), 'VarPhaseID', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_38_httpwww_iupac_orgnamespacesThermoMLVarPhaseID', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1417, 7), )

    
    VarPhaseID = property(__VarPhaseID.value, __VarPhaseID.set, None, ' CASRN is necessary for mixtures only')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}VarUncertainty uses Python identifier VarUncertainty
    __VarUncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VarUncertainty'), 'VarUncertainty', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_38_httpwww_iupac_orgnamespacesThermoMLVarUncertainty', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1436, 7), )

    
    VarUncertainty = property(__VarUncertainty.value, __VarUncertainty.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}VarRepeatability uses Python identifier VarRepeatability
    __VarRepeatability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VarRepeatability'), 'VarRepeatability', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_38_httpwww_iupac_orgnamespacesThermoMLVarRepeatability', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1437, 7), )

    
    VarRepeatability = property(__VarRepeatability.value, __VarRepeatability.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}VarDeviceSpec uses Python identifier VarDeviceSpec
    __VarDeviceSpec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VarDeviceSpec'), 'VarDeviceSpec', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_38_httpwww_iupac_orgnamespacesThermoMLVarDeviceSpec', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1438, 7), )

    
    VarDeviceSpec = property(__VarDeviceSpec.value, __VarDeviceSpec.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Solvent uses Python identifier Solvent
    __Solvent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Solvent'), 'Solvent', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_38_httpwww_iupac_orgnamespacesThermoMLSolvent', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2085, 1), )

    
    Solvent = property(__Solvent.value, __Solvent.set, None, None)

    _ElementMap.update({
        __nVarNumber.name() : __nVarNumber,
        __VariableID.name() : __VariableID,
        __VarPhaseID.name() : __VarPhaseID,
        __VarUncertainty.name() : __VarUncertainty,
        __VarRepeatability.name() : __VarRepeatability,
        __VarDeviceSpec.name() : __VarDeviceSpec,
        __Solvent.name() : __Solvent
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_38 = CTD_ANON_38


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (pyxb.binding.basis.complexTypeDefinition):
    """ CASRN is necessary for mixtures only"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1407, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}VariableType uses Python identifier VariableType
    __VariableType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VariableType'), 'VariableType', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_39_httpwww_iupac_orgnamespacesThermoMLVariableType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1409, 10), )

    
    VariableType = property(__VariableType.value, __VariableType.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_39_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1411, 11), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_39_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __VariableType.name() : __VariableType,
        __nCompIndex.name() : __nCompIndex,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_39 = CTD_ANON_39


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (pyxb.binding.basis.complexTypeDefinition):
    """ CASRN is necessary for mixtures only"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1421, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}eVarPhase uses Python identifier eVarPhase
    __eVarPhase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eVarPhase'), 'eVarPhase', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_40_httpwww_iupac_orgnamespacesThermoMLeVarPhase', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1423, 10), )

    
    eVarPhase = property(__eVarPhase.value, __eVarPhase.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eCrystalLatticeType uses Python identifier eCrystalLatticeType
    __eCrystalLatticeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType'), 'eCrystalLatticeType', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_40_httpwww_iupac_orgnamespacesThermoMLeCrystalLatticeType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1425, 11), )

    
    eCrystalLatticeType = property(__eCrystalLatticeType.value, __eCrystalLatticeType.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sPhaseDescription uses Python identifier sPhaseDescription
    __sPhaseDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription'), 'sPhaseDescription', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_40_httpwww_iupac_orgnamespacesThermoMLsPhaseDescription', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1426, 11), )

    
    sPhaseDescription = property(__sPhaseDescription.value, __sPhaseDescription.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_40_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1429, 11), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_40_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __eVarPhase.name() : __eVarPhase,
        __eCrystalLatticeType.name() : __eCrystalLatticeType,
        __sPhaseDescription.name() : __sPhaseDescription,
        __nCompIndex.name() : __nCompIndex,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_40 = CTD_ANON_40


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1451, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nReactionDataNumber uses Python identifier nReactionDataNumber
    __nReactionDataNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nReactionDataNumber'), 'nReactionDataNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLnReactionDataNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1453, 4), )

    
    nReactionDataNumber = property(__nReactionDataNumber.value, __nReactionDataNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Participant uses Python identifier Participant
    __Participant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Participant'), 'Participant', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLParticipant', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1454, 4), )

    
    Participant = property(__Participant.value, __Participant.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nElectronNumber uses Python identifier nElectronNumber
    __nElectronNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nElectronNumber'), 'nElectronNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLnElectronNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1501, 4), )

    
    nElectronNumber = property(__nElectronNumber.value, __nElectronNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}AuxiliarySubstance uses Python identifier AuxiliarySubstance
    __AuxiliarySubstance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AuxiliarySubstance'), 'AuxiliarySubstance', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLAuxiliarySubstance', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1502, 4), )

    
    AuxiliarySubstance = property(__AuxiliarySubstance.value, __AuxiliarySubstance.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Solvent uses Python identifier Solvent
    __Solvent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Solvent'), 'Solvent', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLSolvent', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1526, 4), )

    
    Solvent = property(__Solvent.value, __Solvent.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eReactionFormalism uses Python identifier eReactionFormalism
    __eReactionFormalism = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eReactionFormalism'), 'eReactionFormalism', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLeReactionFormalism', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1537, 4), )

    
    eReactionFormalism = property(__eReactionFormalism.value, __eReactionFormalism.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eExpPurpose uses Python identifier eExpPurpose
    __eExpPurpose = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eExpPurpose'), 'eExpPurpose', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLeExpPurpose', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1545, 4), )

    
    eExpPurpose = property(__eExpPurpose.value, __eExpPurpose.set, None, 'Purpose of measurement')

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sCompiler uses Python identifier sCompiler
    __sCompiler = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sCompiler'), 'sCompiler', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLsCompiler', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1550, 4), )

    
    sCompiler = property(__sCompiler.value, __sCompiler.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sContributor uses Python identifier sContributor
    __sContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sContributor'), 'sContributor', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLsContributor', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1551, 4), )

    
    sContributor = property(__sContributor.value, __sContributor.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}dateDateAdded uses Python identifier dateDateAdded
    __dateDateAdded = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDateAdded'), 'dateDateAdded', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLdateDateAdded', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1552, 4), )

    
    dateDateAdded = property(__dateDateAdded.value, __dateDateAdded.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eReactionType uses Python identifier eReactionType
    __eReactionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eReactionType'), 'eReactionType', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLeReactionType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1553, 4), )

    
    eReactionType = property(__eReactionType.value, __eReactionType.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Property uses Python identifier Property
    __Property = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Property'), 'Property', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLProperty', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1584, 4), )

    
    Property = property(__Property.value, __Property.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Constraint uses Python identifier Constraint
    __Constraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Constraint'), 'Constraint', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLConstraint', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1793, 4), )

    
    Constraint = property(__Constraint.value, __Constraint.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Variable uses Python identifier Variable
    __Variable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Variable'), 'Variable', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLVariable', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1816, 4), )

    
    Variable = property(__Variable.value, __Variable.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}NumValues uses Python identifier NumValues
    __NumValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NumValues'), 'NumValues', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLNumValues', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2349, 1), )

    
    NumValues = property(__NumValues.value, __NumValues.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Equation uses Python identifier Equation
    __Equation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Equation'), 'Equation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_41_httpwww_iupac_orgnamespacesThermoMLEquation', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2521, 1), )

    
    Equation = property(__Equation.value, __Equation.set, None, None)

    _ElementMap.update({
        __nReactionDataNumber.name() : __nReactionDataNumber,
        __Participant.name() : __Participant,
        __nElectronNumber.name() : __nElectronNumber,
        __AuxiliarySubstance.name() : __AuxiliarySubstance,
        __Solvent.name() : __Solvent,
        __eReactionFormalism.name() : __eReactionFormalism,
        __eExpPurpose.name() : __eExpPurpose,
        __sCompiler.name() : __sCompiler,
        __sContributor.name() : __sContributor,
        __dateDateAdded.name() : __dateDateAdded,
        __eReactionType.name() : __eReactionType,
        __Property.name() : __Property,
        __Constraint.name() : __Constraint,
        __Variable.name() : __Variable,
        __NumValues.name() : __NumValues,
        __Equation.name() : __Equation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_41 = CTD_ANON_41


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1455, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_42_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1458, 8), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nSampleNm uses Python identifier nSampleNm
    __nSampleNm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm'), 'nSampleNm', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_42_httpwww_iupac_orgnamespacesThermoMLnSampleNm', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1461, 7), )

    
    nSampleNm = property(__nSampleNm.value, __nSampleNm.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nStoichiometricCoef uses Python identifier nStoichiometricCoef
    __nStoichiometricCoef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nStoichiometricCoef'), 'nStoichiometricCoef', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_42_httpwww_iupac_orgnamespacesThermoMLnStoichiometricCoef', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1462, 7), )

    
    nStoichiometricCoef = property(__nStoichiometricCoef.value, __nStoichiometricCoef.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePhase uses Python identifier ePhase
    __ePhase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePhase'), 'ePhase', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_42_httpwww_iupac_orgnamespacesThermoMLePhase', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1463, 7), )

    
    ePhase = property(__ePhase.value, __ePhase.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eCrystalLatticeType uses Python identifier eCrystalLatticeType
    __eCrystalLatticeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType'), 'eCrystalLatticeType', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_42_httpwww_iupac_orgnamespacesThermoMLeCrystalLatticeType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1465, 8), )

    
    eCrystalLatticeType = property(__eCrystalLatticeType.value, __eCrystalLatticeType.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sPhaseDescription uses Python identifier sPhaseDescription
    __sPhaseDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription'), 'sPhaseDescription', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_42_httpwww_iupac_orgnamespacesThermoMLsPhaseDescription', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1466, 8), )

    
    sPhaseDescription = property(__sPhaseDescription.value, __sPhaseDescription.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eStandardState uses Python identifier eStandardState
    __eStandardState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eStandardState'), 'eStandardState', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_42_httpwww_iupac_orgnamespacesThermoMLeStandardState', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1468, 7), )

    
    eStandardState = property(__eStandardState.value, __eStandardState.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eCompositionRepresentation uses Python identifier eCompositionRepresentation
    __eCompositionRepresentation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eCompositionRepresentation'), 'eCompositionRepresentation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_42_httpwww_iupac_orgnamespacesThermoMLeCompositionRepresentation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1483, 7), )

    
    eCompositionRepresentation = property(__eCompositionRepresentation.value, __eCompositionRepresentation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nNumericalComposition uses Python identifier nNumericalComposition
    __nNumericalComposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nNumericalComposition'), 'nNumericalComposition', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_42_httpwww_iupac_orgnamespacesThermoMLnNumericalComposition', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1497, 7), )

    
    nNumericalComposition = property(__nNumericalComposition.value, __nNumericalComposition.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_42_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __nCompIndex.name() : __nCompIndex,
        __nSampleNm.name() : __nSampleNm,
        __nStoichiometricCoef.name() : __nStoichiometricCoef,
        __ePhase.name() : __ePhase,
        __eCrystalLatticeType.name() : __eCrystalLatticeType,
        __sPhaseDescription.name() : __sPhaseDescription,
        __eStandardState.name() : __eStandardState,
        __eCompositionRepresentation.name() : __eCompositionRepresentation,
        __nNumericalComposition.name() : __nNumericalComposition,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_42 = CTD_ANON_42


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1503, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}eFunction uses Python identifier eFunction
    __eFunction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eFunction'), 'eFunction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_43_httpwww_iupac_orgnamespacesThermoMLeFunction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1506, 8), )

    
    eFunction = property(__eFunction.value, __eFunction.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sFunction uses Python identifier sFunction
    __sFunction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sFunction'), 'sFunction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_43_httpwww_iupac_orgnamespacesThermoMLsFunction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1515, 8), )

    
    sFunction = property(__sFunction.value, __sFunction.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_43_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1518, 8), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nSampleNm uses Python identifier nSampleNm
    __nSampleNm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm'), 'nSampleNm', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_43_httpwww_iupac_orgnamespacesThermoMLnSampleNm', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1521, 7), )

    
    nSampleNm = property(__nSampleNm.value, __nSampleNm.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePhase uses Python identifier ePhase
    __ePhase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePhase'), 'ePhase', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_43_httpwww_iupac_orgnamespacesThermoMLePhase', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1522, 7), )

    
    ePhase = property(__ePhase.value, __ePhase.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_43_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __eFunction.name() : __eFunction,
        __sFunction.name() : __sFunction,
        __nCompIndex.name() : __nCompIndex,
        __nSampleNm.name() : __nSampleNm,
        __ePhase.name() : __ePhase,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_43 = CTD_ANON_43


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1527, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_44_httpwww_iupac_orgnamespacesThermoMLnCompIndex', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1530, 8), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePhase uses Python identifier ePhase
    __ePhase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePhase'), 'ePhase', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_44_httpwww_iupac_orgnamespacesThermoMLePhase', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1533, 7), )

    
    ePhase = property(__ePhase.value, __ePhase.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_44_httpwww_iupac_orgnamespacesThermoMLRegNum', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __nCompIndex.name() : __nCompIndex,
        __ePhase.name() : __ePhase,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_44 = CTD_ANON_44


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1585, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPropNumber uses Python identifier nPropNumber
    __nPropNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPropNumber'), 'nPropNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_45_httpwww_iupac_orgnamespacesThermoMLnPropNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1587, 7), )

    
    nPropNumber = property(__nPropNumber.value, __nPropNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Property-MethodID uses Python identifier Property_MethodID
    __Property_MethodID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Property-MethodID'), 'Property_MethodID', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_45_httpwww_iupac_orgnamespacesThermoMLProperty_MethodID', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1588, 7), )

    
    Property_MethodID = property(__Property_MethodID.value, __Property_MethodID.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Solvent uses Python identifier Solvent
    __Solvent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Solvent'), 'Solvent', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_45_httpwww_iupac_orgnamespacesThermoMLSolvent', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1738, 7), )

    
    Solvent = property(__Solvent.value, __Solvent.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Catalyst uses Python identifier Catalyst
    __Catalyst = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Catalyst'), 'Catalyst', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_45_httpwww_iupac_orgnamespacesThermoMLCatalyst', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1749, 7), )

    
    Catalyst = property(__Catalyst.value, __Catalyst.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eStandardState uses Python identifier eStandardState
    __eStandardState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eStandardState'), 'eStandardState', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_45_httpwww_iupac_orgnamespacesThermoMLeStandardState', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1760, 7), )

    
    eStandardState = property(__eStandardState.value, __eStandardState.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nTemperature-K uses Python identifier nTemperature_K
    __nTemperature_K = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nTemperature-K'), 'nTemperature_K', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_45_httpwww_iupac_orgnamespacesThermoMLnTemperature_K', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1776, 8), )

    
    nTemperature_K = property(__nTemperature_K.value, __nTemperature_K.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nTemperatureDigits uses Python identifier nTemperatureDigits
    __nTemperatureDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nTemperatureDigits'), 'nTemperatureDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_45_httpwww_iupac_orgnamespacesThermoMLnTemperatureDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1778, 8), )

    
    nTemperatureDigits = property(__nTemperatureDigits.value, __nTemperatureDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPressure-kPa uses Python identifier nPressure_kPa
    __nPressure_kPa = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPressure-kPa'), 'nPressure_kPa', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_45_httpwww_iupac_orgnamespacesThermoMLnPressure_kPa', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1781, 8), )

    
    nPressure_kPa = property(__nPressure_kPa.value, __nPressure_kPa.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPressureDigits uses Python identifier nPressureDigits
    __nPressureDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPressureDigits'), 'nPressureDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_45_httpwww_iupac_orgnamespacesThermoMLnPressureDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1783, 8), )

    
    nPressureDigits = property(__nPressureDigits.value, __nPressureDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PropUncertainty uses Python identifier PropUncertainty
    __PropUncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropUncertainty'), 'PropUncertainty', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_45_httpwww_iupac_orgnamespacesThermoMLPropUncertainty', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1786, 7), )

    
    PropUncertainty = property(__PropUncertainty.value, __PropUncertainty.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PropRepeatability uses Python identifier PropRepeatability
    __PropRepeatability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropRepeatability'), 'PropRepeatability', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_45_httpwww_iupac_orgnamespacesThermoMLPropRepeatability', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1787, 7), )

    
    PropRepeatability = property(__PropRepeatability.value, __PropRepeatability.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PropDeviceSpec uses Python identifier PropDeviceSpec
    __PropDeviceSpec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropDeviceSpec'), 'PropDeviceSpec', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_45_httpwww_iupac_orgnamespacesThermoMLPropDeviceSpec', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1788, 7), )

    
    PropDeviceSpec = property(__PropDeviceSpec.value, __PropDeviceSpec.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CurveDev uses Python identifier CurveDev
    __CurveDev = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurveDev'), 'CurveDev', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_45_httpwww_iupac_orgnamespacesThermoMLCurveDev', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2279, 1), )

    
    CurveDev = property(__CurveDev.value, __CurveDev.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CombinedUncertainty uses Python identifier CombinedUncertainty
    __CombinedUncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CombinedUncertainty'), 'CombinedUncertainty', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_45_httpwww_iupac_orgnamespacesThermoMLCombinedUncertainty', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2327, 1), )

    
    CombinedUncertainty = property(__CombinedUncertainty.value, __CombinedUncertainty.set, None, None)

    _ElementMap.update({
        __nPropNumber.name() : __nPropNumber,
        __Property_MethodID.name() : __Property_MethodID,
        __Solvent.name() : __Solvent,
        __Catalyst.name() : __Catalyst,
        __eStandardState.name() : __eStandardState,
        __nTemperature_K.name() : __nTemperature_K,
        __nTemperatureDigits.name() : __nTemperatureDigits,
        __nPressure_kPa.name() : __nPressure_kPa,
        __nPressureDigits.name() : __nPressureDigits,
        __PropUncertainty.name() : __PropUncertainty,
        __PropRepeatability.name() : __PropRepeatability,
        __PropDeviceSpec.name() : __PropDeviceSpec,
        __CurveDev.name() : __CurveDev,
        __CombinedUncertainty.name() : __CombinedUncertainty
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_45 = CTD_ANON_45


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1589, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}PropertyGroup uses Python identifier PropertyGroup
    __PropertyGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropertyGroup'), 'PropertyGroup', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_46_httpwww_iupac_orgnamespacesThermoMLPropertyGroup', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1591, 10), )

    
    PropertyGroup = property(__PropertyGroup.value, __PropertyGroup.set, None, None)

    _ElementMap.update({
        __PropertyGroup.name() : __PropertyGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_46 = CTD_ANON_46


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_47 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1592, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ReactionStateChangeProp uses Python identifier ReactionStateChangeProp
    __ReactionStateChangeProp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReactionStateChangeProp'), 'ReactionStateChangeProp', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_47_httpwww_iupac_orgnamespacesThermoMLReactionStateChangeProp', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1594, 13), )

    
    ReactionStateChangeProp = property(__ReactionStateChangeProp.value, __ReactionStateChangeProp.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ReactionEquilibriumProp uses Python identifier ReactionEquilibriumProp
    __ReactionEquilibriumProp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReactionEquilibriumProp'), 'ReactionEquilibriumProp', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_47_httpwww_iupac_orgnamespacesThermoMLReactionEquilibriumProp', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1658, 13), )

    
    ReactionEquilibriumProp = property(__ReactionEquilibriumProp.value, __ReactionEquilibriumProp.set, None, None)

    _ElementMap.update({
        __ReactionStateChangeProp.name() : __ReactionStateChangeProp,
        __ReactionEquilibriumProp.name() : __ReactionEquilibriumProp
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_47 = CTD_ANON_47


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_48 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1595, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePropName uses Python identifier ePropName
    __ePropName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), 'ePropName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_48_httpwww_iupac_orgnamespacesThermoMLePropName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1597, 16), )

    
    ePropName = property(__ePropName.value, __ePropName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eMethodName uses Python identifier eMethodName
    __eMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), 'eMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_48_httpwww_iupac_orgnamespacesThermoMLeMethodName', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1611, 17), )

    
    eMethodName = property(__eMethodName.value, __eMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sMethodName uses Python identifier sMethodName
    __sMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), 'sMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_48_httpwww_iupac_orgnamespacesThermoMLsMethodName', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1651, 17), )

    
    sMethodName = property(__sMethodName.value, __sMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CriticalEvaluation uses Python identifier CriticalEvaluation
    __CriticalEvaluation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), 'CriticalEvaluation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_48_httpwww_iupac_orgnamespacesThermoMLCriticalEvaluation', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1), )

    
    CriticalEvaluation = property(__CriticalEvaluation.value, __CriticalEvaluation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Prediction uses Python identifier Prediction
    __Prediction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), 'Prediction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_48_httpwww_iupac_orgnamespacesThermoMLPrediction', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1), )

    
    Prediction = property(__Prediction.value, __Prediction.set, None, None)

    _ElementMap.update({
        __ePropName.name() : __ePropName,
        __eMethodName.name() : __eMethodName,
        __sMethodName.name() : __sMethodName,
        __CriticalEvaluation.name() : __CriticalEvaluation,
        __Prediction.name() : __Prediction
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_48 = CTD_ANON_48


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1659, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePropName uses Python identifier ePropName
    __ePropName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), 'ePropName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_49_httpwww_iupac_orgnamespacesThermoMLePropName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1661, 16), )

    
    ePropName = property(__ePropName.value, __ePropName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eMethodName uses Python identifier eMethodName
    __eMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), 'eMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_49_httpwww_iupac_orgnamespacesThermoMLeMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1683, 17), )

    
    eMethodName = property(__eMethodName.value, __eMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sMethodName uses Python identifier sMethodName
    __sMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), 'sMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_49_httpwww_iupac_orgnamespacesThermoMLsMethodName', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1725, 17), )

    
    sMethodName = property(__sMethodName.value, __sMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CriticalEvaluation uses Python identifier CriticalEvaluation
    __CriticalEvaluation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), 'CriticalEvaluation', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_49_httpwww_iupac_orgnamespacesThermoMLCriticalEvaluation', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1), )

    
    CriticalEvaluation = property(__CriticalEvaluation.value, __CriticalEvaluation.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Prediction uses Python identifier Prediction
    __Prediction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), 'Prediction', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_49_httpwww_iupac_orgnamespacesThermoMLPrediction', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1), )

    
    Prediction = property(__Prediction.value, __Prediction.set, None, None)

    _ElementMap.update({
        __ePropName.name() : __ePropName,
        __eMethodName.name() : __eMethodName,
        __sMethodName.name() : __sMethodName,
        __CriticalEvaluation.name() : __CriticalEvaluation,
        __Prediction.name() : __Prediction
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_49 = CTD_ANON_49


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_50 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1739, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_50_httpwww_iupac_orgnamespacesThermoMLnCompIndex', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1742, 11), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePhase uses Python identifier ePhase
    __ePhase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePhase'), 'ePhase', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_50_httpwww_iupac_orgnamespacesThermoMLePhase', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1745, 10), )

    
    ePhase = property(__ePhase.value, __ePhase.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_50_httpwww_iupac_orgnamespacesThermoMLRegNum', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __nCompIndex.name() : __nCompIndex,
        __ePhase.name() : __ePhase,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_50 = CTD_ANON_50


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1750, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_51_httpwww_iupac_orgnamespacesThermoMLnCompIndex', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1753, 11), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePhase uses Python identifier ePhase
    __ePhase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePhase'), 'ePhase', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_51_httpwww_iupac_orgnamespacesThermoMLePhase', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1756, 10), )

    
    ePhase = property(__ePhase.value, __ePhase.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_51_httpwww_iupac_orgnamespacesThermoMLRegNum', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __nCompIndex.name() : __nCompIndex,
        __ePhase.name() : __ePhase,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_51 = CTD_ANON_51


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1794, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nConstraintNumber uses Python identifier nConstraintNumber
    __nConstraintNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nConstraintNumber'), 'nConstraintNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_52_httpwww_iupac_orgnamespacesThermoMLnConstraintNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1796, 7), )

    
    nConstraintNumber = property(__nConstraintNumber.value, __nConstraintNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ConstraintID uses Python identifier ConstraintID
    __ConstraintID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ConstraintID'), 'ConstraintID', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_52_httpwww_iupac_orgnamespacesThermoMLConstraintID', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1797, 7), )

    
    ConstraintID = property(__ConstraintID.value, __ConstraintID.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nConstraintValue uses Python identifier nConstraintValue
    __nConstraintValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nConstraintValue'), 'nConstraintValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_52_httpwww_iupac_orgnamespacesThermoMLnConstraintValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1808, 7), )

    
    nConstraintValue = property(__nConstraintValue.value, __nConstraintValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nConstrDigits uses Python identifier nConstrDigits
    __nConstrDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nConstrDigits'), 'nConstrDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_52_httpwww_iupac_orgnamespacesThermoMLnConstrDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1809, 7), )

    
    nConstrDigits = property(__nConstrDigits.value, __nConstrDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ConstrUncertainty uses Python identifier ConstrUncertainty
    __ConstrUncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ConstrUncertainty'), 'ConstrUncertainty', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_52_httpwww_iupac_orgnamespacesThermoMLConstrUncertainty', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1810, 7), )

    
    ConstrUncertainty = property(__ConstrUncertainty.value, __ConstrUncertainty.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ConstrRepeatability uses Python identifier ConstrRepeatability
    __ConstrRepeatability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ConstrRepeatability'), 'ConstrRepeatability', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_52_httpwww_iupac_orgnamespacesThermoMLConstrRepeatability', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1811, 7), )

    
    ConstrRepeatability = property(__ConstrRepeatability.value, __ConstrRepeatability.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ConstrDeviceSpec uses Python identifier ConstrDeviceSpec
    __ConstrDeviceSpec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ConstrDeviceSpec'), 'ConstrDeviceSpec', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_52_httpwww_iupac_orgnamespacesThermoMLConstrDeviceSpec', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1812, 7), )

    
    ConstrDeviceSpec = property(__ConstrDeviceSpec.value, __ConstrDeviceSpec.set, None, None)

    _ElementMap.update({
        __nConstraintNumber.name() : __nConstraintNumber,
        __ConstraintID.name() : __ConstraintID,
        __nConstraintValue.name() : __nConstraintValue,
        __nConstrDigits.name() : __nConstrDigits,
        __ConstrUncertainty.name() : __ConstrUncertainty,
        __ConstrRepeatability.name() : __ConstrRepeatability,
        __ConstrDeviceSpec.name() : __ConstrDeviceSpec
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_52 = CTD_ANON_52


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1798, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ConstraintType uses Python identifier ConstraintType
    __ConstraintType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ConstraintType'), 'ConstraintType', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_53_httpwww_iupac_orgnamespacesThermoMLConstraintType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1800, 10), )

    
    ConstraintType = property(__ConstraintType.value, __ConstraintType.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_53_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1802, 11), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_53_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __ConstraintType.name() : __ConstraintType,
        __nCompIndex.name() : __nCompIndex,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_53 = CTD_ANON_53


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1817, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nVarNumber uses Python identifier nVarNumber
    __nVarNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nVarNumber'), 'nVarNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_54_httpwww_iupac_orgnamespacesThermoMLnVarNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1819, 7), )

    
    nVarNumber = property(__nVarNumber.value, __nVarNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}VariableID uses Python identifier VariableID
    __VariableID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VariableID'), 'VariableID', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_54_httpwww_iupac_orgnamespacesThermoMLVariableID', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1820, 7), )

    
    VariableID = property(__VariableID.value, __VariableID.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}VarPhaseID uses Python identifier VarPhaseID
    __VarPhaseID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VarPhaseID'), 'VarPhaseID', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_54_httpwww_iupac_orgnamespacesThermoMLVarPhaseID', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1831, 7), )

    
    VarPhaseID = property(__VarPhaseID.value, __VarPhaseID.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}VarUncertainty uses Python identifier VarUncertainty
    __VarUncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VarUncertainty'), 'VarUncertainty', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_54_httpwww_iupac_orgnamespacesThermoMLVarUncertainty', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1847, 14), )

    
    VarUncertainty = property(__VarUncertainty.value, __VarUncertainty.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}VarRepeatability uses Python identifier VarRepeatability
    __VarRepeatability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VarRepeatability'), 'VarRepeatability', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_54_httpwww_iupac_orgnamespacesThermoMLVarRepeatability', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1848, 7), )

    
    VarRepeatability = property(__VarRepeatability.value, __VarRepeatability.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}VarDeviceSpec uses Python identifier VarDeviceSpec
    __VarDeviceSpec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VarDeviceSpec'), 'VarDeviceSpec', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_54_httpwww_iupac_orgnamespacesThermoMLVarDeviceSpec', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1849, 7), )

    
    VarDeviceSpec = property(__VarDeviceSpec.value, __VarDeviceSpec.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Solvent uses Python identifier Solvent
    __Solvent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Solvent'), 'Solvent', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_54_httpwww_iupac_orgnamespacesThermoMLSolvent', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2085, 1), )

    
    Solvent = property(__Solvent.value, __Solvent.set, None, None)

    _ElementMap.update({
        __nVarNumber.name() : __nVarNumber,
        __VariableID.name() : __VariableID,
        __VarPhaseID.name() : __VarPhaseID,
        __VarUncertainty.name() : __VarUncertainty,
        __VarRepeatability.name() : __VarRepeatability,
        __VarDeviceSpec.name() : __VarDeviceSpec,
        __Solvent.name() : __Solvent
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_54 = CTD_ANON_54


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1821, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}VariableType uses Python identifier VariableType
    __VariableType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VariableType'), 'VariableType', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_55_httpwww_iupac_orgnamespacesThermoMLVariableType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1823, 10), )

    
    VariableType = property(__VariableType.value, __VariableType.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_55_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1825, 11), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_55_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __VariableType.name() : __VariableType,
        __nCompIndex.name() : __nCompIndex,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_55 = CTD_ANON_55


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1832, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}eVarPhase uses Python identifier eVarPhase
    __eVarPhase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eVarPhase'), 'eVarPhase', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_56_httpwww_iupac_orgnamespacesThermoMLeVarPhase', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1834, 10), )

    
    eVarPhase = property(__eVarPhase.value, __eVarPhase.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eCrystalLatticeType uses Python identifier eCrystalLatticeType
    __eCrystalLatticeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType'), 'eCrystalLatticeType', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_56_httpwww_iupac_orgnamespacesThermoMLeCrystalLatticeType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1836, 11), )

    
    eCrystalLatticeType = property(__eCrystalLatticeType.value, __eCrystalLatticeType.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sPhaseDescription uses Python identifier sPhaseDescription
    __sPhaseDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription'), 'sPhaseDescription', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_56_httpwww_iupac_orgnamespacesThermoMLsPhaseDescription', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1837, 11), )

    
    sPhaseDescription = property(__sPhaseDescription.value, __sPhaseDescription.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_56_httpwww_iupac_orgnamespacesThermoMLnCompIndex', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1840, 11), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_56_httpwww_iupac_orgnamespacesThermoMLRegNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    _ElementMap.update({
        __eVarPhase.name() : __eVarPhase,
        __eCrystalLatticeType.name() : __eCrystalLatticeType,
        __sPhaseDescription.name() : __sPhaseDescription,
        __nCompIndex.name() : __nCompIndex,
        __RegNum.name() : __RegNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_56 = CTD_ANON_56


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2075, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCASRNum uses Python identifier nCASRNum
    __nCASRNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCASRNum'), 'nCASRNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_57_httpwww_iupac_orgnamespacesThermoMLnCASRNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2077, 4), )

    
    nCASRNum = property(__nCASRNum.value, __nCASRNum.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nOrgNum uses Python identifier nOrgNum
    __nOrgNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nOrgNum'), 'nOrgNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_57_httpwww_iupac_orgnamespacesThermoMLnOrgNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2078, 4), )

    
    nOrgNum = property(__nOrgNum.value, __nOrgNum.set, None, None)

    _ElementMap.update({
        __nCASRNum.name() : __nCASRNum,
        __nOrgNum.name() : __nOrgNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_57 = CTD_ANON_57


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2086, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}RegNum uses Python identifier RegNum
    __RegNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), 'RegNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_58_httpwww_iupac_orgnamespacesThermoMLRegNum', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1), )

    
    RegNum = property(__RegNum.value, __RegNum.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCompIndex uses Python identifier nCompIndex
    __nCompIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), 'nCompIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_58_httpwww_iupac_orgnamespacesThermoMLnCompIndex', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2089, 5), )

    
    nCompIndex = property(__nCompIndex.value, __nCompIndex.set, None, None)

    _ElementMap.update({
        __RegNum.name() : __RegNum,
        __nCompIndex.name() : __nCompIndex
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_58 = CTD_ANON_58


# Complex type {http://www.iupac.org/namespaces/ThermoML}ConstraintVariableType with content type ELEMENT_ONLY
class ConstraintVariableType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.iupac.org/namespaces/ThermoML}ConstraintVariableType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConstraintVariableType')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2098, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}eTemperature uses Python identifier eTemperature
    __eTemperature = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eTemperature'), 'eTemperature', '__httpwww_iupac_orgnamespacesThermoML_ConstraintVariableType_httpwww_iupac_orgnamespacesThermoMLeTemperature', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2100, 3), )

    
    eTemperature = property(__eTemperature.value, __eTemperature.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePressure uses Python identifier ePressure
    __ePressure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePressure'), 'ePressure', '__httpwww_iupac_orgnamespacesThermoML_ConstraintVariableType_httpwww_iupac_orgnamespacesThermoMLePressure', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2109, 3), )

    
    ePressure = property(__ePressure.value, __ePressure.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eComponentComposition uses Python identifier eComponentComposition
    __eComponentComposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eComponentComposition'), 'eComponentComposition', '__httpwww_iupac_orgnamespacesThermoML_ConstraintVariableType_httpwww_iupac_orgnamespacesThermoMLeComponentComposition', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2119, 3), )

    
    eComponentComposition = property(__eComponentComposition.value, __eComponentComposition.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eSolventComposition uses Python identifier eSolventComposition
    __eSolventComposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eSolventComposition'), 'eSolventComposition', '__httpwww_iupac_orgnamespacesThermoML_ConstraintVariableType_httpwww_iupac_orgnamespacesThermoMLeSolventComposition', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2141, 3), )

    
    eSolventComposition = property(__eSolventComposition.value, __eSolventComposition.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eMiscellaneous uses Python identifier eMiscellaneous
    __eMiscellaneous = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eMiscellaneous'), 'eMiscellaneous', '__httpwww_iupac_orgnamespacesThermoML_ConstraintVariableType_httpwww_iupac_orgnamespacesThermoMLeMiscellaneous', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2157, 3), )

    
    eMiscellaneous = property(__eMiscellaneous.value, __eMiscellaneous.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eBioVariables uses Python identifier eBioVariables
    __eBioVariables = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eBioVariables'), 'eBioVariables', '__httpwww_iupac_orgnamespacesThermoML_ConstraintVariableType_httpwww_iupac_orgnamespacesThermoMLeBioVariables', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2176, 3), )

    
    eBioVariables = property(__eBioVariables.value, __eBioVariables.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eParticipantAmount uses Python identifier eParticipantAmount
    __eParticipantAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eParticipantAmount'), 'eParticipantAmount', '__httpwww_iupac_orgnamespacesThermoML_ConstraintVariableType_httpwww_iupac_orgnamespacesThermoMLeParticipantAmount', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2187, 6), )

    
    eParticipantAmount = property(__eParticipantAmount.value, __eParticipantAmount.set, None, None)

    _ElementMap.update({
        __eTemperature.name() : __eTemperature,
        __ePressure.name() : __ePressure,
        __eComponentComposition.name() : __eComponentComposition,
        __eSolventComposition.name() : __eSolventComposition,
        __eMiscellaneous.name() : __eMiscellaneous,
        __eBioVariables.name() : __eBioVariables,
        __eParticipantAmount.name() : __eParticipantAmount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ConstraintVariableType = ConstraintVariableType
Namespace.addCategoryObject('typeBinding', 'ConstraintVariableType', ConstraintVariableType)


# Complex type {http://www.iupac.org/namespaces/ThermoML}ConstrDeviceSpecType with content type ELEMENT_ONLY
class ConstrDeviceSpecType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.iupac.org/namespaces/ThermoML}ConstrDeviceSpecType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConstrDeviceSpecType')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2200, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}sDeviceSpecEvaluator uses Python identifier sDeviceSpecEvaluator
    __sDeviceSpecEvaluator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sDeviceSpecEvaluator'), 'sDeviceSpecEvaluator', '__httpwww_iupac_orgnamespacesThermoML_ConstrDeviceSpecType_httpwww_iupac_orgnamespacesThermoMLsDeviceSpecEvaluator', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2202, 3), )

    
    sDeviceSpecEvaluator = property(__sDeviceSpecEvaluator.value, __sDeviceSpecEvaluator.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eDeviceSpecMethod uses Python identifier eDeviceSpecMethod
    __eDeviceSpecMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eDeviceSpecMethod'), 'eDeviceSpecMethod', '__httpwww_iupac_orgnamespacesThermoML_ConstrDeviceSpecType_httpwww_iupac_orgnamespacesThermoMLeDeviceSpecMethod', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2203, 3), )

    
    eDeviceSpecMethod = property(__eDeviceSpecMethod.value, __eDeviceSpecMethod.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sDeviceSpecMethod uses Python identifier sDeviceSpecMethod
    __sDeviceSpecMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sDeviceSpecMethod'), 'sDeviceSpecMethod', '__httpwww_iupac_orgnamespacesThermoML_ConstrDeviceSpecType_httpwww_iupac_orgnamespacesThermoMLsDeviceSpecMethod', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2212, 3), )

    
    sDeviceSpecMethod = property(__sDeviceSpecMethod.value, __sDeviceSpecMethod.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nDeviceSpecValue uses Python identifier nDeviceSpecValue
    __nDeviceSpecValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nDeviceSpecValue'), 'nDeviceSpecValue', '__httpwww_iupac_orgnamespacesThermoML_ConstrDeviceSpecType_httpwww_iupac_orgnamespacesThermoMLnDeviceSpecValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2213, 3), )

    
    nDeviceSpecValue = property(__nDeviceSpecValue.value, __nDeviceSpecValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nDeviceSpecLevOfConfid uses Python identifier nDeviceSpecLevOfConfid
    __nDeviceSpecLevOfConfid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nDeviceSpecLevOfConfid'), 'nDeviceSpecLevOfConfid', '__httpwww_iupac_orgnamespacesThermoML_ConstrDeviceSpecType_httpwww_iupac_orgnamespacesThermoMLnDeviceSpecLevOfConfid', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2214, 3), )

    
    nDeviceSpecLevOfConfid = property(__nDeviceSpecLevOfConfid.value, __nDeviceSpecLevOfConfid.set, None, None)

    _ElementMap.update({
        __sDeviceSpecEvaluator.name() : __sDeviceSpecEvaluator,
        __eDeviceSpecMethod.name() : __eDeviceSpecMethod,
        __sDeviceSpecMethod.name() : __sDeviceSpecMethod,
        __nDeviceSpecValue.name() : __nDeviceSpecValue,
        __nDeviceSpecLevOfConfid.name() : __nDeviceSpecLevOfConfid
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ConstrDeviceSpecType = ConstrDeviceSpecType
Namespace.addCategoryObject('typeBinding', 'ConstrDeviceSpecType', ConstrDeviceSpecType)


# Complex type {http://www.iupac.org/namespaces/ThermoML}PropVarDeviceSpecType with content type ELEMENT_ONLY
class PropVarDeviceSpecType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.iupac.org/namespaces/ThermoML}PropVarDeviceSpecType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PropVarDeviceSpecType')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2220, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}sDeviceSpecEvaluator uses Python identifier sDeviceSpecEvaluator
    __sDeviceSpecEvaluator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sDeviceSpecEvaluator'), 'sDeviceSpecEvaluator', '__httpwww_iupac_orgnamespacesThermoML_PropVarDeviceSpecType_httpwww_iupac_orgnamespacesThermoMLsDeviceSpecEvaluator', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2222, 3), )

    
    sDeviceSpecEvaluator = property(__sDeviceSpecEvaluator.value, __sDeviceSpecEvaluator.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eDeviceSpecMethod uses Python identifier eDeviceSpecMethod
    __eDeviceSpecMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eDeviceSpecMethod'), 'eDeviceSpecMethod', '__httpwww_iupac_orgnamespacesThermoML_PropVarDeviceSpecType_httpwww_iupac_orgnamespacesThermoMLeDeviceSpecMethod', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2223, 3), )

    
    eDeviceSpecMethod = property(__eDeviceSpecMethod.value, __eDeviceSpecMethod.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sDeviceSpecMethod uses Python identifier sDeviceSpecMethod
    __sDeviceSpecMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sDeviceSpecMethod'), 'sDeviceSpecMethod', '__httpwww_iupac_orgnamespacesThermoML_PropVarDeviceSpecType_httpwww_iupac_orgnamespacesThermoMLsDeviceSpecMethod', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2232, 3), )

    
    sDeviceSpecMethod = property(__sDeviceSpecMethod.value, __sDeviceSpecMethod.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nDeviceSpecLevOfConfid uses Python identifier nDeviceSpecLevOfConfid
    __nDeviceSpecLevOfConfid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nDeviceSpecLevOfConfid'), 'nDeviceSpecLevOfConfid', '__httpwww_iupac_orgnamespacesThermoML_PropVarDeviceSpecType_httpwww_iupac_orgnamespacesThermoMLnDeviceSpecLevOfConfid', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2233, 3), )

    
    nDeviceSpecLevOfConfid = property(__nDeviceSpecLevOfConfid.value, __nDeviceSpecLevOfConfid.set, None, None)

    _ElementMap.update({
        __sDeviceSpecEvaluator.name() : __sDeviceSpecEvaluator,
        __eDeviceSpecMethod.name() : __eDeviceSpecMethod,
        __sDeviceSpecMethod.name() : __sDeviceSpecMethod,
        __nDeviceSpecLevOfConfid.name() : __nDeviceSpecLevOfConfid
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PropVarDeviceSpecType = PropVarDeviceSpecType
Namespace.addCategoryObject('typeBinding', 'PropVarDeviceSpecType', PropVarDeviceSpecType)


# Complex type {http://www.iupac.org/namespaces/ThermoML}ConstrRepeatabilityType with content type ELEMENT_ONLY
class ConstrRepeatabilityType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.iupac.org/namespaces/ThermoML}ConstrRepeatabilityType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConstrRepeatabilityType')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2239, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}sRepeatEvaluator uses Python identifier sRepeatEvaluator
    __sRepeatEvaluator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sRepeatEvaluator'), 'sRepeatEvaluator', '__httpwww_iupac_orgnamespacesThermoML_ConstrRepeatabilityType_httpwww_iupac_orgnamespacesThermoMLsRepeatEvaluator', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2241, 3), )

    
    sRepeatEvaluator = property(__sRepeatEvaluator.value, __sRepeatEvaluator.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eRepeatMethod uses Python identifier eRepeatMethod
    __eRepeatMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eRepeatMethod'), 'eRepeatMethod', '__httpwww_iupac_orgnamespacesThermoML_ConstrRepeatabilityType_httpwww_iupac_orgnamespacesThermoMLeRepeatMethod', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2242, 3), )

    
    eRepeatMethod = property(__eRepeatMethod.value, __eRepeatMethod.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sRepeatMethod uses Python identifier sRepeatMethod
    __sRepeatMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sRepeatMethod'), 'sRepeatMethod', '__httpwww_iupac_orgnamespacesThermoML_ConstrRepeatabilityType_httpwww_iupac_orgnamespacesThermoMLsRepeatMethod', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2252, 3), )

    
    sRepeatMethod = property(__sRepeatMethod.value, __sRepeatMethod.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nRepeatValue uses Python identifier nRepeatValue
    __nRepeatValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nRepeatValue'), 'nRepeatValue', '__httpwww_iupac_orgnamespacesThermoML_ConstrRepeatabilityType_httpwww_iupac_orgnamespacesThermoMLnRepeatValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2253, 3), )

    
    nRepeatValue = property(__nRepeatValue.value, __nRepeatValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nRepetitions uses Python identifier nRepetitions
    __nRepetitions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nRepetitions'), 'nRepetitions', '__httpwww_iupac_orgnamespacesThermoML_ConstrRepeatabilityType_httpwww_iupac_orgnamespacesThermoMLnRepetitions', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2254, 3), )

    
    nRepetitions = property(__nRepetitions.value, __nRepetitions.set, None, None)

    _ElementMap.update({
        __sRepeatEvaluator.name() : __sRepeatEvaluator,
        __eRepeatMethod.name() : __eRepeatMethod,
        __sRepeatMethod.name() : __sRepeatMethod,
        __nRepeatValue.name() : __nRepeatValue,
        __nRepetitions.name() : __nRepetitions
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ConstrRepeatabilityType = ConstrRepeatabilityType
Namespace.addCategoryObject('typeBinding', 'ConstrRepeatabilityType', ConstrRepeatabilityType)


# Complex type {http://www.iupac.org/namespaces/ThermoML}PropVarRepeatabilityType with content type ELEMENT_ONLY
class PropVarRepeatabilityType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.iupac.org/namespaces/ThermoML}PropVarRepeatabilityType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PropVarRepeatabilityType')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2260, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}sRepeatEvaluator uses Python identifier sRepeatEvaluator
    __sRepeatEvaluator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sRepeatEvaluator'), 'sRepeatEvaluator', '__httpwww_iupac_orgnamespacesThermoML_PropVarRepeatabilityType_httpwww_iupac_orgnamespacesThermoMLsRepeatEvaluator', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2262, 3), )

    
    sRepeatEvaluator = property(__sRepeatEvaluator.value, __sRepeatEvaluator.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eRepeatMethod uses Python identifier eRepeatMethod
    __eRepeatMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eRepeatMethod'), 'eRepeatMethod', '__httpwww_iupac_orgnamespacesThermoML_PropVarRepeatabilityType_httpwww_iupac_orgnamespacesThermoMLeRepeatMethod', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2263, 3), )

    
    eRepeatMethod = property(__eRepeatMethod.value, __eRepeatMethod.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sRepeatMethod uses Python identifier sRepeatMethod
    __sRepeatMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sRepeatMethod'), 'sRepeatMethod', '__httpwww_iupac_orgnamespacesThermoML_PropVarRepeatabilityType_httpwww_iupac_orgnamespacesThermoMLsRepeatMethod', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2273, 3), )

    
    sRepeatMethod = property(__sRepeatMethod.value, __sRepeatMethod.set, None, None)

    _ElementMap.update({
        __sRepeatEvaluator.name() : __sRepeatEvaluator,
        __eRepeatMethod.name() : __eRepeatMethod,
        __sRepeatMethod.name() : __sRepeatMethod
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PropVarRepeatabilityType = PropVarRepeatabilityType
Namespace.addCategoryObject('typeBinding', 'PropVarRepeatabilityType', PropVarRepeatabilityType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2280, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCurveDevAssessNum uses Python identifier nCurveDevAssessNum
    __nCurveDevAssessNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCurveDevAssessNum'), 'nCurveDevAssessNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_59_httpwww_iupac_orgnamespacesThermoMLnCurveDevAssessNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2282, 4), )

    
    nCurveDevAssessNum = property(__nCurveDevAssessNum.value, __nCurveDevAssessNum.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sCurveDevEvaluator uses Python identifier sCurveDevEvaluator
    __sCurveDevEvaluator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sCurveDevEvaluator'), 'sCurveDevEvaluator', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_59_httpwww_iupac_orgnamespacesThermoMLsCurveDevEvaluator', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2283, 4), )

    
    sCurveDevEvaluator = property(__sCurveDevEvaluator.value, __sCurveDevEvaluator.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sCurveSpec uses Python identifier sCurveSpec
    __sCurveSpec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sCurveSpec'), 'sCurveSpec', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_59_httpwww_iupac_orgnamespacesThermoMLsCurveSpec', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2284, 4), )

    
    sCurveSpec = property(__sCurveSpec.value, __sCurveSpec.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCurveRmsDevValue uses Python identifier nCurveRmsDevValue
    __nCurveRmsDevValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCurveRmsDevValue'), 'nCurveRmsDevValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_59_httpwww_iupac_orgnamespacesThermoMLnCurveRmsDevValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2285, 4), )

    
    nCurveRmsDevValue = property(__nCurveRmsDevValue.value, __nCurveRmsDevValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCurveRmsRelativeDevValue uses Python identifier nCurveRmsRelativeDevValue
    __nCurveRmsRelativeDevValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCurveRmsRelativeDevValue'), 'nCurveRmsRelativeDevValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_59_httpwww_iupac_orgnamespacesThermoMLnCurveRmsRelativeDevValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2286, 4), )

    
    nCurveRmsRelativeDevValue = property(__nCurveRmsRelativeDevValue.value, __nCurveRmsRelativeDevValue.set, None, None)

    _ElementMap.update({
        __nCurveDevAssessNum.name() : __nCurveDevAssessNum,
        __sCurveDevEvaluator.name() : __sCurveDevEvaluator,
        __sCurveSpec.name() : __sCurveSpec,
        __nCurveRmsDevValue.name() : __nCurveRmsDevValue,
        __nCurveRmsRelativeDevValue.name() : __nCurveRmsRelativeDevValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_59 = CTD_ANON_59


# Complex type {http://www.iupac.org/namespaces/ThermoML}ConstrUncertaintyType with content type ELEMENT_ONLY
class ConstrUncertaintyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.iupac.org/namespaces/ThermoML}ConstrUncertaintyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConstrUncertaintyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2293, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}sUncertEvaluator uses Python identifier sUncertEvaluator
    __sUncertEvaluator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sUncertEvaluator'), 'sUncertEvaluator', '__httpwww_iupac_orgnamespacesThermoML_ConstrUncertaintyType_httpwww_iupac_orgnamespacesThermoMLsUncertEvaluator', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2295, 3), )

    
    sUncertEvaluator = property(__sUncertEvaluator.value, __sUncertEvaluator.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sUncertEvalMethod uses Python identifier sUncertEvalMethod
    __sUncertEvalMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sUncertEvalMethod'), 'sUncertEvalMethod', '__httpwww_iupac_orgnamespacesThermoML_ConstrUncertaintyType_httpwww_iupac_orgnamespacesThermoMLsUncertEvalMethod', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2296, 3), )

    
    sUncertEvalMethod = property(__sUncertEvalMethod.value, __sUncertEvalMethod.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nStdUncertValue uses Python identifier nStdUncertValue
    __nStdUncertValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nStdUncertValue'), 'nStdUncertValue', '__httpwww_iupac_orgnamespacesThermoML_ConstrUncertaintyType_httpwww_iupac_orgnamespacesThermoMLnStdUncertValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2297, 3), )

    
    nStdUncertValue = property(__nStdUncertValue.value, __nStdUncertValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCoverageFactor uses Python identifier nCoverageFactor
    __nCoverageFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCoverageFactor'), 'nCoverageFactor', '__httpwww_iupac_orgnamespacesThermoML_ConstrUncertaintyType_httpwww_iupac_orgnamespacesThermoMLnCoverageFactor', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2298, 3), )

    
    nCoverageFactor = property(__nCoverageFactor.value, __nCoverageFactor.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nExpandUncertValue uses Python identifier nExpandUncertValue
    __nExpandUncertValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nExpandUncertValue'), 'nExpandUncertValue', '__httpwww_iupac_orgnamespacesThermoML_ConstrUncertaintyType_httpwww_iupac_orgnamespacesThermoMLnExpandUncertValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2299, 3), )

    
    nExpandUncertValue = property(__nExpandUncertValue.value, __nExpandUncertValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nUncertLevOfConfid uses Python identifier nUncertLevOfConfid
    __nUncertLevOfConfid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nUncertLevOfConfid'), 'nUncertLevOfConfid', '__httpwww_iupac_orgnamespacesThermoML_ConstrUncertaintyType_httpwww_iupac_orgnamespacesThermoMLnUncertLevOfConfid', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2300, 3), )

    
    nUncertLevOfConfid = property(__nUncertLevOfConfid.value, __nUncertLevOfConfid.set, None, None)

    _ElementMap.update({
        __sUncertEvaluator.name() : __sUncertEvaluator,
        __sUncertEvalMethod.name() : __sUncertEvalMethod,
        __nStdUncertValue.name() : __nStdUncertValue,
        __nCoverageFactor.name() : __nCoverageFactor,
        __nExpandUncertValue.name() : __nExpandUncertValue,
        __nUncertLevOfConfid.name() : __nUncertLevOfConfid
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ConstrUncertaintyType = ConstrUncertaintyType
Namespace.addCategoryObject('typeBinding', 'ConstrUncertaintyType', ConstrUncertaintyType)


# Complex type {http://www.iupac.org/namespaces/ThermoML}PropVarUncertaintyType with content type ELEMENT_ONLY
class PropVarUncertaintyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.iupac.org/namespaces/ThermoML}PropVarUncertaintyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PropVarUncertaintyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2306, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nUncertAssessNum uses Python identifier nUncertAssessNum
    __nUncertAssessNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nUncertAssessNum'), 'nUncertAssessNum', '__httpwww_iupac_orgnamespacesThermoML_PropVarUncertaintyType_httpwww_iupac_orgnamespacesThermoMLnUncertAssessNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2308, 3), )

    
    nUncertAssessNum = property(__nUncertAssessNum.value, __nUncertAssessNum.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sUncertEvaluator uses Python identifier sUncertEvaluator
    __sUncertEvaluator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sUncertEvaluator'), 'sUncertEvaluator', '__httpwww_iupac_orgnamespacesThermoML_PropVarUncertaintyType_httpwww_iupac_orgnamespacesThermoMLsUncertEvaluator', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2309, 3), )

    
    sUncertEvaluator = property(__sUncertEvaluator.value, __sUncertEvaluator.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sUncertEvalMethod uses Python identifier sUncertEvalMethod
    __sUncertEvalMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sUncertEvalMethod'), 'sUncertEvalMethod', '__httpwww_iupac_orgnamespacesThermoML_PropVarUncertaintyType_httpwww_iupac_orgnamespacesThermoMLsUncertEvalMethod', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2310, 3), )

    
    sUncertEvalMethod = property(__sUncertEvalMethod.value, __sUncertEvalMethod.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCoverageFactor uses Python identifier nCoverageFactor
    __nCoverageFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCoverageFactor'), 'nCoverageFactor', '__httpwww_iupac_orgnamespacesThermoML_PropVarUncertaintyType_httpwww_iupac_orgnamespacesThermoMLnCoverageFactor', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2311, 3), )

    
    nCoverageFactor = property(__nCoverageFactor.value, __nCoverageFactor.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nUncertLevOfConfid uses Python identifier nUncertLevOfConfid
    __nUncertLevOfConfid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nUncertLevOfConfid'), 'nUncertLevOfConfid', '__httpwww_iupac_orgnamespacesThermoML_PropVarUncertaintyType_httpwww_iupac_orgnamespacesThermoMLnUncertLevOfConfid', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2312, 3), )

    
    nUncertLevOfConfid = property(__nUncertLevOfConfid.value, __nUncertLevOfConfid.set, None, None)

    _ElementMap.update({
        __nUncertAssessNum.name() : __nUncertAssessNum,
        __sUncertEvaluator.name() : __sUncertEvaluator,
        __sUncertEvalMethod.name() : __sUncertEvalMethod,
        __nCoverageFactor.name() : __nCoverageFactor,
        __nUncertLevOfConfid.name() : __nUncertLevOfConfid
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PropVarUncertaintyType = PropVarUncertaintyType
Namespace.addCategoryObject('typeBinding', 'PropVarUncertaintyType', PropVarUncertaintyType)


# Complex type {http://www.iupac.org/namespaces/ThermoML}AsymUncertType with content type ELEMENT_ONLY
class AsymUncertType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.iupac.org/namespaces/ThermoML}AsymUncertType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AsymUncertType')
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2318, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPositiveValue uses Python identifier nPositiveValue
    __nPositiveValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPositiveValue'), 'nPositiveValue', '__httpwww_iupac_orgnamespacesThermoML_AsymUncertType_httpwww_iupac_orgnamespacesThermoMLnPositiveValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2320, 3), )

    
    nPositiveValue = property(__nPositiveValue.value, __nPositiveValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nNegativeValue uses Python identifier nNegativeValue
    __nNegativeValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nNegativeValue'), 'nNegativeValue', '__httpwww_iupac_orgnamespacesThermoML_AsymUncertType_httpwww_iupac_orgnamespacesThermoMLnNegativeValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2321, 3), )

    
    nNegativeValue = property(__nNegativeValue.value, __nNegativeValue.set, None, None)

    _ElementMap.update({
        __nPositiveValue.name() : __nPositiveValue,
        __nNegativeValue.name() : __nNegativeValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AsymUncertType = AsymUncertType
Namespace.addCategoryObject('typeBinding', 'AsymUncertType', AsymUncertType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2328, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCombUncertAssessNum uses Python identifier nCombUncertAssessNum
    __nCombUncertAssessNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCombUncertAssessNum'), 'nCombUncertAssessNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_60_httpwww_iupac_orgnamespacesThermoMLnCombUncertAssessNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2330, 4), )

    
    nCombUncertAssessNum = property(__nCombUncertAssessNum.value, __nCombUncertAssessNum.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sCombUncertEvaluator uses Python identifier sCombUncertEvaluator
    __sCombUncertEvaluator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sCombUncertEvaluator'), 'sCombUncertEvaluator', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_60_httpwww_iupac_orgnamespacesThermoMLsCombUncertEvaluator', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2331, 4), )

    
    sCombUncertEvaluator = property(__sCombUncertEvaluator.value, __sCombUncertEvaluator.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}eCombUncertEvalMethod uses Python identifier eCombUncertEvalMethod
    __eCombUncertEvalMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eCombUncertEvalMethod'), 'eCombUncertEvalMethod', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_60_httpwww_iupac_orgnamespacesThermoMLeCombUncertEvalMethod', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2332, 4), )

    
    eCombUncertEvalMethod = property(__eCombUncertEvalMethod.value, __eCombUncertEvalMethod.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sCombUncertEvalMethod uses Python identifier sCombUncertEvalMethod
    __sCombUncertEvalMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sCombUncertEvalMethod'), 'sCombUncertEvalMethod', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_60_httpwww_iupac_orgnamespacesThermoMLsCombUncertEvalMethod', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2340, 4), )

    
    sCombUncertEvalMethod = property(__sCombUncertEvalMethod.value, __sCombUncertEvalMethod.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCombCoverageFactor uses Python identifier nCombCoverageFactor
    __nCombCoverageFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCombCoverageFactor'), 'nCombCoverageFactor', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_60_httpwww_iupac_orgnamespacesThermoMLnCombCoverageFactor', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2341, 4), )

    
    nCombCoverageFactor = property(__nCombCoverageFactor.value, __nCombCoverageFactor.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCombUncertLevOfConfid uses Python identifier nCombUncertLevOfConfid
    __nCombUncertLevOfConfid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCombUncertLevOfConfid'), 'nCombUncertLevOfConfid', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_60_httpwww_iupac_orgnamespacesThermoMLnCombUncertLevOfConfid', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2342, 4), )

    
    nCombUncertLevOfConfid = property(__nCombUncertLevOfConfid.value, __nCombUncertLevOfConfid.set, None, None)

    _ElementMap.update({
        __nCombUncertAssessNum.name() : __nCombUncertAssessNum,
        __sCombUncertEvaluator.name() : __sCombUncertEvaluator,
        __eCombUncertEvalMethod.name() : __eCombUncertEvalMethod,
        __sCombUncertEvalMethod.name() : __sCombUncertEvalMethod,
        __nCombCoverageFactor.name() : __nCombCoverageFactor,
        __nCombUncertLevOfConfid.name() : __nCombUncertLevOfConfid
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_60 = CTD_ANON_60


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_61 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2350, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}VariableValue uses Python identifier VariableValue
    __VariableValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VariableValue'), 'VariableValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_61_httpwww_iupac_orgnamespacesThermoMLVariableValue', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2352, 4), )

    
    VariableValue = property(__VariableValue.value, __VariableValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PropertyValue uses Python identifier PropertyValue
    __PropertyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropertyValue'), 'PropertyValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_61_httpwww_iupac_orgnamespacesThermoMLPropertyValue', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2379, 4), )

    
    PropertyValue = property(__PropertyValue.value, __PropertyValue.set, None, None)

    _ElementMap.update({
        __VariableValue.name() : __VariableValue,
        __PropertyValue.name() : __PropertyValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_61 = CTD_ANON_61


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_62 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2353, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nVarNumber uses Python identifier nVarNumber
    __nVarNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nVarNumber'), 'nVarNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_62_httpwww_iupac_orgnamespacesThermoMLnVarNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2355, 7), )

    
    nVarNumber = property(__nVarNumber.value, __nVarNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nVarValue uses Python identifier nVarValue
    __nVarValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nVarValue'), 'nVarValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_62_httpwww_iupac_orgnamespacesThermoMLnVarValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2356, 7), )

    
    nVarValue = property(__nVarValue.value, __nVarValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nVarDigits uses Python identifier nVarDigits
    __nVarDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nVarDigits'), 'nVarDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_62_httpwww_iupac_orgnamespacesThermoMLnVarDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2357, 7), )

    
    nVarDigits = property(__nVarDigits.value, __nVarDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}VarUncertainty uses Python identifier VarUncertainty
    __VarUncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VarUncertainty'), 'VarUncertainty', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_62_httpwww_iupac_orgnamespacesThermoMLVarUncertainty', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2358, 7), )

    
    VarUncertainty = property(__VarUncertainty.value, __VarUncertainty.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}VarRepeatability uses Python identifier VarRepeatability
    __VarRepeatability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VarRepeatability'), 'VarRepeatability', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_62_httpwww_iupac_orgnamespacesThermoMLVarRepeatability', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2367, 7), )

    
    VarRepeatability = property(__VarRepeatability.value, __VarRepeatability.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nVarDeviceSpecValue uses Python identifier nVarDeviceSpecValue
    __nVarDeviceSpecValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nVarDeviceSpecValue'), 'nVarDeviceSpecValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_62_httpwww_iupac_orgnamespacesThermoMLnVarDeviceSpecValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2375, 7), )

    
    nVarDeviceSpecValue = property(__nVarDeviceSpecValue.value, __nVarDeviceSpecValue.set, None, None)

    _ElementMap.update({
        __nVarNumber.name() : __nVarNumber,
        __nVarValue.name() : __nVarValue,
        __nVarDigits.name() : __nVarDigits,
        __VarUncertainty.name() : __VarUncertainty,
        __VarRepeatability.name() : __VarRepeatability,
        __nVarDeviceSpecValue.name() : __nVarDeviceSpecValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_62 = CTD_ANON_62


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_63 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2359, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nUncertAssessNum uses Python identifier nUncertAssessNum
    __nUncertAssessNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nUncertAssessNum'), 'nUncertAssessNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_63_httpwww_iupac_orgnamespacesThermoMLnUncertAssessNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2361, 10), )

    
    nUncertAssessNum = property(__nUncertAssessNum.value, __nUncertAssessNum.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nStdUncertValue uses Python identifier nStdUncertValue
    __nStdUncertValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nStdUncertValue'), 'nStdUncertValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_63_httpwww_iupac_orgnamespacesThermoMLnStdUncertValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2362, 10), )

    
    nStdUncertValue = property(__nStdUncertValue.value, __nStdUncertValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nExpandUncertValue uses Python identifier nExpandUncertValue
    __nExpandUncertValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nExpandUncertValue'), 'nExpandUncertValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_63_httpwww_iupac_orgnamespacesThermoMLnExpandUncertValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2363, 10), )

    
    nExpandUncertValue = property(__nExpandUncertValue.value, __nExpandUncertValue.set, None, None)

    _ElementMap.update({
        __nUncertAssessNum.name() : __nUncertAssessNum,
        __nStdUncertValue.name() : __nStdUncertValue,
        __nExpandUncertValue.name() : __nExpandUncertValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_63 = CTD_ANON_63


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2368, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nVarRepeatValue uses Python identifier nVarRepeatValue
    __nVarRepeatValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nVarRepeatValue'), 'nVarRepeatValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_64_httpwww_iupac_orgnamespacesThermoMLnVarRepeatValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2370, 10), )

    
    nVarRepeatValue = property(__nVarRepeatValue.value, __nVarRepeatValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nRepetitions uses Python identifier nRepetitions
    __nRepetitions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nRepetitions'), 'nRepetitions', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_64_httpwww_iupac_orgnamespacesThermoMLnRepetitions', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2371, 10), )

    
    nRepetitions = property(__nRepetitions.value, __nRepetitions.set, None, None)

    _ElementMap.update({
        __nVarRepeatValue.name() : __nVarRepeatValue,
        __nRepetitions.name() : __nRepetitions
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_64 = CTD_ANON_64


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2380, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPropNumber uses Python identifier nPropNumber
    __nPropNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPropNumber'), 'nPropNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_65_httpwww_iupac_orgnamespacesThermoMLnPropNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2382, 7), )

    
    nPropNumber = property(__nPropNumber.value, __nPropNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPropValue uses Python identifier nPropValue
    __nPropValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPropValue'), 'nPropValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_65_httpwww_iupac_orgnamespacesThermoMLnPropValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2385, 9), )

    
    nPropValue = property(__nPropValue.value, __nPropValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPropDigits uses Python identifier nPropDigits
    __nPropDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPropDigits'), 'nPropDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_65_httpwww_iupac_orgnamespacesThermoMLnPropDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2386, 9), )

    
    nPropDigits = property(__nPropDigits.value, __nPropDigits.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PropLimit uses Python identifier PropLimit
    __PropLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropLimit'), 'PropLimit', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_65_httpwww_iupac_orgnamespacesThermoMLPropLimit', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2388, 8), )

    
    PropLimit = property(__PropLimit.value, __PropLimit.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CombinedUncertainty uses Python identifier CombinedUncertainty
    __CombinedUncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CombinedUncertainty'), 'CombinedUncertainty', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_65_httpwww_iupac_orgnamespacesThermoMLCombinedUncertainty', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2400, 7), )

    
    CombinedUncertainty = property(__CombinedUncertainty.value, __CombinedUncertainty.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PropUncertainty uses Python identifier PropUncertainty
    __PropUncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropUncertainty'), 'PropUncertainty', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_65_httpwww_iupac_orgnamespacesThermoMLPropUncertainty', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2417, 7), )

    
    PropUncertainty = property(__PropUncertainty.value, __PropUncertainty.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PropRepeatability uses Python identifier PropRepeatability
    __PropRepeatability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropRepeatability'), 'PropRepeatability', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_65_httpwww_iupac_orgnamespacesThermoMLPropRepeatability', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2434, 7), )

    
    PropRepeatability = property(__PropRepeatability.value, __PropRepeatability.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPropDeviceSpecValue uses Python identifier nPropDeviceSpecValue
    __nPropDeviceSpecValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPropDeviceSpecValue'), 'nPropDeviceSpecValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_65_httpwww_iupac_orgnamespacesThermoMLnPropDeviceSpecValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2442, 7), )

    
    nPropDeviceSpecValue = property(__nPropDeviceSpecValue.value, __nPropDeviceSpecValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}CurveDev uses Python identifier CurveDev
    __CurveDev = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurveDev'), 'CurveDev', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_65_httpwww_iupac_orgnamespacesThermoMLCurveDev', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2443, 7), )

    
    CurveDev = property(__CurveDev.value, __CurveDev.set, None, None)

    _ElementMap.update({
        __nPropNumber.name() : __nPropNumber,
        __nPropValue.name() : __nPropValue,
        __nPropDigits.name() : __nPropDigits,
        __PropLimit.name() : __PropLimit,
        __CombinedUncertainty.name() : __CombinedUncertainty,
        __PropUncertainty.name() : __PropUncertainty,
        __PropRepeatability.name() : __PropRepeatability,
        __nPropDeviceSpecValue.name() : __nPropDeviceSpecValue,
        __CurveDev.name() : __CurveDev
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_65 = CTD_ANON_65


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_66 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2389, 9)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPropUpperLimitValue uses Python identifier nPropUpperLimitValue
    __nPropUpperLimitValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPropUpperLimitValue'), 'nPropUpperLimitValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_66_httpwww_iupac_orgnamespacesThermoMLnPropUpperLimitValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2392, 12), )

    
    nPropUpperLimitValue = property(__nPropUpperLimitValue.value, __nPropUpperLimitValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPropLowerLimitValue uses Python identifier nPropLowerLimitValue
    __nPropLowerLimitValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPropLowerLimitValue'), 'nPropLowerLimitValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_66_httpwww_iupac_orgnamespacesThermoMLnPropLowerLimitValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2393, 12), )

    
    nPropLowerLimitValue = property(__nPropLowerLimitValue.value, __nPropLowerLimitValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPropLimitDigits uses Python identifier nPropLimitDigits
    __nPropLimitDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPropLimitDigits'), 'nPropLimitDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_66_httpwww_iupac_orgnamespacesThermoMLnPropLimitDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2395, 11), )

    
    nPropLimitDigits = property(__nPropLimitDigits.value, __nPropLimitDigits.set, None, None)

    _ElementMap.update({
        __nPropUpperLimitValue.name() : __nPropUpperLimitValue,
        __nPropLowerLimitValue.name() : __nPropLowerLimitValue,
        __nPropLimitDigits.name() : __nPropLimitDigits
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_66 = CTD_ANON_66


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_67 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2401, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCombUncertAssessNum uses Python identifier nCombUncertAssessNum
    __nCombUncertAssessNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCombUncertAssessNum'), 'nCombUncertAssessNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_67_httpwww_iupac_orgnamespacesThermoMLnCombUncertAssessNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2403, 10), )

    
    nCombUncertAssessNum = property(__nCombUncertAssessNum.value, __nCombUncertAssessNum.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCombStdUncertValue uses Python identifier nCombStdUncertValue
    __nCombStdUncertValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCombStdUncertValue'), 'nCombStdUncertValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_67_httpwww_iupac_orgnamespacesThermoMLnCombStdUncertValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2406, 12), )

    
    nCombStdUncertValue = property(__nCombStdUncertValue.value, __nCombStdUncertValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCombExpandUncertValue uses Python identifier nCombExpandUncertValue
    __nCombExpandUncertValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCombExpandUncertValue'), 'nCombExpandUncertValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_67_httpwww_iupac_orgnamespacesThermoMLnCombExpandUncertValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2407, 12), )

    
    nCombExpandUncertValue = property(__nCombExpandUncertValue.value, __nCombExpandUncertValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}AsymCombStdUncert uses Python identifier AsymCombStdUncert
    __AsymCombStdUncert = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AsymCombStdUncert'), 'AsymCombStdUncert', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_67_httpwww_iupac_orgnamespacesThermoMLAsymCombStdUncert', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2410, 12), )

    
    AsymCombStdUncert = property(__AsymCombStdUncert.value, __AsymCombStdUncert.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}AsymCombExpandUncert uses Python identifier AsymCombExpandUncert
    __AsymCombExpandUncert = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AsymCombExpandUncert'), 'AsymCombExpandUncert', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_67_httpwww_iupac_orgnamespacesThermoMLAsymCombExpandUncert', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2411, 12), )

    
    AsymCombExpandUncert = property(__AsymCombExpandUncert.value, __AsymCombExpandUncert.set, None, None)

    _ElementMap.update({
        __nCombUncertAssessNum.name() : __nCombUncertAssessNum,
        __nCombStdUncertValue.name() : __nCombStdUncertValue,
        __nCombExpandUncertValue.name() : __nCombExpandUncertValue,
        __AsymCombStdUncert.name() : __AsymCombStdUncert,
        __AsymCombExpandUncert.name() : __AsymCombExpandUncert
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_67 = CTD_ANON_67


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2418, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nUncertAssessNum uses Python identifier nUncertAssessNum
    __nUncertAssessNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nUncertAssessNum'), 'nUncertAssessNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_68_httpwww_iupac_orgnamespacesThermoMLnUncertAssessNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2420, 10), )

    
    nUncertAssessNum = property(__nUncertAssessNum.value, __nUncertAssessNum.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nStdUncertValue uses Python identifier nStdUncertValue
    __nStdUncertValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nStdUncertValue'), 'nStdUncertValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_68_httpwww_iupac_orgnamespacesThermoMLnStdUncertValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2423, 12), )

    
    nStdUncertValue = property(__nStdUncertValue.value, __nStdUncertValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nExpandUncertValue uses Python identifier nExpandUncertValue
    __nExpandUncertValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nExpandUncertValue'), 'nExpandUncertValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_68_httpwww_iupac_orgnamespacesThermoMLnExpandUncertValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2424, 12), )

    
    nExpandUncertValue = property(__nExpandUncertValue.value, __nExpandUncertValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}AsymStdUncert uses Python identifier AsymStdUncert
    __AsymStdUncert = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AsymStdUncert'), 'AsymStdUncert', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_68_httpwww_iupac_orgnamespacesThermoMLAsymStdUncert', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2427, 12), )

    
    AsymStdUncert = property(__AsymStdUncert.value, __AsymStdUncert.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}AsymExpandUncert uses Python identifier AsymExpandUncert
    __AsymExpandUncert = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AsymExpandUncert'), 'AsymExpandUncert', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_68_httpwww_iupac_orgnamespacesThermoMLAsymExpandUncert', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2428, 12), )

    
    AsymExpandUncert = property(__AsymExpandUncert.value, __AsymExpandUncert.set, None, None)

    _ElementMap.update({
        __nUncertAssessNum.name() : __nUncertAssessNum,
        __nStdUncertValue.name() : __nStdUncertValue,
        __nExpandUncertValue.name() : __nExpandUncertValue,
        __AsymStdUncert.name() : __AsymStdUncert,
        __AsymExpandUncert.name() : __AsymExpandUncert
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_68 = CTD_ANON_68


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2435, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPropRepeatValue uses Python identifier nPropRepeatValue
    __nPropRepeatValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPropRepeatValue'), 'nPropRepeatValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_69_httpwww_iupac_orgnamespacesThermoMLnPropRepeatValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2437, 10), )

    
    nPropRepeatValue = property(__nPropRepeatValue.value, __nPropRepeatValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nRepetitions uses Python identifier nRepetitions
    __nRepetitions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nRepetitions'), 'nRepetitions', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_69_httpwww_iupac_orgnamespacesThermoMLnRepetitions', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2438, 10), )

    
    nRepetitions = property(__nRepetitions.value, __nRepetitions.set, None, None)

    _ElementMap.update({
        __nPropRepeatValue.name() : __nPropRepeatValue,
        __nRepetitions.name() : __nRepetitions
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_69 = CTD_ANON_69


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2444, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCurveDevAssessNum uses Python identifier nCurveDevAssessNum
    __nCurveDevAssessNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCurveDevAssessNum'), 'nCurveDevAssessNum', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_70_httpwww_iupac_orgnamespacesThermoMLnCurveDevAssessNum', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2446, 10), )

    
    nCurveDevAssessNum = property(__nCurveDevAssessNum.value, __nCurveDevAssessNum.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCurveDevValue uses Python identifier nCurveDevValue
    __nCurveDevValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCurveDevValue'), 'nCurveDevValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_70_httpwww_iupac_orgnamespacesThermoMLnCurveDevValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2447, 10), )

    
    nCurveDevValue = property(__nCurveDevValue.value, __nCurveDevValue.set, None, None)

    _ElementMap.update({
        __nCurveDevAssessNum.name() : __nCurveDevAssessNum,
        __nCurveDevValue.name() : __nCurveDevValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_70 = CTD_ANON_70


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2461, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}SingleProp uses Python identifier SingleProp
    __SingleProp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SingleProp'), 'SingleProp', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_71_httpwww_iupac_orgnamespacesThermoMLSingleProp', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2463, 4), )

    
    SingleProp = property(__SingleProp.value, __SingleProp.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}MultiProp uses Python identifier MultiProp
    __MultiProp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MultiProp'), 'MultiProp', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_71_httpwww_iupac_orgnamespacesThermoMLMultiProp', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2471, 4), )

    
    MultiProp = property(__MultiProp.value, __MultiProp.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}EquationOfState uses Python identifier EquationOfState
    __EquationOfState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EquationOfState'), 'EquationOfState', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_71_httpwww_iupac_orgnamespacesThermoMLEquationOfState', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2480, 4), )

    
    EquationOfState = property(__EquationOfState.value, __EquationOfState.set, None, None)

    _ElementMap.update({
        __SingleProp.name() : __SingleProp,
        __MultiProp.name() : __MultiProp,
        __EquationOfState.name() : __EquationOfState
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_71 = CTD_ANON_71


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_72 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2464, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}sEvalSinglePropDescription uses Python identifier sEvalSinglePropDescription
    __sEvalSinglePropDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sEvalSinglePropDescription'), 'sEvalSinglePropDescription', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_72_httpwww_iupac_orgnamespacesThermoMLsEvalSinglePropDescription', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2466, 7), )

    
    sEvalSinglePropDescription = property(__sEvalSinglePropDescription.value, __sEvalSinglePropDescription.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}EvalSinglePropRef uses Python identifier EvalSinglePropRef
    __EvalSinglePropRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EvalSinglePropRef'), 'EvalSinglePropRef', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_72_httpwww_iupac_orgnamespacesThermoMLEvalSinglePropRef', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2467, 7), )

    
    EvalSinglePropRef = property(__EvalSinglePropRef.value, __EvalSinglePropRef.set, None, None)

    _ElementMap.update({
        __sEvalSinglePropDescription.name() : __sEvalSinglePropDescription,
        __EvalSinglePropRef.name() : __EvalSinglePropRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_72 = CTD_ANON_72


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2472, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}sEvalMultiPropList uses Python identifier sEvalMultiPropList
    __sEvalMultiPropList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sEvalMultiPropList'), 'sEvalMultiPropList', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_73_httpwww_iupac_orgnamespacesThermoMLsEvalMultiPropList', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2474, 7), )

    
    sEvalMultiPropList = property(__sEvalMultiPropList.value, __sEvalMultiPropList.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sEvalMultiPropDescription uses Python identifier sEvalMultiPropDescription
    __sEvalMultiPropDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sEvalMultiPropDescription'), 'sEvalMultiPropDescription', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_73_httpwww_iupac_orgnamespacesThermoMLsEvalMultiPropDescription', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2475, 7), )

    
    sEvalMultiPropDescription = property(__sEvalMultiPropDescription.value, __sEvalMultiPropDescription.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}EvalMultiPropRef uses Python identifier EvalMultiPropRef
    __EvalMultiPropRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EvalMultiPropRef'), 'EvalMultiPropRef', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_73_httpwww_iupac_orgnamespacesThermoMLEvalMultiPropRef', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2476, 7), )

    
    EvalMultiPropRef = property(__EvalMultiPropRef.value, __EvalMultiPropRef.set, None, None)

    _ElementMap.update({
        __sEvalMultiPropList.name() : __sEvalMultiPropList,
        __sEvalMultiPropDescription.name() : __sEvalMultiPropDescription,
        __EvalMultiPropRef.name() : __EvalMultiPropRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_73 = CTD_ANON_73


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_74 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2481, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}sEvalEOSName uses Python identifier sEvalEOSName
    __sEvalEOSName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sEvalEOSName'), 'sEvalEOSName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_74_httpwww_iupac_orgnamespacesThermoMLsEvalEOSName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2483, 7), )

    
    sEvalEOSName = property(__sEvalEOSName.value, __sEvalEOSName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sEvalEOSDescription uses Python identifier sEvalEOSDescription
    __sEvalEOSDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sEvalEOSDescription'), 'sEvalEOSDescription', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_74_httpwww_iupac_orgnamespacesThermoMLsEvalEOSDescription', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2484, 7), )

    
    sEvalEOSDescription = property(__sEvalEOSDescription.value, __sEvalEOSDescription.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}EvalEOSRef uses Python identifier EvalEOSRef
    __EvalEOSRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EvalEOSRef'), 'EvalEOSRef', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_74_httpwww_iupac_orgnamespacesThermoMLEvalEOSRef', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2485, 7), )

    
    EvalEOSRef = property(__EvalEOSRef.value, __EvalEOSRef.set, None, None)

    _ElementMap.update({
        __sEvalEOSName.name() : __sEvalEOSName,
        __sEvalEOSDescription.name() : __sEvalEOSDescription,
        __EvalEOSRef.name() : __EvalEOSRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_74 = CTD_ANON_74


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_75 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2496, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}ePredictionType uses Python identifier ePredictionType
    __ePredictionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ePredictionType'), 'ePredictionType', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_75_httpwww_iupac_orgnamespacesThermoMLePredictionType', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2498, 4), )

    
    ePredictionType = property(__ePredictionType.value, __ePredictionType.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sPredictionMethodName uses Python identifier sPredictionMethodName
    __sPredictionMethodName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sPredictionMethodName'), 'sPredictionMethodName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_75_httpwww_iupac_orgnamespacesThermoMLsPredictionMethodName', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2512, 4), )

    
    sPredictionMethodName = property(__sPredictionMethodName.value, __sPredictionMethodName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sPredictionMethodDescription uses Python identifier sPredictionMethodDescription
    __sPredictionMethodDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sPredictionMethodDescription'), 'sPredictionMethodDescription', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_75_httpwww_iupac_orgnamespacesThermoMLsPredictionMethodDescription', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2513, 4), )

    
    sPredictionMethodDescription = property(__sPredictionMethodDescription.value, __sPredictionMethodDescription.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}PredictionMethodRef uses Python identifier PredictionMethodRef
    __PredictionMethodRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PredictionMethodRef'), 'PredictionMethodRef', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_75_httpwww_iupac_orgnamespacesThermoMLPredictionMethodRef', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2514, 4), )

    
    PredictionMethodRef = property(__PredictionMethodRef.value, __PredictionMethodRef.set, None, None)

    _ElementMap.update({
        __ePredictionType.name() : __ePredictionType,
        __sPredictionMethodName.name() : __sPredictionMethodName,
        __sPredictionMethodDescription.name() : __sPredictionMethodDescription,
        __PredictionMethodRef.name() : __PredictionMethodRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_75 = CTD_ANON_75


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_76 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2522, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}eEqName uses Python identifier eEqName
    __eEqName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eEqName'), 'eEqName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_76_httpwww_iupac_orgnamespacesThermoMLeEqName', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2526, 6), )

    
    eEqName = property(__eEqName.value, __eEqName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sEqName uses Python identifier sEqName
    __sEqName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sEqName'), 'sEqName', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_76_httpwww_iupac_orgnamespacesThermoMLsEqName', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2542, 6), )

    
    sEqName = property(__sEqName.value, __sEqName.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}urlMathSource uses Python identifier urlMathSource
    __urlMathSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'urlMathSource'), 'urlMathSource', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_76_httpwww_iupac_orgnamespacesThermoMLurlMathSource', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2544, 5), )

    
    urlMathSource = property(__urlMathSource.value, __urlMathSource.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}EqProperty uses Python identifier EqProperty
    __EqProperty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EqProperty'), 'EqProperty', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_76_httpwww_iupac_orgnamespacesThermoMLEqProperty', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2546, 4), )

    
    EqProperty = property(__EqProperty.value, __EqProperty.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}EqConstraint uses Python identifier EqConstraint
    __EqConstraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EqConstraint'), 'EqConstraint', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_76_httpwww_iupac_orgnamespacesThermoMLEqConstraint', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2562, 4), )

    
    EqConstraint = property(__EqConstraint.value, __EqConstraint.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}EqVariable uses Python identifier EqVariable
    __EqVariable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EqVariable'), 'EqVariable', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_76_httpwww_iupac_orgnamespacesThermoMLEqVariable', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2578, 4), )

    
    EqVariable = property(__EqVariable.value, __EqVariable.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}EqParameter uses Python identifier EqParameter
    __EqParameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EqParameter'), 'EqParameter', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_76_httpwww_iupac_orgnamespacesThermoMLEqParameter', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2594, 4), )

    
    EqParameter = property(__EqParameter.value, __EqParameter.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}EqConstant uses Python identifier EqConstant
    __EqConstant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EqConstant'), 'EqConstant', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_76_httpwww_iupac_orgnamespacesThermoMLEqConstant', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2607, 4), )

    
    EqConstant = property(__EqConstant.value, __EqConstant.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}Covariance uses Python identifier Covariance
    __Covariance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Covariance'), 'Covariance', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_76_httpwww_iupac_orgnamespacesThermoMLCovariance', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2617, 4), )

    
    Covariance = property(__Covariance.value, __Covariance.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCovarianceLevOfConfid uses Python identifier nCovarianceLevOfConfid
    __nCovarianceLevOfConfid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCovarianceLevOfConfid'), 'nCovarianceLevOfConfid', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_76_httpwww_iupac_orgnamespacesThermoMLnCovarianceLevOfConfid', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2626, 4), )

    
    nCovarianceLevOfConfid = property(__nCovarianceLevOfConfid.value, __nCovarianceLevOfConfid.set, None, None)

    _ElementMap.update({
        __eEqName.name() : __eEqName,
        __sEqName.name() : __sEqName,
        __urlMathSource.name() : __urlMathSource,
        __EqProperty.name() : __EqProperty,
        __EqConstraint.name() : __EqConstraint,
        __EqVariable.name() : __EqVariable,
        __EqParameter.name() : __EqParameter,
        __EqConstant.name() : __EqConstant,
        __Covariance.name() : __Covariance,
        __nCovarianceLevOfConfid.name() : __nCovarianceLevOfConfid
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_76 = CTD_ANON_76


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2547, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPureOrMixtureDataNumber uses Python identifier nPureOrMixtureDataNumber
    __nPureOrMixtureDataNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPureOrMixtureDataNumber'), 'nPureOrMixtureDataNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_77_httpwww_iupac_orgnamespacesThermoMLnPureOrMixtureDataNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2550, 8), )

    
    nPureOrMixtureDataNumber = property(__nPureOrMixtureDataNumber.value, __nPureOrMixtureDataNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nReactionDataNumber uses Python identifier nReactionDataNumber
    __nReactionDataNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nReactionDataNumber'), 'nReactionDataNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_77_httpwww_iupac_orgnamespacesThermoMLnReactionDataNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2551, 8), )

    
    nReactionDataNumber = property(__nReactionDataNumber.value, __nReactionDataNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPropNumber uses Python identifier nPropNumber
    __nPropNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPropNumber'), 'nPropNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_77_httpwww_iupac_orgnamespacesThermoMLnPropNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2553, 7), )

    
    nPropNumber = property(__nPropNumber.value, __nPropNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sEqSymbol uses Python identifier sEqSymbol
    __sEqSymbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sEqSymbol'), 'sEqSymbol', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_77_httpwww_iupac_orgnamespacesThermoMLsEqSymbol', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2554, 7), )

    
    sEqSymbol = property(__sEqSymbol.value, __sEqSymbol.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqPropIndex uses Python identifier nEqPropIndex
    __nEqPropIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqPropIndex'), 'nEqPropIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_77_httpwww_iupac_orgnamespacesThermoMLnEqPropIndex', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2555, 7), )

    
    nEqPropIndex = property(__nEqPropIndex.value, __nEqPropIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sOtherPropUnit uses Python identifier sOtherPropUnit
    __sOtherPropUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sOtherPropUnit'), 'sOtherPropUnit', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_77_httpwww_iupac_orgnamespacesThermoMLsOtherPropUnit', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2556, 7), )

    
    sOtherPropUnit = property(__sOtherPropUnit.value, __sOtherPropUnit.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqPropRangeMin uses Python identifier nEqPropRangeMin
    __nEqPropRangeMin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqPropRangeMin'), 'nEqPropRangeMin', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_77_httpwww_iupac_orgnamespacesThermoMLnEqPropRangeMin', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2557, 7), )

    
    nEqPropRangeMin = property(__nEqPropRangeMin.value, __nEqPropRangeMin.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqPropRangeMax uses Python identifier nEqPropRangeMax
    __nEqPropRangeMax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqPropRangeMax'), 'nEqPropRangeMax', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_77_httpwww_iupac_orgnamespacesThermoMLnEqPropRangeMax', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2558, 7), )

    
    nEqPropRangeMax = property(__nEqPropRangeMax.value, __nEqPropRangeMax.set, None, None)

    _ElementMap.update({
        __nPureOrMixtureDataNumber.name() : __nPureOrMixtureDataNumber,
        __nReactionDataNumber.name() : __nReactionDataNumber,
        __nPropNumber.name() : __nPropNumber,
        __sEqSymbol.name() : __sEqSymbol,
        __nEqPropIndex.name() : __nEqPropIndex,
        __sOtherPropUnit.name() : __sOtherPropUnit,
        __nEqPropRangeMin.name() : __nEqPropRangeMin,
        __nEqPropRangeMax.name() : __nEqPropRangeMax
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_77 = CTD_ANON_77


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_78 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2563, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPureOrMixtureDataNumber uses Python identifier nPureOrMixtureDataNumber
    __nPureOrMixtureDataNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPureOrMixtureDataNumber'), 'nPureOrMixtureDataNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_78_httpwww_iupac_orgnamespacesThermoMLnPureOrMixtureDataNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2566, 8), )

    
    nPureOrMixtureDataNumber = property(__nPureOrMixtureDataNumber.value, __nPureOrMixtureDataNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nReactionDataNumber uses Python identifier nReactionDataNumber
    __nReactionDataNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nReactionDataNumber'), 'nReactionDataNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_78_httpwww_iupac_orgnamespacesThermoMLnReactionDataNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2567, 8), )

    
    nReactionDataNumber = property(__nReactionDataNumber.value, __nReactionDataNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nConstraintNumber uses Python identifier nConstraintNumber
    __nConstraintNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nConstraintNumber'), 'nConstraintNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_78_httpwww_iupac_orgnamespacesThermoMLnConstraintNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2569, 7), )

    
    nConstraintNumber = property(__nConstraintNumber.value, __nConstraintNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sEqSymbol uses Python identifier sEqSymbol
    __sEqSymbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sEqSymbol'), 'sEqSymbol', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_78_httpwww_iupac_orgnamespacesThermoMLsEqSymbol', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2570, 7), )

    
    sEqSymbol = property(__sEqSymbol.value, __sEqSymbol.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqConstraintIndex uses Python identifier nEqConstraintIndex
    __nEqConstraintIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqConstraintIndex'), 'nEqConstraintIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_78_httpwww_iupac_orgnamespacesThermoMLnEqConstraintIndex', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2571, 7), )

    
    nEqConstraintIndex = property(__nEqConstraintIndex.value, __nEqConstraintIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sOtherConstraintUnit uses Python identifier sOtherConstraintUnit
    __sOtherConstraintUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sOtherConstraintUnit'), 'sOtherConstraintUnit', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_78_httpwww_iupac_orgnamespacesThermoMLsOtherConstraintUnit', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2572, 7), )

    
    sOtherConstraintUnit = property(__sOtherConstraintUnit.value, __sOtherConstraintUnit.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqConstraintRangeMin uses Python identifier nEqConstraintRangeMin
    __nEqConstraintRangeMin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqConstraintRangeMin'), 'nEqConstraintRangeMin', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_78_httpwww_iupac_orgnamespacesThermoMLnEqConstraintRangeMin', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2573, 7), )

    
    nEqConstraintRangeMin = property(__nEqConstraintRangeMin.value, __nEqConstraintRangeMin.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqConstraintRangeMax uses Python identifier nEqConstraintRangeMax
    __nEqConstraintRangeMax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqConstraintRangeMax'), 'nEqConstraintRangeMax', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_78_httpwww_iupac_orgnamespacesThermoMLnEqConstraintRangeMax', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2574, 7), )

    
    nEqConstraintRangeMax = property(__nEqConstraintRangeMax.value, __nEqConstraintRangeMax.set, None, None)

    _ElementMap.update({
        __nPureOrMixtureDataNumber.name() : __nPureOrMixtureDataNumber,
        __nReactionDataNumber.name() : __nReactionDataNumber,
        __nConstraintNumber.name() : __nConstraintNumber,
        __sEqSymbol.name() : __sEqSymbol,
        __nEqConstraintIndex.name() : __nEqConstraintIndex,
        __sOtherConstraintUnit.name() : __sOtherConstraintUnit,
        __nEqConstraintRangeMin.name() : __nEqConstraintRangeMin,
        __nEqConstraintRangeMax.name() : __nEqConstraintRangeMax
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_78 = CTD_ANON_78


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_79 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2579, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nPureOrMixtureDataNumber uses Python identifier nPureOrMixtureDataNumber
    __nPureOrMixtureDataNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nPureOrMixtureDataNumber'), 'nPureOrMixtureDataNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_79_httpwww_iupac_orgnamespacesThermoMLnPureOrMixtureDataNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2582, 8), )

    
    nPureOrMixtureDataNumber = property(__nPureOrMixtureDataNumber.value, __nPureOrMixtureDataNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nReactionDataNumber uses Python identifier nReactionDataNumber
    __nReactionDataNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nReactionDataNumber'), 'nReactionDataNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_79_httpwww_iupac_orgnamespacesThermoMLnReactionDataNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2583, 8), )

    
    nReactionDataNumber = property(__nReactionDataNumber.value, __nReactionDataNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nVarNumber uses Python identifier nVarNumber
    __nVarNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nVarNumber'), 'nVarNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_79_httpwww_iupac_orgnamespacesThermoMLnVarNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2585, 7), )

    
    nVarNumber = property(__nVarNumber.value, __nVarNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sEqSymbol uses Python identifier sEqSymbol
    __sEqSymbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sEqSymbol'), 'sEqSymbol', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_79_httpwww_iupac_orgnamespacesThermoMLsEqSymbol', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2586, 7), )

    
    sEqSymbol = property(__sEqSymbol.value, __sEqSymbol.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqVarIndex uses Python identifier nEqVarIndex
    __nEqVarIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqVarIndex'), 'nEqVarIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_79_httpwww_iupac_orgnamespacesThermoMLnEqVarIndex', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2587, 7), )

    
    nEqVarIndex = property(__nEqVarIndex.value, __nEqVarIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sOtherVarUnit uses Python identifier sOtherVarUnit
    __sOtherVarUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sOtherVarUnit'), 'sOtherVarUnit', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_79_httpwww_iupac_orgnamespacesThermoMLsOtherVarUnit', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2588, 7), )

    
    sOtherVarUnit = property(__sOtherVarUnit.value, __sOtherVarUnit.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqVarRangeMin uses Python identifier nEqVarRangeMin
    __nEqVarRangeMin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqVarRangeMin'), 'nEqVarRangeMin', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_79_httpwww_iupac_orgnamespacesThermoMLnEqVarRangeMin', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2589, 7), )

    
    nEqVarRangeMin = property(__nEqVarRangeMin.value, __nEqVarRangeMin.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqVarRangeMax uses Python identifier nEqVarRangeMax
    __nEqVarRangeMax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqVarRangeMax'), 'nEqVarRangeMax', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_79_httpwww_iupac_orgnamespacesThermoMLnEqVarRangeMax', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2590, 7), )

    
    nEqVarRangeMax = property(__nEqVarRangeMax.value, __nEqVarRangeMax.set, None, None)

    _ElementMap.update({
        __nPureOrMixtureDataNumber.name() : __nPureOrMixtureDataNumber,
        __nReactionDataNumber.name() : __nReactionDataNumber,
        __nVarNumber.name() : __nVarNumber,
        __sEqSymbol.name() : __sEqSymbol,
        __nEqVarIndex.name() : __nEqVarIndex,
        __sOtherVarUnit.name() : __sOtherVarUnit,
        __nEqVarRangeMin.name() : __nEqVarRangeMin,
        __nEqVarRangeMax.name() : __nEqVarRangeMax
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_79 = CTD_ANON_79


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_80 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2595, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqParNumber uses Python identifier nEqParNumber
    __nEqParNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqParNumber'), 'nEqParNumber', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_80_httpwww_iupac_orgnamespacesThermoMLnEqParNumber', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2597, 7), )

    
    nEqParNumber = property(__nEqParNumber.value, __nEqParNumber.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}sEqParSymbol uses Python identifier sEqParSymbol
    __sEqParSymbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sEqParSymbol'), 'sEqParSymbol', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_80_httpwww_iupac_orgnamespacesThermoMLsEqParSymbol', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2599, 8), )

    
    sEqParSymbol = property(__sEqParSymbol.value, __sEqParSymbol.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqParIndex uses Python identifier nEqParIndex
    __nEqParIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqParIndex'), 'nEqParIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_80_httpwww_iupac_orgnamespacesThermoMLnEqParIndex', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2600, 8), )

    
    nEqParIndex = property(__nEqParIndex.value, __nEqParIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqParValue uses Python identifier nEqParValue
    __nEqParValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqParValue'), 'nEqParValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_80_httpwww_iupac_orgnamespacesThermoMLnEqParValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2602, 7), )

    
    nEqParValue = property(__nEqParValue.value, __nEqParValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqParDigits uses Python identifier nEqParDigits
    __nEqParDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqParDigits'), 'nEqParDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_80_httpwww_iupac_orgnamespacesThermoMLnEqParDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2603, 7), )

    
    nEqParDigits = property(__nEqParDigits.value, __nEqParDigits.set, None, None)

    _ElementMap.update({
        __nEqParNumber.name() : __nEqParNumber,
        __sEqParSymbol.name() : __sEqParSymbol,
        __nEqParIndex.name() : __nEqParIndex,
        __nEqParValue.name() : __nEqParValue,
        __nEqParDigits.name() : __nEqParDigits
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_80 = CTD_ANON_80


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_81 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2608, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}sEqConstantSymbol uses Python identifier sEqConstantSymbol
    __sEqConstantSymbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sEqConstantSymbol'), 'sEqConstantSymbol', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_81_httpwww_iupac_orgnamespacesThermoMLsEqConstantSymbol', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2610, 7), )

    
    sEqConstantSymbol = property(__sEqConstantSymbol.value, __sEqConstantSymbol.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqConstantIndex uses Python identifier nEqConstantIndex
    __nEqConstantIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqConstantIndex'), 'nEqConstantIndex', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_81_httpwww_iupac_orgnamespacesThermoMLnEqConstantIndex', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2611, 7), )

    
    nEqConstantIndex = property(__nEqConstantIndex.value, __nEqConstantIndex.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqConstantValue uses Python identifier nEqConstantValue
    __nEqConstantValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqConstantValue'), 'nEqConstantValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_81_httpwww_iupac_orgnamespacesThermoMLnEqConstantValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2612, 7), )

    
    nEqConstantValue = property(__nEqConstantValue.value, __nEqConstantValue.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqConstantDigits uses Python identifier nEqConstantDigits
    __nEqConstantDigits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqConstantDigits'), 'nEqConstantDigits', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_81_httpwww_iupac_orgnamespacesThermoMLnEqConstantDigits', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2613, 7), )

    
    nEqConstantDigits = property(__nEqConstantDigits.value, __nEqConstantDigits.set, None, None)

    _ElementMap.update({
        __sEqConstantSymbol.name() : __sEqConstantSymbol,
        __nEqConstantIndex.name() : __nEqConstantIndex,
        __nEqConstantValue.name() : __nEqConstantValue,
        __nEqConstantDigits.name() : __nEqConstantDigits
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_81 = CTD_ANON_81


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_82 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2618, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqParNumber1 uses Python identifier nEqParNumber1
    __nEqParNumber1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqParNumber1'), 'nEqParNumber1', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_82_httpwww_iupac_orgnamespacesThermoMLnEqParNumber1', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2620, 7), )

    
    nEqParNumber1 = property(__nEqParNumber1.value, __nEqParNumber1.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nEqParNumber2 uses Python identifier nEqParNumber2
    __nEqParNumber2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nEqParNumber2'), 'nEqParNumber2', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_82_httpwww_iupac_orgnamespacesThermoMLnEqParNumber2', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2621, 7), )

    
    nEqParNumber2 = property(__nEqParNumber2.value, __nEqParNumber2.set, None, None)

    
    # Element {http://www.iupac.org/namespaces/ThermoML}nCovarianceValue uses Python identifier nCovarianceValue
    __nCovarianceValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nCovarianceValue'), 'nCovarianceValue', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_82_httpwww_iupac_orgnamespacesThermoMLnCovarianceValue', False, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2622, 7), )

    
    nCovarianceValue = property(__nCovarianceValue.value, __nCovarianceValue.set, None, None)

    _ElementMap.update({
        __nEqParNumber1.name() : __nEqParNumber1,
        __nEqParNumber2.name() : __nEqParNumber2,
        __nCovarianceValue.name() : __nCovarianceValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_82 = CTD_ANON_82


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_83 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 390, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.iupac.org/namespaces/ThermoML}Component uses Python identifier Component
    __Component = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Component'), 'Component', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_83_httpwww_iupac_orgnamespacesThermoMLComponent', True, pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 392, 8), )

    
    Component = property(__Component.value, __Component.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_83_type', _module_typeBindings.MulticomponentType)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 404, 7)
    __type._UseLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 404, 7)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute compositionBasis uses Python identifier compositionBasis
    __compositionBasis = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'compositionBasis'), 'compositionBasis', '__httpwww_iupac_orgnamespacesThermoML_CTD_ANON_83_compositionBasis', _module_typeBindings.MulticomponentComposition)
    __compositionBasis._DeclarationLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 405, 7)
    __compositionBasis._UseLocation = pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 405, 7)
    
    compositionBasis = property(__compositionBasis.value, __compositionBasis.set, None, None)

    _ElementMap.update({
        __Component.name() : __Component
    })
    _AttributeMap.update({
        __type.name() : __type,
        __compositionBasis.name() : __compositionBasis
    })
_module_typeBindings.CTD_ANON_83 = CTD_ANON_83


DataReport = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataReport'), DataReport_, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 7, 1))
Namespace.addCategoryObject('elementBinding', DataReport.name().localName(), DataReport)

TRCRefID = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TRCRefID'), CTD_ANON_, documentation='TRC Reference Identifier', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 30, 1))
Namespace.addCategoryObject('elementBinding', TRCRefID.name().localName(), TRCRefID)

Compound = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Compound'), CTD_ANON_5, documentation='Material component characteristics that serves to identify the component', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 264, 1))
Namespace.addCategoryObject('elementBinding', Compound.name().localName(), Compound)

Sample = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Sample'), CTD_ANON_12, documentation='sample', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 424, 1))
Namespace.addCategoryObject('elementBinding', Sample.name().localName(), Sample)

PureOrMixtureData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PureOrMixtureData'), CTD_ANON_15, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 532, 1))
Namespace.addCategoryObject('elementBinding', PureOrMixtureData.name().localName(), PureOrMixtureData)

ReactionData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReactionData'), CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1450, 1))
Namespace.addCategoryObject('elementBinding', ReactionData.name().localName(), ReactionData)

RegNum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1))
Namespace.addCategoryObject('elementBinding', RegNum.name().localName(), RegNum)

Solvent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Solvent'), CTD_ANON_58, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2085, 1))
Namespace.addCategoryObject('elementBinding', Solvent.name().localName(), Solvent)

CurveDev = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurveDev'), CTD_ANON_59, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2279, 1))
Namespace.addCategoryObject('elementBinding', CurveDev.name().localName(), CurveDev)

CombinedUncertainty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CombinedUncertainty'), CTD_ANON_60, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2327, 1))
Namespace.addCategoryObject('elementBinding', CombinedUncertainty.name().localName(), CombinedUncertainty)

NumValues = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumValues'), CTD_ANON_61, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2349, 1))
Namespace.addCategoryObject('elementBinding', NumValues.name().localName(), NumValues)

CriticalEvaluation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), CTD_ANON_71, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1))
Namespace.addCategoryObject('elementBinding', CriticalEvaluation.name().localName(), CriticalEvaluation)

Prediction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), CTD_ANON_75, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1))
Namespace.addCategoryObject('elementBinding', Prediction.name().localName(), Prediction)

Equation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Equation'), CTD_ANON_76, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2521, 1))
Namespace.addCategoryObject('elementBinding', Equation.name().localName(), Equation)



DataReport_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Version'), CTD_ANON, scope=DataReport_, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 13, 3)))

DataReport_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Citation'), CitationType, scope=DataReport_, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 21, 3)))

DataReport_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Compound'), CTD_ANON_5, scope=DataReport_, documentation='Material component characteristics that serves to identify the component', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 264, 1)))

DataReport_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PureOrMixtureData'), CTD_ANON_15, scope=DataReport_, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 532, 1)))

DataReport_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReactionData'), CTD_ANON_41, scope=DataReport_, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1450, 1)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 22, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 23, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 24, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataReport_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Version')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 13, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DataReport_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Citation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 21, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DataReport_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Compound')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 22, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DataReport_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PureOrMixtureData')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 23, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DataReport_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReactionData')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 24, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DataReport_._Automaton = _BuildAutomaton()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nVersionMajor'), pyxb.binding.datatypes.integer, scope=CTD_ANON, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 16, 6)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nVersionMinor'), pyxb.binding.datatypes.integer, scope=CTD_ANON, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 17, 6)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nVersionMajor')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 16, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nVersionMinor')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 17, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'yrYrPub'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, documentation='Integer year of publication', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 36, 4)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sAuthor1'), pyxb.binding.datatypes.string, scope=CTD_ANON_, documentation='First 3 characters of Author 1 last name', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 41, 4)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sAuthor2'), pyxb.binding.datatypes.string, scope=CTD_ANON_, documentation='First 3 characters of Author 2 last name', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 46, 4)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nAuthorn'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, documentation='Integer identifier to distinguish conflicts', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 51, 4)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yrYrPub')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 36, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sAuthor1')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 41, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sAuthor2')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 46, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nAuthorn')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 51, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_2()




CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TRCRefID'), CTD_ANON_, scope=CitationType, documentation='TRC Reference Identifier', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 30, 1)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eType'), STD_ANON, scope=CitationType, documentation='The type of publication', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 65, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eSourceType'), STD_ANON_, scope=CitationType, documentation='The source status type for a citation', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 84, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sDocumentOrigin'), pyxb.binding.datatypes.string, scope=CitationType, documentation='Company, institution, or conference name', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 96, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sAuthor'), pyxb.binding.datatypes.string, scope=CitationType, documentation='Author of publication', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 101, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sPubName'), pyxb.binding.datatypes.string, scope=CitationType, documentation='Name of the publication.', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 106, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'yrPubYr'), pyxb.binding.datatypes.gYear, scope=CitationType, documentation='Publication year', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 111, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateCit'), pyxb.binding.datatypes.date, scope=CitationType, documentation='Date of the citation', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 116, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sTitle'), pyxb.binding.datatypes.string, scope=CitationType, documentation='Title of the publication', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 121, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sAbstract'), pyxb.binding.datatypes.string, scope=CitationType, documentation='An abstract of the publication', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 126, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sKeyword'), pyxb.binding.datatypes.string, scope=CitationType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 131, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eLanguage'), STD_ANON_2, scope=CitationType, documentation='Language of publication', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 132, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sDOI'), pyxb.binding.datatypes.string, scope=CitationType, documentation='DOI', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 149, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'urlCit'), pyxb.binding.datatypes.string, scope=CitationType, documentation='URL to the publication', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 154, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sCASCit'), pyxb.binding.datatypes.string, scope=CitationType, documentation='The Chemical Abstracts Service citation', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 159, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sIDNum'), pyxb.binding.datatypes.string, scope=CitationType, documentation='Identification number, e.g., a patent number or a document number', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 164, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sLocation'), pyxb.binding.datatypes.string, scope=CitationType, documentation='Reference to a location', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 169, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sVol'), pyxb.binding.datatypes.string, scope=CitationType, documentation='Volume number', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 174, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sPage'), pyxb.binding.datatypes.string, scope=CitationType, documentation='Page range where the publication can be found', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 179, 3)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'book'), CTD_ANON_2, scope=CitationType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 185, 4)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'journal'), CTD_ANON_3, scope=CitationType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 216, 4)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'thesis'), CTD_ANON_4, scope=CitationType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 237, 4)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 64, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 65, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 84, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 96, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 101, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 106, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 111, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 116, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 121, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 126, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 131, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 132, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 149, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 154, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 159, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 164, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 169, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 174, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 179, 3))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 184, 3))
    counters.add(cc_19)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TRCRefID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 64, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 65, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eSourceType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 84, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sDocumentOrigin')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 96, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sAuthor')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 101, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sPubName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 106, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yrPubYr')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 111, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateCit')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 116, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sTitle')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 121, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sAbstract')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 126, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sKeyword')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 131, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eLanguage')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 132, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sDOI')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 149, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'urlCit')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 154, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sCASCit')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 159, 3))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sIDNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 164, 3))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sLocation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 169, 3))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sVol')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 174, 3))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sPage')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 179, 3))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'book')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 185, 4))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'journal')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 216, 4))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'thesis')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 237, 4))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CitationType._Automaton = _BuildAutomaton_3()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sChapter'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, documentation='Chapter number', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 188, 7)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sEdition'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, documentation='Edition number of the book', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 193, 7)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sEditor'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, documentation='Editor of the book', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 198, 7)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sISBN'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, documentation='The International Standard Book Number', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 203, 7)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sPublisher'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, documentation='Publisher name and city', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 208, 7)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 188, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 193, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 198, 7))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 203, 7))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 208, 7))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sChapter')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 188, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sEdition')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 193, 7))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sEditor')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 198, 7))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sISBN')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 203, 7))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sPublisher')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 208, 7))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_4()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sISSN'), pyxb.binding.datatypes.string, scope=CTD_ANON_3, documentation='The International Standard Subscription Number', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 219, 7)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sIssue'), pyxb.binding.datatypes.string, scope=CTD_ANON_3, documentation='Issue number, usually indicates month', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 224, 7)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sCODEN'), pyxb.binding.datatypes.string, scope=CTD_ANON_3, documentation='The CODEN identification of the journal', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 229, 7)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 219, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 224, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 229, 7))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sISSN')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 219, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sIssue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 224, 7))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sCODEN')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 229, 7))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_5()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sDeg'), pyxb.binding.datatypes.string, scope=CTD_ANON_4, documentation='Academic degree designation, e.g., MS or PhD', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 240, 7)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sDegInst'), pyxb.binding.datatypes.string, scope=CTD_ANON_4, documentation='Academic degree granting institution', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 245, 7)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sUMIPubNum'), pyxb.binding.datatypes.string, scope=CTD_ANON_4, documentation='University Microfilms International Publication Number', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 250, 7)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 240, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 245, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 250, 7))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sDeg')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 240, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sDegInst')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 245, 7))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sUMIPubNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 250, 7))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_6()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_5, documentation='Index to link compounds to data', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 270, 4)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_6, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 275, 4)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPubChemID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 286, 4)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sStandardInChI'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, documentation='IUPAC International Chemical Identifier', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 287, 4)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sStandardInChIKey'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, documentation='', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 293, 4)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sOrgID'), CTD_ANON_7, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 298, 4)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sCASName'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 306, 4)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sIUPACName'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, documentation='International Union of Physics and Applied Chemistry name', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 307, 4)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sCommonName'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, documentation='Common name', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 313, 4)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sFormulaMolec'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, documentation='Chemical molecular formula', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 319, 4)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sSmiles'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, documentation='SMILES notation', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 325, 4)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'polymer'), CTD_ANON_8, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 332, 5)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ion'), CTD_ANON_9, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 368, 5)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'biomaterial'), CTD_ANON_10, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 378, 5)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MulticomponentSubstance'), CTD_ANON_83, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 389, 5)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eSpeciationState'), STD_ANON_3, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 409, 4)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Sample'), CTD_ANON_12, scope=CTD_ANON_5, documentation='sample', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 424, 1)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 270, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 275, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 286, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 287, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 293, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 298, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 306, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 307, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 313, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 319, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 325, 4))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 331, 4))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 409, 4))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 417, 4))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 270, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 275, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPubChemID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 286, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sStandardInChI')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 287, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sStandardInChIKey')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 293, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sOrgID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 298, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sCASName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 306, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sIUPACName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 307, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sCommonName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 313, 4))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sFormulaMolec')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 319, 4))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sSmiles')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 325, 4))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'polymer')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 332, 5))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ion')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 368, 5))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'biomaterial')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 378, 5))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MulticomponentSubstance')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 389, 5))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eSpeciationState')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 409, 4))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Sample')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 417, 4))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_7()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCASRNum'), pyxb.binding.datatypes.integer, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 278, 7)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nOrgNum'), pyxb.binding.datatypes.integer, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 280, 8)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sOrganization'), pyxb.binding.datatypes.string, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 281, 8)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 278, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 279, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 281, 8))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCASRNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 278, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nOrgNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 280, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sOrganization')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 281, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_8()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sOrgIdentifier'), pyxb.binding.datatypes.string, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 301, 7)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sOrganization'), pyxb.binding.datatypes.string, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 302, 7)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sOrgIdentifier')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 301, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sOrganization')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 302, 7))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_9()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nNumberAvgMolMass'), pyxb.binding.datatypes.float, scope=CTD_ANON_8, documentation='Number average molecular mass, kg/kmol', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 338, 8)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPeakAvgMolMass'), pyxb.binding.datatypes.float, scope=CTD_ANON_8, documentation='Peak average molecular mass, kg/kmol', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 343, 8)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nViscosityAvgMolMass'), pyxb.binding.datatypes.float, scope=CTD_ANON_8, documentation='Viscosity average molecular mass, kg/kmol', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 348, 8)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nMassAvgMolMass'), pyxb.binding.datatypes.float, scope=CTD_ANON_8, documentation='Weight average molecular mass, kg/kmol', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 353, 8)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nZAvgMolMass'), pyxb.binding.datatypes.float, scope=CTD_ANON_8, documentation='Z average molecular mass, kg/kmol', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 358, 8)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nMolarMassDispersity'), pyxb.binding.datatypes.float, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 363, 8)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nDegOfPolymerizationDispersity'), pyxb.binding.datatypes.float, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 364, 8)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 338, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 343, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 348, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 353, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 358, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 363, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 364, 8))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nNumberAvgMolMass')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 338, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPeakAvgMolMass')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 343, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nViscosityAvgMolMass')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 348, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nMassAvgMolMass')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 353, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nZAvgMolMass')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 358, 8))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nMolarMassDispersity')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 363, 8))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nDegOfPolymerizationDispersity')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 364, 8))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_10()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCharge'), pyxb.binding.datatypes.integer, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 374, 8)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCharge')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 374, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_11()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sECNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 384, 8)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sPDBIdentifier'), pyxb.binding.datatypes.string, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 385, 8)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 384, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 385, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sECNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 384, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sPDBIdentifier')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 385, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_12()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 396, 12)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nAmount'), pyxb.binding.datatypes.float, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 399, 11)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 396, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 397, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nAmount')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 399, 11))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_13()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm'), pyxb.binding.datatypes.integer, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 430, 4)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eSource'), eSampleSource, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 431, 4)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eStatus'), eSampleStatus, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 432, 4)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'purity'), CTD_ANON_13, scope=CTD_ANON_12, documentation='Purity of the sample', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 433, 4)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ComponentSample'), CTD_ANON_14, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 515, 4)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 431, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 432, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 433, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 515, 4))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 430, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eSource')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 431, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eStatus')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 432, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'purity')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 433, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ComponentSample')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 515, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_14()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nStep'), pyxb.binding.datatypes.integer, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 439, 7)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePurifMethod'), ePurifMethod, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 440, 7)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sPurifMethod'), pyxb.binding.datatypes.string, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 441, 7)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPurityMol'), pyxb.binding.datatypes.float, scope=CTD_ANON_13, documentation='purity value in mole percent', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 443, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPurityMolDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 448, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPurityMass'), pyxb.binding.datatypes.float, scope=CTD_ANON_13, documentation='purity value in mass percent', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 451, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPurityMassDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 456, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPurityVol'), pyxb.binding.datatypes.float, scope=CTD_ANON_13, documentation='purity value in volume percent', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 459, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPurityVolDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 464, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nUnknownPerCent'), pyxb.binding.datatypes.float, scope=CTD_ANON_13, documentation='purity value in not specified percent', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 467, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nUnknownPerCentDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 472, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nWaterMassPerCent'), pyxb.binding.datatypes.float, scope=CTD_ANON_13, documentation='mass per cent of water', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 475, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nWaterMassPerCentDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 480, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nWaterMolPerCent'), pyxb.binding.datatypes.float, scope=CTD_ANON_13, documentation='mole per cent of water', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 483, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nWaterMolPerCentDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 488, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nHalideMolPerCent'), pyxb.binding.datatypes.float, scope=CTD_ANON_13, documentation='mass per cent of halide impurity', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 491, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nHalideMolPerCentDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 496, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nHalideMassPerCent'), pyxb.binding.datatypes.float, scope=CTD_ANON_13, documentation='mass per cent of halide impurity', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 499, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nHalideMassPerCentDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 504, 8)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eAnalMeth'), ePurityAnalMethod, scope=CTD_ANON_13, documentation='Analytical method used to determine purity', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 506, 7)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sAnalMeth'), pyxb.binding.datatypes.string, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 511, 7)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 440, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 441, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 442, 7))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 450, 7))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 458, 7))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 466, 7))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 474, 7))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 482, 7))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 490, 7))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 498, 7))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 506, 7))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 511, 7))
    counters.add(cc_11)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nStep')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 439, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePurifMethod')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 440, 7))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sPurifMethod')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 441, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPurityMol')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 443, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPurityMolDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 448, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPurityMass')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 451, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPurityMassDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 456, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPurityVol')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 459, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPurityVolDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 464, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nUnknownPerCent')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 467, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nUnknownPerCentDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 472, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nWaterMassPerCent')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 475, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nWaterMassPerCentDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 480, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nWaterMolPerCent')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 483, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nWaterMolPerCentDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 488, 8))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nHalideMolPerCent')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 491, 8))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nHalideMolPerCentDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 496, 8))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nHalideMassPerCent')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 499, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nHalideMassPerCentDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 504, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eAnalMeth')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 506, 7))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sAnalMeth')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 511, 7))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_15()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 519, 8)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm'), pyxb.binding.datatypes.integer, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 522, 7)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 519, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 520, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 522, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_16()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPureOrMixtureDataNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 535, 4)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Component'), CTD_ANON_16, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 536, 4)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AuxiliarySubstance'), CTD_ANON_17, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 547, 4)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eExpPurpose'), eExpPurpose, scope=CTD_ANON_15, documentation='Purpose of measurement', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 570, 4)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sCompiler'), pyxb.binding.datatypes.string, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 575, 4)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sContributor'), pyxb.binding.datatypes.string, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 576, 4)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDateAdded'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 577, 4)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Property'), CTD_ANON_18, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 578, 4)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhaseID'), CTD_ANON_34, scope=CTD_ANON_15, documentation=' CASRN is necessary for mixtures only', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1336, 4)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Constraint'), CTD_ANON_35, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1354, 4)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Variable'), CTD_ANON_38, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1399, 4)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumValues'), CTD_ANON_61, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2349, 1)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Equation'), CTD_ANON_76, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2521, 1)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 535, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 547, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 570, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 575, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 576, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 577, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1354, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1399, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1442, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1443, 4))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPureOrMixtureDataNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 535, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Component')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 536, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AuxiliarySubstance')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 547, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eExpPurpose')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 570, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sCompiler')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 575, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sContributor')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 576, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDateAdded')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 577, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Property')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 578, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PhaseID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1336, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Constraint')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1354, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Variable')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1399, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NumValues')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1442, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Equation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1443, 4))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_17()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 540, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm'), pyxb.binding.datatypes.int, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 543, 7)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 543, 7))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 540, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 541, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 543, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_18()




CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eFunction'), STD_ANON_4, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 551, 8)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sFunction'), pyxb.binding.datatypes.string, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 560, 8)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 563, 8)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm'), pyxb.binding.datatypes.int, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 566, 7)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 550, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 566, 7))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eFunction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 551, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sFunction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 560, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 563, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 564, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 566, 7))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_19()




CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPropNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 581, 7)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Property-MethodID'), CTD_ANON_19, scope=CTD_ANON_18, documentation=' CASRN is necessary for mixtures only', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 582, 7)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropPhaseID'), CTD_ANON_32, scope=CTD_ANON_18, documentation=' CASRN is necessary for mixtures only', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1255, 7)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePresentation'), ePresentation, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1284, 7)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eRefStateType'), eRefStateType, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1285, 7)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nRefTemp'), pyxb.binding.datatypes.float, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1287, 8)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nRefTempDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1288, 8)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nRefPressure'), pyxb.binding.datatypes.float, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1291, 8)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nRefPressureDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1292, 8)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RefPhaseID'), CTD_ANON_33, scope=CTD_ANON_18, documentation=' CASRN is necessary for mixtures only', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1294, 7)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eStandardState'), STD_ANON_28, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1313, 7)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropUncertainty'), PropVarUncertaintyType, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1329, 7)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropRepeatability'), PropVarRepeatabilityType, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1330, 7)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropDeviceSpec'), PropVarDeviceSpecType, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1331, 7)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Solvent'), CTD_ANON_58, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2085, 1)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurveDev'), CTD_ANON_59, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2279, 1)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CombinedUncertainty'), CTD_ANON_60, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2327, 1)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1255, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1285, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1286, 7))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1290, 7))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1294, 7))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1312, 7))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1313, 7))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1328, 7))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1329, 7))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1330, 7))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1331, 7))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1332, 7))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPropNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 581, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Property-MethodID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 582, 7))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropPhaseID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1255, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePresentation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1284, 7))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eRefStateType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1285, 7))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nRefTemp')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1287, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nRefTempDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1288, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nRefPressure')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1291, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nRefPressureDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1292, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RefPhaseID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1294, 7))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Solvent')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1312, 7))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eStandardState')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1313, 7))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CombinedUncertainty')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1328, 7))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropUncertainty')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1329, 7))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropRepeatability')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1330, 7))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropDeviceSpec')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1331, 7))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurveDev')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1332, 7))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_20()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropertyGroup'), CTD_ANON_20, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 588, 10)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1249, 11)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1248, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropertyGroup')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 588, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1249, 11))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1250, 11))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_21()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Criticals'), CTD_ANON_21, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 591, 13)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VaporPBoilingTAzeotropTandP'), CTD_ANON_22, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 634, 13)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhaseTransition'), CTD_ANON_23, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 687, 13)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CompositionAtPhaseEquilibrium'), CTD_ANON_24, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 749, 13)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ActivityFugacityOsmoticProp'), CTD_ANON_25, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 824, 13)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VolumetricProp'), CTD_ANON_26, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 868, 13)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HeatCapacityAndDerivedProp'), CTD_ANON_27, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 943, 13)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExcessPartialApparentEnergyProp'), CTD_ANON_28, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1007, 13)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransportProp'), CTD_ANON_29, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1084, 13)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RefractionSurfaceTensionSoundSpeed'), CTD_ANON_30, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1148, 13)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BioProperties'), CTD_ANON_31, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1216, 13)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Criticals')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 591, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VaporPBoilingTAzeotropTandP')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 634, 13))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PhaseTransition')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 687, 13))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CompositionAtPhaseEquilibrium')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 749, 13))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ActivityFugacityOsmoticProp')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 824, 13))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VolumetricProp')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 868, 13))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HeatCapacityAndDerivedProp')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 943, 13))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExcessPartialApparentEnergyProp')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1007, 13))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransportProp')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1084, 13))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RefractionSurfaceTensionSoundSpeed')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1148, 13))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BioProperties')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1216, 13))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_22()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), STD_ANON_5, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 594, 16)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), STD_ANON_6, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 611, 17)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), pyxb.binding.datatypes.string, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 627, 17)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), CTD_ANON_71, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), CTD_ANON_75, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePropName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 594, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 611, 17))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 627, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 628, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Prediction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 629, 17))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_23()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), STD_ANON_7, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 637, 16)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), STD_ANON_8, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 653, 17)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), pyxb.binding.datatypes.string, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 680, 17)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), CTD_ANON_71, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), CTD_ANON_75, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePropName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 637, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 653, 17))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 680, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 681, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Prediction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 682, 17))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_24()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), STD_ANON_9, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 690, 16)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), STD_ANON_10, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 716, 17)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), pyxb.binding.datatypes.string, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 742, 17)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), CTD_ANON_71, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), CTD_ANON_75, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePropName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 690, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 716, 17))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 742, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 743, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Prediction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 744, 17))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_25()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), STD_ANON_11, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 752, 16)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), STD_ANON_12, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 798, 17)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), pyxb.binding.datatypes.string, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 817, 17)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), CTD_ANON_71, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), CTD_ANON_75, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePropName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 752, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 798, 17))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 817, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 818, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Prediction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 819, 17))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_26()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), STD_ANON_13, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 827, 16)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), STD_ANON_14, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 842, 17)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), pyxb.binding.datatypes.string, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 861, 17)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), CTD_ANON_71, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), CTD_ANON_75, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePropName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 827, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 842, 17))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 861, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 862, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Prediction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 863, 17))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_27()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), STD_ANON_15, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 871, 16)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), STD_ANON_16, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 906, 17)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), pyxb.binding.datatypes.string, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 936, 17)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), CTD_ANON_71, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), CTD_ANON_75, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePropName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 871, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 906, 17))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 936, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 937, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Prediction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 938, 17))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_28()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), STD_ANON_17, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 946, 16)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), STD_ANON_18, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 973, 17)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), pyxb.binding.datatypes.string, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1000, 17)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), CTD_ANON_71, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), CTD_ANON_75, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePropName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 946, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 973, 17))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1000, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1001, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Prediction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1002, 17))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_29()




CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), STD_ANON_19, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1010, 16)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), STD_ANON_20, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1056, 17)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), pyxb.binding.datatypes.string, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1077, 17)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), CTD_ANON_71, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), CTD_ANON_75, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePropName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1010, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1056, 17))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1077, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1078, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Prediction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1079, 17))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_30()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), STD_ANON_21, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1087, 16)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), STD_ANON_22, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1106, 17)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), pyxb.binding.datatypes.string, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1141, 17)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), CTD_ANON_71, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), CTD_ANON_75, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePropName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1087, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1106, 17))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1141, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1142, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Prediction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1143, 17))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_31()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), STD_ANON_23, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1151, 16)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), STD_ANON_24, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1172, 17)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), pyxb.binding.datatypes.string, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1209, 17)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), CTD_ANON_71, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), CTD_ANON_75, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePropName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1151, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1172, 17))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1209, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1210, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Prediction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1211, 17))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_32()




CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), STD_ANON_25, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1219, 16)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), STD_ANON_26, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1231, 17)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), pyxb.binding.datatypes.string, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1238, 17)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), CTD_ANON_71, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), CTD_ANON_75, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePropName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1219, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1231, 17))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1238, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1239, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Prediction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1240, 17))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_33()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePropPhase'), ePhaseName, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1261, 10)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType'), eCrystalLatticeTypeSelection, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1263, 11)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription'), pyxb.binding.datatypes.string, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1264, 11)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1267, 11)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eBioState'), STD_ANON_27, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1271, 11)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sBioState'), pyxb.binding.datatypes.string, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1279, 11)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1262, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1266, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1270, 10))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePropPhase')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1261, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1263, 11))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1264, 11))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1267, 11))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1268, 11))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eBioState')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1271, 11))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sBioState')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1279, 11))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_34()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eRefPhase'), ePhaseName, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1300, 10)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType'), eCrystalLatticeTypeSelection, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1302, 11)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1303, 11)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1306, 11)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1301, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1305, 10))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eRefPhase')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1300, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1302, 11))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1303, 11))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1306, 11))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1307, 11))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_35()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePhase'), ePhaseName, scope=CTD_ANON_34, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1342, 7)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType'), eCrystalLatticeTypeSelection, scope=CTD_ANON_34, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1344, 8)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription'), pyxb.binding.datatypes.string, scope=CTD_ANON_34, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1345, 8)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_34, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1348, 8)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_34, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1343, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1347, 7))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePhase')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1342, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1344, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1345, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1348, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1349, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_36()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nConstraintNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1357, 7)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConstraintID'), CTD_ANON_36, scope=CTD_ANON_35, documentation=' CASRN is necessary for mixtures only', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1358, 7)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConstraintPhaseID'), CTD_ANON_37, scope=CTD_ANON_35, documentation=' CASRN is necessary for mixtures only', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1372, 7)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nConstraintValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1391, 7)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nConstrDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1392, 7)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConstrUncertainty'), ConstrUncertaintyType, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1393, 7)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConstrRepeatability'), ConstrRepeatabilityType, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1394, 7)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConstrDeviceSpec'), ConstrDeviceSpecType, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1395, 7)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Solvent'), CTD_ANON_58, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2085, 1)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1357, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1372, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1390, 7))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1393, 7))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1394, 7))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1395, 7))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nConstraintNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1357, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ConstraintID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1358, 7))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ConstraintPhaseID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1372, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Solvent')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1390, 7))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nConstraintValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1391, 7))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nConstrDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1392, 7))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ConstrUncertainty')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1393, 7))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ConstrRepeatability')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1394, 7))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ConstrDeviceSpec')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1395, 7))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_37()




CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConstraintType'), ConstraintVariableType, scope=CTD_ANON_36, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1364, 10)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_36, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1366, 11)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_36, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1365, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ConstraintType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1364, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1366, 11))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1367, 11))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_36._Automaton = _BuildAutomaton_38()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eConstraintPhase'), ePhaseName, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1378, 10)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType'), eCrystalLatticeTypeSelection, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1380, 11)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription'), pyxb.binding.datatypes.string, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1381, 11)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1384, 11)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1379, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1383, 10))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eConstraintPhase')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1378, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1380, 11))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1381, 11))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1384, 11))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1385, 11))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_39()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nVarNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1402, 7)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VariableID'), CTD_ANON_39, scope=CTD_ANON_38, documentation=' CASRN is necessary for mixtures only', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1403, 7)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VarPhaseID'), CTD_ANON_40, scope=CTD_ANON_38, documentation=' CASRN is necessary for mixtures only', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1417, 7)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VarUncertainty'), PropVarUncertaintyType, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1436, 7)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VarRepeatability'), PropVarRepeatabilityType, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1437, 7)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VarDeviceSpec'), PropVarDeviceSpecType, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1438, 7)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Solvent'), CTD_ANON_58, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2085, 1)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1417, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1435, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1436, 7))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1437, 7))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1438, 7))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nVarNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1402, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VariableID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1403, 7))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VarPhaseID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1417, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Solvent')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1435, 7))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VarUncertainty')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1436, 7))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VarRepeatability')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1437, 7))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VarDeviceSpec')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1438, 7))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_40()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VariableType'), ConstraintVariableType, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1409, 10)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1411, 11)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1410, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VariableType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1409, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1411, 11))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1412, 11))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_41()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eVarPhase'), ePhaseName, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1423, 10)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType'), eCrystalLatticeTypeSelection, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1425, 11)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription'), pyxb.binding.datatypes.string, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1426, 11)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1429, 11)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1424, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1428, 10))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eVarPhase')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1423, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1425, 11))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1426, 11))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1429, 11))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1430, 11))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_42()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nReactionDataNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1453, 4)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Participant'), CTD_ANON_42, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1454, 4)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nElectronNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1501, 4)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AuxiliarySubstance'), CTD_ANON_43, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1502, 4)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Solvent'), CTD_ANON_44, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1526, 4)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eReactionFormalism'), STD_ANON_32, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1537, 4)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eExpPurpose'), eExpPurpose, scope=CTD_ANON_41, documentation='Purpose of measurement', location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1545, 4)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sCompiler'), pyxb.binding.datatypes.string, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1550, 4)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sContributor'), pyxb.binding.datatypes.string, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1551, 4)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDateAdded'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1552, 4)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eReactionType'), STD_ANON_33, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1553, 4)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Property'), CTD_ANON_45, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1584, 4)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Constraint'), CTD_ANON_52, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1793, 4)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Variable'), CTD_ANON_54, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1816, 4)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumValues'), CTD_ANON_61, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2349, 1)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Equation'), CTD_ANON_76, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2521, 1)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1453, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1501, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1502, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1526, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1537, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1545, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1550, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1551, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1552, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1793, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1816, 4))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1853, 4))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1854, 4))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nReactionDataNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1453, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Participant')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1454, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nElectronNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1501, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AuxiliarySubstance')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1502, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Solvent')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1526, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eReactionFormalism')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1537, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eExpPurpose')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1545, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sCompiler')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1550, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sContributor')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1551, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDateAdded')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1552, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eReactionType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1553, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Property')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1584, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Constraint')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1793, 4))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Variable')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1816, 4))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NumValues')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1853, 4))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Equation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1854, 4))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_43()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1458, 8)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm'), pyxb.binding.datatypes.int, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1461, 7)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nStoichiometricCoef'), pyxb.binding.datatypes.float, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1462, 7)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePhase'), ePhaseName, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1463, 7)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType'), eCrystalLatticeTypeSelection, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1465, 8)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription'), pyxb.binding.datatypes.string, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1466, 8)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eStandardState'), STD_ANON_29, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1468, 7)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eCompositionRepresentation'), STD_ANON_30, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1483, 7)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nNumericalComposition'), pyxb.binding.datatypes.float, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1497, 7)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1461, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1462, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1464, 7))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1468, 7))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1483, 7))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1497, 7))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1458, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1459, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1461, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nStoichiometricCoef')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1462, 7))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePhase')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1463, 7))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1465, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1466, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eStandardState')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1468, 7))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCompositionRepresentation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1483, 7))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nNumericalComposition')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1497, 7))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_44()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eFunction'), STD_ANON_31, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1506, 8)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sFunction'), pyxb.binding.datatypes.string, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1515, 8)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1518, 8)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm'), pyxb.binding.datatypes.int, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1521, 7)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePhase'), ePhaseName, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1522, 7)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1505, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1521, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1522, 7))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eFunction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1506, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sFunction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1515, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1518, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1519, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nSampleNm')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1521, 7))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePhase')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1522, 7))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_45()




CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1530, 8)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePhase'), ePhaseName, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1533, 7)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1530, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1531, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePhase')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1533, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_46()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPropNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1587, 7)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Property-MethodID'), CTD_ANON_46, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1588, 7)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Solvent'), CTD_ANON_50, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1738, 7)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Catalyst'), CTD_ANON_51, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1749, 7)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eStandardState'), STD_ANON_38, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1760, 7)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nTemperature-K'), pyxb.binding.datatypes.float, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1776, 8)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nTemperatureDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1778, 8)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPressure-kPa'), pyxb.binding.datatypes.float, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1781, 8)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPressureDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1783, 8)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropUncertainty'), PropVarUncertaintyType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1786, 7)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropRepeatability'), PropVarRepeatabilityType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1787, 7)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropDeviceSpec'), PropVarDeviceSpecType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1788, 7)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurveDev'), CTD_ANON_59, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2279, 1)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CombinedUncertainty'), CTD_ANON_60, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2327, 1)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1738, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1749, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1760, 7))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1775, 7))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1780, 7))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1785, 7))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1786, 7))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1787, 7))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1788, 7))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1789, 7))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPropNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1587, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Property-MethodID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1588, 7))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Solvent')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1738, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Catalyst')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1749, 7))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eStandardState')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1760, 7))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nTemperature-K')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1776, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nTemperatureDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1778, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPressure-kPa')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1781, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPressureDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1783, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CombinedUncertainty')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1785, 7))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropUncertainty')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1786, 7))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropRepeatability')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1787, 7))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropDeviceSpec')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1788, 7))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurveDev')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1789, 7))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_47()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropertyGroup'), CTD_ANON_47, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1591, 10)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropertyGroup')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1591, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_48()




CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReactionStateChangeProp'), CTD_ANON_48, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1594, 13)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReactionEquilibriumProp'), CTD_ANON_49, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1658, 13)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReactionStateChangeProp')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1594, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReactionEquilibriumProp')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1658, 13))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_47._Automaton = _BuildAutomaton_49()




CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), STD_ANON_34, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1597, 16)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), STD_ANON_35, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1611, 17)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), pyxb.binding.datatypes.string, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1651, 17)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), CTD_ANON_71, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), CTD_ANON_75, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePropName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1597, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1611, 17))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1651, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1652, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Prediction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1653, 17))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_48._Automaton = _BuildAutomaton_50()




CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePropName'), STD_ANON_36, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1661, 16)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eMethodName'), STD_ANON_37, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1683, 17)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sMethodName'), pyxb.binding.datatypes.string, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1725, 17)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation'), CTD_ANON_71, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2460, 1)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Prediction'), CTD_ANON_75, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2495, 1)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePropName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1661, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1683, 17))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1725, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CriticalEvaluation')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1726, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Prediction')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1727, 17))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_51()




CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1742, 11)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePhase'), ePhaseName, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1745, 10)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1742, 11))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1743, 11))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePhase')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1745, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_50._Automaton = _BuildAutomaton_52()




CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1753, 11)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePhase'), ePhaseName, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1756, 10)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1756, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1753, 11))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1754, 11))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePhase')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1756, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_53()




CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nConstraintNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1796, 7)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConstraintID'), CTD_ANON_53, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1797, 7)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nConstraintValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1808, 7)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nConstrDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1809, 7)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConstrUncertainty'), ConstrUncertaintyType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1810, 7)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConstrRepeatability'), ConstrRepeatabilityType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1811, 7)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConstrDeviceSpec'), ConstrDeviceSpecType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1812, 7)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1796, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1810, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1811, 7))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1812, 7))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nConstraintNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1796, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ConstraintID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1797, 7))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nConstraintValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1808, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nConstrDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1809, 7))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ConstrUncertainty')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1810, 7))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ConstrRepeatability')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1811, 7))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ConstrDeviceSpec')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1812, 7))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_54()




CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConstraintType'), ConstraintVariableType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1800, 10)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1802, 11)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1801, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ConstraintType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1800, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1802, 11))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1803, 11))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_55()




CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nVarNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1819, 7)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VariableID'), CTD_ANON_55, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1820, 7)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VarPhaseID'), CTD_ANON_56, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1831, 7)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VarUncertainty'), PropVarUncertaintyType, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1847, 14)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VarRepeatability'), PropVarRepeatabilityType, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1848, 7)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VarDeviceSpec'), PropVarDeviceSpecType, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1849, 7)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Solvent'), CTD_ANON_58, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2085, 1)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1831, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1846, 14))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1847, 14))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1848, 7))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1849, 7))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nVarNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1819, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VariableID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1820, 7))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VarPhaseID')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1831, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Solvent')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1846, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VarUncertainty')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1847, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VarRepeatability')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1848, 7))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VarDeviceSpec')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1849, 7))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_56()




CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VariableType'), ConstraintVariableType, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1823, 10)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1825, 11)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1824, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VariableType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1823, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1825, 11))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1826, 11))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_57()




CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eVarPhase'), ePhaseName, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1834, 10)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType'), eCrystalLatticeTypeSelection, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1836, 11)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription'), pyxb.binding.datatypes.string, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1837, 11)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1840, 11)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1835, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1839, 10))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eVarPhase')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1834, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCrystalLatticeType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1836, 11))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sPhaseDescription')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1837, 11))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1840, 11))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 1841, 11))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_58()




CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCASRNum'), pyxb.binding.datatypes.integer, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2077, 4)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nOrgNum'), pyxb.binding.datatypes.integer, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2078, 4)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2077, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2078, 4))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCASRNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2077, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nOrgNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2078, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_59()




CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegNum'), CTD_ANON_57, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2074, 1)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2089, 5)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCompIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2089, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2090, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_60()




ConstraintVariableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eTemperature'), STD_ANON_39, scope=ConstraintVariableType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2100, 3)))

ConstraintVariableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePressure'), STD_ANON_40, scope=ConstraintVariableType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2109, 3)))

ConstraintVariableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eComponentComposition'), STD_ANON_41, scope=ConstraintVariableType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2119, 3)))

ConstraintVariableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eSolventComposition'), STD_ANON_42, scope=ConstraintVariableType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2141, 3)))

ConstraintVariableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eMiscellaneous'), STD_ANON_43, scope=ConstraintVariableType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2157, 3)))

ConstraintVariableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eBioVariables'), STD_ANON_44, scope=ConstraintVariableType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2176, 3)))

ConstraintVariableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eParticipantAmount'), STD_ANON_45, scope=ConstraintVariableType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2187, 6)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstraintVariableType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eTemperature')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2100, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstraintVariableType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePressure')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2109, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstraintVariableType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eComponentComposition')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2119, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstraintVariableType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eSolventComposition')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2141, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstraintVariableType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eMiscellaneous')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2157, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstraintVariableType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eBioVariables')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2176, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstraintVariableType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eParticipantAmount')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2187, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConstraintVariableType._Automaton = _BuildAutomaton_61()




ConstrDeviceSpecType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sDeviceSpecEvaluator'), pyxb.binding.datatypes.string, scope=ConstrDeviceSpecType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2202, 3)))

ConstrDeviceSpecType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eDeviceSpecMethod'), STD_ANON_46, scope=ConstrDeviceSpecType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2203, 3)))

ConstrDeviceSpecType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sDeviceSpecMethod'), pyxb.binding.datatypes.string, scope=ConstrDeviceSpecType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2212, 3)))

ConstrDeviceSpecType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nDeviceSpecValue'), pyxb.binding.datatypes.float, scope=ConstrDeviceSpecType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2213, 3)))

ConstrDeviceSpecType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nDeviceSpecLevOfConfid'), pyxb.binding.datatypes.float, scope=ConstrDeviceSpecType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2214, 3)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2202, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2212, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2213, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2214, 3))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConstrDeviceSpecType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sDeviceSpecEvaluator')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2202, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstrDeviceSpecType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eDeviceSpecMethod')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2203, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConstrDeviceSpecType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sDeviceSpecMethod')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2212, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConstrDeviceSpecType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nDeviceSpecValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2213, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ConstrDeviceSpecType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nDeviceSpecLevOfConfid')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2214, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConstrDeviceSpecType._Automaton = _BuildAutomaton_62()




PropVarDeviceSpecType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sDeviceSpecEvaluator'), pyxb.binding.datatypes.string, scope=PropVarDeviceSpecType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2222, 3)))

PropVarDeviceSpecType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eDeviceSpecMethod'), STD_ANON_47, scope=PropVarDeviceSpecType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2223, 3)))

PropVarDeviceSpecType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sDeviceSpecMethod'), pyxb.binding.datatypes.string, scope=PropVarDeviceSpecType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2232, 3)))

PropVarDeviceSpecType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nDeviceSpecLevOfConfid'), pyxb.binding.datatypes.float, scope=PropVarDeviceSpecType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2233, 3)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2222, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2232, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2233, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PropVarDeviceSpecType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sDeviceSpecEvaluator')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2222, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PropVarDeviceSpecType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eDeviceSpecMethod')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2223, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PropVarDeviceSpecType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sDeviceSpecMethod')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2232, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PropVarDeviceSpecType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nDeviceSpecLevOfConfid')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2233, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PropVarDeviceSpecType._Automaton = _BuildAutomaton_63()




ConstrRepeatabilityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sRepeatEvaluator'), pyxb.binding.datatypes.string, scope=ConstrRepeatabilityType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2241, 3)))

ConstrRepeatabilityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eRepeatMethod'), STD_ANON_48, scope=ConstrRepeatabilityType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2242, 3)))

ConstrRepeatabilityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sRepeatMethod'), pyxb.binding.datatypes.string, scope=ConstrRepeatabilityType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2252, 3)))

ConstrRepeatabilityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nRepeatValue'), pyxb.binding.datatypes.float, scope=ConstrRepeatabilityType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2253, 3)))

ConstrRepeatabilityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nRepetitions'), pyxb.binding.datatypes.integer, scope=ConstrRepeatabilityType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2254, 3)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2241, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2252, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2253, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2254, 3))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConstrRepeatabilityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sRepeatEvaluator')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2241, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstrRepeatabilityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eRepeatMethod')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2242, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConstrRepeatabilityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sRepeatMethod')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2252, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConstrRepeatabilityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nRepeatValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2253, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ConstrRepeatabilityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nRepetitions')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2254, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConstrRepeatabilityType._Automaton = _BuildAutomaton_64()




PropVarRepeatabilityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sRepeatEvaluator'), pyxb.binding.datatypes.string, scope=PropVarRepeatabilityType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2262, 3)))

PropVarRepeatabilityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eRepeatMethod'), STD_ANON_49, scope=PropVarRepeatabilityType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2263, 3)))

PropVarRepeatabilityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sRepeatMethod'), pyxb.binding.datatypes.string, scope=PropVarRepeatabilityType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2273, 3)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2262, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2273, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PropVarRepeatabilityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sRepeatEvaluator')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2262, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PropVarRepeatabilityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eRepeatMethod')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2263, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PropVarRepeatabilityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sRepeatMethod')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2273, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PropVarRepeatabilityType._Automaton = _BuildAutomaton_65()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCurveDevAssessNum'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2282, 4)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sCurveDevEvaluator'), pyxb.binding.datatypes.string, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2283, 4)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sCurveSpec'), pyxb.binding.datatypes.string, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2284, 4)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCurveRmsDevValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2285, 4)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCurveRmsRelativeDevValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2286, 4)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2283, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2285, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2286, 4))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCurveDevAssessNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2282, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sCurveDevEvaluator')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2283, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sCurveSpec')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2284, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCurveRmsDevValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2285, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCurveRmsRelativeDevValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2286, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_66()




ConstrUncertaintyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sUncertEvaluator'), pyxb.binding.datatypes.string, scope=ConstrUncertaintyType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2295, 3)))

ConstrUncertaintyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sUncertEvalMethod'), pyxb.binding.datatypes.string, scope=ConstrUncertaintyType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2296, 3)))

ConstrUncertaintyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nStdUncertValue'), pyxb.binding.datatypes.float, scope=ConstrUncertaintyType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2297, 3)))

ConstrUncertaintyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCoverageFactor'), pyxb.binding.datatypes.float, scope=ConstrUncertaintyType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2298, 3)))

ConstrUncertaintyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nExpandUncertValue'), pyxb.binding.datatypes.float, scope=ConstrUncertaintyType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2299, 3)))

ConstrUncertaintyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nUncertLevOfConfid'), pyxb.binding.datatypes.float, scope=ConstrUncertaintyType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2300, 3)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2295, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2296, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2297, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2298, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2299, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2300, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConstrUncertaintyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sUncertEvaluator')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2295, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConstrUncertaintyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sUncertEvalMethod')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2296, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConstrUncertaintyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nStdUncertValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2297, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ConstrUncertaintyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCoverageFactor')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2298, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ConstrUncertaintyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nExpandUncertValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2299, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ConstrUncertaintyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nUncertLevOfConfid')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2300, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ConstrUncertaintyType._Automaton = _BuildAutomaton_67()




PropVarUncertaintyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nUncertAssessNum'), pyxb.binding.datatypes.integer, scope=PropVarUncertaintyType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2308, 3)))

PropVarUncertaintyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sUncertEvaluator'), pyxb.binding.datatypes.string, scope=PropVarUncertaintyType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2309, 3)))

PropVarUncertaintyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sUncertEvalMethod'), pyxb.binding.datatypes.string, scope=PropVarUncertaintyType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2310, 3)))

PropVarUncertaintyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCoverageFactor'), pyxb.binding.datatypes.float, scope=PropVarUncertaintyType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2311, 3)))

PropVarUncertaintyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nUncertLevOfConfid'), pyxb.binding.datatypes.float, scope=PropVarUncertaintyType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2312, 3)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2309, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2310, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2311, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2312, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PropVarUncertaintyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nUncertAssessNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2308, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PropVarUncertaintyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sUncertEvaluator')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2309, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PropVarUncertaintyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sUncertEvalMethod')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2310, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PropVarUncertaintyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCoverageFactor')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2311, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PropVarUncertaintyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nUncertLevOfConfid')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2312, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PropVarUncertaintyType._Automaton = _BuildAutomaton_68()




AsymUncertType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPositiveValue'), pyxb.binding.datatypes.float, scope=AsymUncertType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2320, 3)))

AsymUncertType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nNegativeValue'), pyxb.binding.datatypes.float, scope=AsymUncertType, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2321, 3)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2320, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2321, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AsymUncertType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPositiveValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2320, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AsymUncertType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nNegativeValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2321, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AsymUncertType._Automaton = _BuildAutomaton_69()




CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCombUncertAssessNum'), pyxb.binding.datatypes.integer, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2330, 4)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sCombUncertEvaluator'), pyxb.binding.datatypes.string, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2331, 4)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eCombUncertEvalMethod'), STD_ANON_50, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2332, 4)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sCombUncertEvalMethod'), pyxb.binding.datatypes.string, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2340, 4)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCombCoverageFactor'), pyxb.binding.datatypes.float, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2341, 4)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCombUncertLevOfConfid'), pyxb.binding.datatypes.float, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2342, 4)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2331, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2340, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2341, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2342, 4))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCombUncertAssessNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2330, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sCombUncertEvaluator')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2331, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCombUncertEvalMethod')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2332, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sCombUncertEvalMethod')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2340, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCombCoverageFactor')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2341, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCombUncertLevOfConfid')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2342, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_70()




CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VariableValue'), CTD_ANON_62, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2352, 4)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropertyValue'), CTD_ANON_65, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2379, 4)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2352, 4))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VariableValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2352, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropertyValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2379, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_61._Automaton = _BuildAutomaton_71()




CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nVarNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2355, 7)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nVarValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2356, 7)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nVarDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2357, 7)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VarUncertainty'), CTD_ANON_63, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2358, 7)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VarRepeatability'), CTD_ANON_64, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2367, 7)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nVarDeviceSpecValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2375, 7)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2358, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2367, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2375, 7))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nVarNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2355, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nVarValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2356, 7))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nVarDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2357, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VarUncertainty')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2358, 7))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VarRepeatability')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2367, 7))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nVarDeviceSpecValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2375, 7))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_62._Automaton = _BuildAutomaton_72()




CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nUncertAssessNum'), pyxb.binding.datatypes.integer, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2361, 10)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nStdUncertValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2362, 10)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nExpandUncertValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2363, 10)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2362, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2363, 10))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nUncertAssessNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2361, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nStdUncertValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2362, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nExpandUncertValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2363, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_73()




CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nVarRepeatValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2370, 10)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nRepetitions'), pyxb.binding.datatypes.integer, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2371, 10)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nVarRepeatValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2370, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nRepetitions')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2371, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_74()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPropNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2382, 7)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPropValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2385, 9)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPropDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2386, 9)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropLimit'), CTD_ANON_66, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2388, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CombinedUncertainty'), CTD_ANON_67, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2400, 7)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropUncertainty'), CTD_ANON_68, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2417, 7)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropRepeatability'), CTD_ANON_69, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2434, 7)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPropDeviceSpecValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2442, 7)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurveDev'), CTD_ANON_70, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2443, 7)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2400, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2417, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2434, 7))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2442, 7))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2443, 7))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPropNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2382, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPropValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2385, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPropDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2386, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropLimit')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2388, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CombinedUncertainty')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2400, 7))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropUncertainty')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2417, 7))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropRepeatability')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2434, 7))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPropDeviceSpecValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2442, 7))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurveDev')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2443, 7))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_75()




CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPropUpperLimitValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2392, 12)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPropLowerLimitValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2393, 12)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPropLimitDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2395, 11)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPropUpperLimitValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2392, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPropLowerLimitValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2393, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPropLimitDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2395, 11))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_66._Automaton = _BuildAutomaton_76()




CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCombUncertAssessNum'), pyxb.binding.datatypes.integer, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2403, 10)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCombStdUncertValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2406, 12)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCombExpandUncertValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2407, 12)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AsymCombStdUncert'), AsymUncertType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2410, 12)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AsymCombExpandUncert'), AsymUncertType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2411, 12)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2406, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2407, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2410, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2411, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCombUncertAssessNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2403, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCombStdUncertValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2406, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCombExpandUncertValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2407, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AsymCombStdUncert')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2410, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AsymCombExpandUncert')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2411, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_67._Automaton = _BuildAutomaton_77()




CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nUncertAssessNum'), pyxb.binding.datatypes.integer, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2420, 10)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nStdUncertValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2423, 12)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nExpandUncertValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2424, 12)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AsymStdUncert'), AsymUncertType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2427, 12)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AsymExpandUncert'), AsymUncertType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2428, 12)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2423, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2424, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2427, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2428, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nUncertAssessNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2420, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nStdUncertValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2423, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nExpandUncertValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2424, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AsymStdUncert')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2427, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AsymExpandUncert')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2428, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_78()




CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPropRepeatValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2437, 10)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nRepetitions'), pyxb.binding.datatypes.integer, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2438, 10)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPropRepeatValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2437, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nRepetitions')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2438, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_79()




CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCurveDevAssessNum'), pyxb.binding.datatypes.integer, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2446, 10)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCurveDevValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2447, 10)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCurveDevAssessNum')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2446, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCurveDevValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2447, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_80()




CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SingleProp'), CTD_ANON_72, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2463, 4)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MultiProp'), CTD_ANON_73, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2471, 4)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EquationOfState'), CTD_ANON_74, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2480, 4)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SingleProp')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2463, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MultiProp')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2471, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EquationOfState')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2480, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_81()




CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sEvalSinglePropDescription'), pyxb.binding.datatypes.string, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2466, 7)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EvalSinglePropRef'), CitationType, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2467, 7)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2466, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2467, 7))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sEvalSinglePropDescription')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2466, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EvalSinglePropRef')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2467, 7))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_72._Automaton = _BuildAutomaton_82()




CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sEvalMultiPropList'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2474, 7)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sEvalMultiPropDescription'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2475, 7)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EvalMultiPropRef'), CitationType, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2476, 7)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2474, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2475, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2476, 7))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sEvalMultiPropList')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2474, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sEvalMultiPropDescription')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2475, 7))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EvalMultiPropRef')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2476, 7))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_83()




CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sEvalEOSName'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2483, 7)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sEvalEOSDescription'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2484, 7)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EvalEOSRef'), CitationType, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2485, 7)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2483, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2484, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2485, 7))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sEvalEOSName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2483, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sEvalEOSDescription')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2484, 7))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EvalEOSRef')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2485, 7))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_74._Automaton = _BuildAutomaton_84()




CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ePredictionType'), STD_ANON_51, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2498, 4)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sPredictionMethodName'), pyxb.binding.datatypes.string, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2512, 4)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sPredictionMethodDescription'), pyxb.binding.datatypes.string, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2513, 4)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PredictionMethodRef'), CitationType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2514, 4)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2512, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2513, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2514, 4))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ePredictionType')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2498, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sPredictionMethodName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2512, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sPredictionMethodDescription')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2513, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PredictionMethodRef')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2514, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_75._Automaton = _BuildAutomaton_85()




CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eEqName'), STD_ANON_52, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2526, 6)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sEqName'), pyxb.binding.datatypes.string, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2542, 6)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'urlMathSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2544, 5)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EqProperty'), CTD_ANON_77, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2546, 4)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EqConstraint'), CTD_ANON_78, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2562, 4)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EqVariable'), CTD_ANON_79, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2578, 4)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EqParameter'), CTD_ANON_80, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2594, 4)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EqConstant'), CTD_ANON_81, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2607, 4)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Covariance'), CTD_ANON_82, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2617, 4)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCovarianceLevOfConfid'), pyxb.binding.datatypes.float, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2626, 4)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2546, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2562, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2578, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2594, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2607, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2617, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2626, 4))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eEqName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2526, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sEqName')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2542, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'urlMathSource')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2544, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EqProperty')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2546, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EqConstraint')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2562, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EqVariable')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2578, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EqParameter')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2594, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EqConstant')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2607, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Covariance')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2617, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCovarianceLevOfConfid')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2626, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_76._Automaton = _BuildAutomaton_86()




CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPureOrMixtureDataNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2550, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nReactionDataNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2551, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPropNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2553, 7)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sEqSymbol'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2554, 7)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqPropIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2555, 7)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sOtherPropUnit'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2556, 7)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqPropRangeMin'), pyxb.binding.datatypes.float, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2557, 7)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqPropRangeMax'), pyxb.binding.datatypes.float, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2558, 7)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2549, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2555, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2556, 7))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2557, 7))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2558, 7))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPureOrMixtureDataNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2550, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nReactionDataNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2551, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPropNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2553, 7))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sEqSymbol')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2554, 7))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqPropIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2555, 7))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sOtherPropUnit')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2556, 7))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqPropRangeMin')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2557, 7))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqPropRangeMax')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2558, 7))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_87()




CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPureOrMixtureDataNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2566, 8)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nReactionDataNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2567, 8)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nConstraintNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2569, 7)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sEqSymbol'), pyxb.binding.datatypes.string, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2570, 7)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqConstraintIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2571, 7)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sOtherConstraintUnit'), pyxb.binding.datatypes.string, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2572, 7)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqConstraintRangeMin'), pyxb.binding.datatypes.float, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2573, 7)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqConstraintRangeMax'), pyxb.binding.datatypes.float, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2574, 7)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2565, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2571, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2572, 7))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2573, 7))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2574, 7))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPureOrMixtureDataNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2566, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nReactionDataNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2567, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nConstraintNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2569, 7))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sEqSymbol')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2570, 7))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqConstraintIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2571, 7))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sOtherConstraintUnit')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2572, 7))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqConstraintRangeMin')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2573, 7))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqConstraintRangeMax')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2574, 7))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_78._Automaton = _BuildAutomaton_88()




CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nPureOrMixtureDataNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2582, 8)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nReactionDataNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2583, 8)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nVarNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2585, 7)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sEqSymbol'), pyxb.binding.datatypes.string, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2586, 7)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqVarIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2587, 7)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sOtherVarUnit'), pyxb.binding.datatypes.string, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2588, 7)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqVarRangeMin'), pyxb.binding.datatypes.float, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2589, 7)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqVarRangeMax'), pyxb.binding.datatypes.float, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2590, 7)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2581, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2587, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2588, 7))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2589, 7))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2590, 7))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nPureOrMixtureDataNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2582, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nReactionDataNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2583, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nVarNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2585, 7))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sEqSymbol')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2586, 7))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqVarIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2587, 7))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sOtherVarUnit')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2588, 7))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqVarRangeMin')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2589, 7))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqVarRangeMax')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2590, 7))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_79._Automaton = _BuildAutomaton_89()




CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqParNumber'), pyxb.binding.datatypes.integer, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2597, 7)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sEqParSymbol'), pyxb.binding.datatypes.string, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2599, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqParIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2600, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqParValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2602, 7)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqParDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2603, 7)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2597, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2600, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqParNumber')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2597, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sEqParSymbol')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2599, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqParIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2600, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqParValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2602, 7))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqParDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2603, 7))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_80._Automaton = _BuildAutomaton_90()




CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sEqConstantSymbol'), pyxb.binding.datatypes.string, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2610, 7)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqConstantIndex'), pyxb.binding.datatypes.integer, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2611, 7)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqConstantValue'), pyxb.binding.datatypes.float, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2612, 7)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqConstantDigits'), pyxb.binding.datatypes.integer, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2613, 7)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2611, 7))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sEqConstantSymbol')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2610, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqConstantIndex')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2611, 7))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqConstantValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2612, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqConstantDigits')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2613, 7))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_81._Automaton = _BuildAutomaton_91()




CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqParNumber1'), pyxb.binding.datatypes.integer, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2620, 7)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nEqParNumber2'), pyxb.binding.datatypes.integer, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2621, 7)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nCovarianceValue'), pyxb.binding.datatypes.double, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2622, 7)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqParNumber1')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2620, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nEqParNumber2')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2621, 7))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nCovarianceValue')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 2622, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_82._Automaton = _BuildAutomaton_92()




CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Component'), CTD_ANON_11, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 392, 8)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Component')), pyxb.utils.utility.Location('/home/wildsonbbl/documents/code/themoml/ThermoML/ThermoML.xsd', 392, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_83._Automaton = _BuildAutomaton_93()

